{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///PersistentMap.js","webpack:///webpack/bootstrap 7e9dc948843b561370e8","webpack:///(webpack)/buildin/global.js","webpack:///./~/process/browser.js","webpack:///./src/index.js","webpack:///./~/argsarray/index.js","webpack:///./~/babel-runtime/regenerator/index.js","webpack:///./~/debug/browser.js","webpack:///./~/debug/debug.js","webpack:///./~/es6-promise-pool/es6-promise-pool.js","webpack:///./~/events/events.js","webpack:///./~/immediate/lib/browser.js","webpack:///./~/inherits/inherits_browser.js","webpack:///./~/js-extend/extend.js","webpack:///./~/lie/lib/browser.js","webpack:///./~/ms/index.js","webpack:///./~/pouchdb/lib/index-browser.js","webpack:///./~/regenerator-runtime/runtime-module.js","webpack:///./~/regenerator-runtime/runtime.js","webpack:///./~/scope-eval/scope_eval.js","webpack:///./~/spark-md5/spark-md5.js","webpack:///./~/vuvuzela/index.js"],"names":["root","factory","exports","module","define","amd","a","i","this","modules","__webpack_require__","moduleId","installedModules","l","call","m","c","value","d","name","getter","Object","defineProperty","configurable","enumerable","get","n","__esModule","o","object","property","prototype","hasOwnProperty","p","s","g","Function","eval","e","window","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","setTimeout","runClearTimeout","marker","cachedClearTimeout","clearTimeout","cleanUpNextTick","draining","currentQueue","length","queue","concat","queueIndex","drainQueue","timeout","len","run","Item","array","noop","process","nextTick","args","Array","arguments","push","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","binding","cwd","chdir","dir","umask","_interopRequireDefault","obj","default","_regenerator","_regenerator2","_pouchdb","_pouchdb2","PersistentMap","lazyMap","db","docs","persistentMap","async","_context","prev","next","Map","awrap","allDocs","include_docs","sent","set","key","_set","getSync","_getSync","delete","_delete","rows","forEach","row","doc","_id","getOwnPropertyNames","prop","abrupt","stop","undefined","_context2","put","entry","_context3","_context4","remove","argsArray","useColors","document","documentElement","style","console","firebug","exception","table","navigator","userAgent","toLowerCase","match","parseInt","RegExp","$1","formatArgs","namespace","humanize","diff","color","slice","index","lastC","replace","splice","log","save","namespaces","storage","removeItem","debug","load","r","localstorage","localStorage","chrome","local","colors","formatters","j","v","JSON","stringify","enable","selectColor","prevColor","disabled","enabled","self","curr","Date","ms","prevTime","coerce","format","formatter","val","logFn","bind","fn","split","skips","substr","names","disable","test","stack","message","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","EventTarget","_listeners","addEventListener","type","listener","indexOf","removeEventListener","dispatchEvent","evt","listeners","isGenerator","func","constructor","functionToIterator","promise","done","promiseToIterator","called","toIterator","Promise","then","resolve","PromisePoolEvent","target","data","PromisePool","source","concurrency","options","Math","floor","_concurrency","_options","_iterator","_done","_size","_promise","_callbacks","active","_proceed","size","start","that","reject","_fireEvent","_settle","error","_onPooledPromiseFulfilled","result","_onPooledPromiseRejected","_trackPromise","err","EventEmitter","_events","_maxListeners","isFunction","arg","isNumber","isObject","isUndefined","defaultMaxListeners","setMaxListeners","isNaN","TypeError","er","handler","context","newListener","warned","trace","fired","list","position","ret","listenerCount","evlistener","emitter","global","oldQueue","immediate","task","scheduleDrain","Mutation","MutationObserver","WebKitMutationObserver","observer","element","createTextNode","observe","characterData","setImmediate","MessageChannel","createElement","scriptEl","onreadystatechange","parentNode","removeChild","appendChild","channel","port1","onmessage","port2","postMessage","create","ctor","superCtor","super_","writable","TempCtor","each","extend","sources","INTERNAL","resolver","state","PENDING","outcome","safelyResolveThenable","QueueItem","onFulfilled","onRejected","callFulfilled","otherCallFulfilled","callRejected","otherCallRejected","unwrap","returnValue","handlers","getThen","thenable","onError","onSuccess","tryToUnwrap","tryCatch","status","out","reason","all","iterable","allResolver","resolveFromAll","outValue","values","resolved","toString","race","response","REJECTED","FULFILLED","parse","str","exec","parseFloat","y","h","short","round","long","plural","ceil","_interopDefault","ex","mangle","unmangle","substring","_Map","store","_Set","isArray","add","isBinaryObject","ArrayBuffer","Blob","cloneArrayBuffer","buff","byteLength","targetArray","Uint8Array","sourceArray","cloneBinaryObject","webkitSlice","isPlainObject","proto","getPrototypeOf","Ctor","funcToString","objectCtorString","clone","newObject","toISOString","getArguments","toPromise","usedCB","tempCB","pop","resp","PouchPromise","fulfill","callback","mesg","adapterFun","logApiCall","logArgs","origCallback","res","responseArgs","_closed","_destroyed","taskqueue","isReady","addTask","failed","pick","arr","identityFunction","x","formatResultForOpenRevsGet","ok","bulkGet","opts","collapseResultsAndFinish","results","perDocResults","info","id","checkDone","numDone","numDocs","gotResult","docIndex","nextBatch","allRequests","upTo","min","MAX_NUM_CONCURRENT_REQUESTS","batch","processBatch","offset","docId","docIdx","docRequests","requestsById","docOpts","open_revs","map","request","rev","filter","formatResult","param","requests","keys","isChromeApp","hasLocalStorage","hasLocal","attachBrowserEvents","onChanged","db_name","dbName","newValue","attachEvent","Changes$1","events","guardedConsole","method","randomNumber","max","maxTimeout","ratio","random","range","defaultBackOff","explainError","PouchError","createError","CustomPouchError","generateErrorFromResponse","UNKNOWN_ERROR","tryFilter","req","msg","BAD_REQUEST","filterChange","hasFilter","query","query_params","change","filterReturn","attachments","att","_attachments","stub","flatten","arrs","invalidIdError","INVALID_ID","RESERVED_ID","MISSING_ID","ee","parseDesignDocFunctionName","parts","normalizeDesignDocFunctionName","normalized","join","parseUri","parser","uri","encoded","decodeURIComponent","qName","qParser","$0","$2","upsert","diffFun","docRev","_rev","newDoc","tryAndPut","updated","getValue","radix","uuid","chars","winningRev","metadata","winningId","winningPos","winningDeleted","node","toVisit","rev_tree","tree","ids","branches","pos","deleted","traverseRevTree","revs","newCtx","ctx","sortByPos","b","collectLeaves","leaves","isLeaf","acc","sort","reverse","collectConflicts","win","conflicts","leaf","compactTree","revHash","rootToLeaf","paths","history","sortByPos$1","binarySearch","item","comparator","mid","low","high","insertSorted","idx","pathToTree","path","numStemmed","currentLeaf","compareTree","mergeTree","in_tree1","in_tree2","tree1","tree2","merged","doMerge","dontExpand","restree","branch","t1","t2","candidateParents","trees","parent","parentIdx","elements","elementsLen","el","stem","depth","maybeStem","stemmed","stemmedNode","merge","newTree","stemmedRevs","revExists","splitRev","targetPos","targetId","getTrees","isDeleted","isLocalId","evalFilter","input","scopedEval","evalView","code","tryCatchInChangeListener","Changes","onDestroy","cancel","complete","onChange","isCancelled","doChanges","processChange","changeList","changes","_conflicts","compare","left","right","arrayFirst","yankError","cleanDocs","_deleted","atts","compareByIdThenRev","idCompare","aStart","_revisions","bStart","computeHeight","height","edges","prnt","from","to","edge","allDocsKeysQuery","api","skip","limit","descending","_allDocs","finalResults","subOpts","jsExtend","optKey","total_rows","doNextCompaction","_compactionQueue","catch","last_seq","_compact","shift","attachmentNameError","charAt","AbstractPouchDB","TaskQueue","parseAdapter","adapter","adapterName","skipIdb","PouchDB","adapters","prefix","preferredAdapters","usePrefix","use_prefix","prepareForDestruction","onDestroyed","onConstructorDestroyed","destructionListeners","_destructionListeners","has","__opts","auto_compaction","prefixedName","backend","_adapter","valid","fail","ready","setUpEventEmitter","Pouch","eventEmitter","destructListeners","toObject","reduce","parseRevisionInfo","INVALID_REV","makeRevTreeFromRevisions","revisions","revisionIds","parseDoc","newEdits","nRevNum","newRevId","revInfo","_rev_tree","specialKey","reservedWords","DOC_VALIDATION","dataWords","createBlob","properties","Builder","BlobBuilder","MSBlobBuilder","MozBlobBuilder","WebKitBlobBuilder","builder","append","getBlob","binaryStringToArrayBuffer","bin","buf","charCodeAt","binStringToBluffer","binString","b64ToBluffer","b64","atob$1","arrayBufferToBinaryString","buffer","binary","bytes","String","fromCharCode","readAsBinaryString","blob","FileReader","FileReaderSync","readAsArrayBuffer","reader","hasBinaryString","onloadend","blobToBinaryString","blobOrBuffer","blobToBase64","base64","btoa$1","rawToBase64","raw","sliceBlob","end","appendBlob","arrayBuffer","appendString","string","appendBinary","binaryMd5","setImmediateShim","loadNextChunk","destroy","currentChunk","chunkSize","chunks","inputIsString","MD5_CHUNK_SIZE","Md5","stringMd5","hash","parseBase64","BAD_ARG","preprocessString","blobType","asBinary","content_type","digest","preprocessBlob","md5","preprocessAttachment","preprocessAttachments","docInfos","docv","overallErr","docInfo","processedAttachment","recv","updateDoc","revLimit","cb","writeDoc","previousWinningRev","previouslyDeleted","isRoot","inConflict","REV_CONFLICT","newRev","rev_map","newRevIsDeleted","winningRev$$","winningRevIsDeleted","delta","rootIsMissing","processDocs","fetchedDocs","tx","overallCallback","insertDoc","resultsIdx","MISSING_DOC","checkAllDocsDone","docsDone","docsToDo","new_edits","idsToDocs","currentDoc","docWritten","nextDoc","slowJsonParse","vuvuzela","safeJsonParse","safeJsonStringify","json","tryCode","applyNext","taskQueue","running","action","idbError","IDB_ERROR","encodeMetadata","deletedOrLocal","seq","decodeMetadata","storedObject","decodeDoc","_doc_id_rev","lastIndexOf","readBlobData","body","asBlob","fetchAttachmentsIfNecessary","txn","fetchAttachment","attObj","objectStore","ATTACH_STORE","onsuccess","postProcessAttachments","attNames","compactRevs","count","deleteOrphanedAttachments","possiblyOrphanedDigests","countReq","attAndSeqStore","IDBKeyRange","bound","attStore","seqStore","BY_SEQ_STORE","ATTACH_AND_SEQ_STORE","getKey","cursor","openCursor","only","event","digestSeq","primaryKey","continue","openTransactionSafely","idb","stores","mode","transaction","idbBulkDocs","dbOpts","idbChanges","startTransaction","DOC_STORE","LOCAL_STORE","txnResult","onabort","ontimeout","oncomplete","docStore","bySeqStore","attachStore","attachAndSeqStore","verifyAttachments","preconditionErrored","fetchExistingDocs","idbProcessDocs","revs_limit","numFetched","readMetadata","notify","_meta","docCount","docCountDelta","verifyAttachment","MISSING_STUB","finish","digests","filename","attErr","isUpdate","hasAttachments","writeAttachments","finishDoc","afterPutDoc","revsToDelete","metadataToStore","metaDataReq","afterPutMetadata","afterPutDocError","preventDefault","stopPropagation","getKeyReq","putReq","insertAttachmentMappings","onerror","collectResults","attachmentSaved","revpos","saveAttachment","attsAdded","attsToAdd","newAtt","docInfoError","blobSupport","createKeyRange","inclusiveEnd","upperBound","lowerBound","handleKeyRangeError","idbAllDocs","allDocsQuery","fetchDocAsynchronously","docIdRevIndex","allDocsInner","onGetCursor","onResultsReady","onTxnComplete","startkey","endkey","inclusive_end","keyRange","checkBlobSupport","DETECT_BLOB_SUPPORT_STORE","matchedChrome","matchedEdge","IdbPouch","thisCallback","init","createSchema","createObjectStore","keyPath","autoIncrement","createIndex","unique","META_STORE","addDeletedOrLocalIndex","createLocalStoreSchema","migrateLocalStore","localStore","docIdRev","seqCursor","addAttachAndSeqStore","migrateAttsAndSeqs","digestMap","migrateMetadata","decodeMetadataCompat","fetchMetadataSeq","metadataSeq","onGetMetadataSeq","instanceId","_bulkDocs","reqOpts","_get","_getAttachment","attachId","attachment","blobData","_info","cachedDBs","updateSeq","doc_count","update_seq","idb_attachment_format","_changes","onGetMetadata","lastSeq","onGetWinningDoc","fetchWinningDoc","winningDoc","filtered","numResults","returnDocs","docIds","docIdsToMetadata","fetchChanges","objectStores","since","continuous","doc_ids","return_docs","_close","NOT_OPEN","close","_getRevisionTree","_doCompaction","_getLocal","_putLocal","oldRev","oStore","oldDoc","_removeLocal","_destroy","openReq","openReqList","indexedDB","deleteDatabase","cached","tryStorageOption","open","ADAPTER_VERSION","onupgradeneeded","migration","migrations","oldVersion","currentTarget","onversionchange","checkSetupComplete","meta","blobSupportPromise","IDBPouch","decodeUtf8","escape","hexToInt","charCode","parseHexUtf8","parseHexUtf16","parseHexString","encoding","quote","escapeBlob","unescapeBlob","stringifyDoc","unstringifyDoc","qMarks","num","select","selector","joiner","where","orderBy","compactRevs$1","deleteOrphans","seqs","sql","ATTACH_AND_SEQ_STORE$1","executeSql","digestsToCheck","nonOrphanedDigests","ATTACH_STORE$1","BY_SEQ_STORE$1","websqlError","errorNameMatch","errorName","errorReason","WSQ_ERROR","getSize","isAndroid","websqlBulkDocs","websqlChanges","_name","_docCount","cnt","sqlArgs","deletedInt","insertId","dataWritten","fetchSql","attachmentErr","revsToCompact","DOC_STORE$1","metadataStr","params","websqlProcessDocs","userDocs","docInfoErrors","openDatabaseWithOpts","websql","description","openDBSafely","openDB$1","cachedResult","cachedDatabases","fetchAttachmentsIfNecessary$1","attOpts","_","WebSqlPouch$1","dbCreated","runMigration2","DOC_STORE_WINNINGSEQ_INDEX_SQL","BY_SEQ_STORE_DELETED_INDEX_SQL","runMigration3","LOCAL_STORE$1","doNext","runMigration4","updateRows","doc_id_rev","hex","doc_id","BY_SEQ_STORE_DOC_ID_REV_INDEX_SQL","runMigration5","nextPage","SELECT_DOCS","DOC_STORE_AND_BY_SEQ_JOINER","pageSize","addDigestSeq","digestSeqs","digestSeqPairs","pair","attachAndRev","ATTACH_AND_SEQ_STORE_ATTACH_INDEX_SQL","ATTACH_AND_SEQ_STORE_SEQ_INDEX_SQL","runMigration6","runMigration7","checkEncoding","onGetInstanceId","idRequests","idCallback","onGetVersion","dbVersion","META_STORE$1","attach","initSeq","initSeqArgs","ADAPTER_VERSION$1","setupDone","migrated","dbid","tasks","nextMigration","setup","fetchVersion","db_version","countDocs","websqlOpts","POUCH_VERSION","openDBResult","readTransaction","websql_encoding","totalRows","criteria","selectStmt","view","reportChange","maxSeq","escaped","putLocal","rowsAffected","removeLocal","canOpenTestDB","openDatabase","isValidWebSQL","hasLS","localStorageKey","openedTestDB","openDB","WebSQLPouch","_opts","WebSqlPouch","wrappedFetch","wrappedPromise","fetch","fetchRequest","timer","headers","Headers","fetchOptions","credentials","processData","url","fetchResponse","statusCode","text","abort","xhRequest","xhr","timedout","abortReq","cleanUp","timeoutReq","onprogress","upload","XMLHttpRequest","withCredentials","Accept","responseType","setRequestHeader","readyState","getResponseHeader","responseText","send","testXhr","ajax$1","hasXhr","defaultBody","ajaxCore","missing","res$2","defaultOptions","cache","ajax","ua","isSafari","isIE","isEdge","shouldCacheBust","isBlobUrl","hasArgs","now","readAttachmentsAsBlobOrBuffer","encodeDocId","encodeURIComponent","preprocessAttachments$1","hasUrlPrefix","protocol","getHost","user","password","auth","username","genDBUrl","genUrl","pathDel","host","port","paramsToStr","k","HttpPouch","ajax$$","userOpts","reqAjax","ajaxOpts","log$1","_ajax","ajaxPromise","adapterFun$$","skipSetup","skip_setup","setupPromise","checkExists","dbUrl","encodeAttachmentId","attachmentId","nAuth","token","unescape","Authorization","compact","ping","compact_running","interval","doBulkGet","doBulkGetShim","onResult","batchNum","numBatches","batchSize","MAX_SIMULTANEOUS_REVS","supportsBulkGet","supportsBulkGetMap","fetchAttachments","filenames","fetchAllAttachments","docOrDocs","revs_info","docOrId","optsOrRev","getAttachment","removeAttachment","putAttachment","Content-Type","_put","start_key","end_key","paramStr","batch_size","CHANGES_BATCH_SIZE","leftToFetch","feed","heartbeat","param_name","lastFetchedSeq","aborted","xhrOpts","fetched","raw_results_length","finished","revsDiff","HttpPouch$1","pad","padWith","upToLength","padding","targetLength","padLeft","collate","normalizeKey","ai","collationIndex","bi","stringCollate","arrayCollate","objectCollate","Infinity","origKey","toJSON","indexify","numToIndexableString","toIndexableString","objKey","zero","SEP","parseNumber","originalIdx","neg","numAsString","magAsString","MAGNITUDE_DIGITS","magnitude","MIN_MAGNITUDE","ch","metaStack","lastMetaElement","lastElementIndex","parseIndexableString","parsedNum","parsedStr","arrayElement","objElement","ak","bk","expFormat","toExponential","magForComparison","magString","factor","abs","factorStr","toFixed","TaskQueue$1","createView","cachedViews","sourceDB","viewName","mapFun","reduceFun","temporary","viewSignature","_cachedViews","promiseForView","diffFunction","views","fullViewName","depDbs","depDbName","registerDependentDatabase","lastSeqDoc","QueryParseError","captureStackTrace","NotFoundError","BuiltInError","createBuiltInError","sum","jLen","jNum","evalFunctionWithEval","log$2","parseViewName","isGenOne","emitError","tryCode$1","output","sortByKeyThenValue","keyCompare","sliceResults","rowToDocId","readAttachmentsAsBlobOrBuffer$1","postprocessAttachments","addHttpParam","paramName","asJson","coerceInteger","integerCandidate","asNumber","Number","coerceOptions","group_level","checkPositiveInteger","number","checkQueryParseError","startkeyName","endkeyName","group","optionName","httpQuery","MAX_URL_LENGTH","keysAsString","customQuery","_query","customViewCleanup","_viewCleanup","defaultsTo","getDocsToPersist","docIdsToChangesAndEmits","getMetaDoc","defaultMetaDoc","metaDocId","getKeyValueDocs","metaDoc","processKvDocs","kvDocsRes","kvDocs","oldKeysMap","indexableKeysToKeyValues","keyValue","newKeys","kvDoc","uniq","docData","saveKeyValues","seqDocId","listOfDocsToPersist","docsToPersist","bulkDocs","getQueue","persistentQueues","updateView","sequentialize","updateViewInQueue","mapResults","origMap","currentSeq","processNextBatch","CHANGES_BATCH_SIZE$1","lastKey","jl","complexKey","indexableKey","reduceView","shouldGroup","builtInReduce","groups","lvl","POSITIVE_INFINITY","last","groupKey","reduceTry","queryView","queryViewInQueue","fetchFromView","viewOpts","expectedKeys","parsedKeyAndDocId","onMapResultsReady","shouldReduce","allDocsRes","docIdsToDocs","fetchPromises","keyStart","keyEnd","httpViewCleanup","localViewCleanup","docsToViews","designDocName","viewsToStatus","ddocName","viewDBNames","statusIsGood","viewDBName","dbsToDelete","destroyPromises","queryPromised","createViewOpts","tempViewQueue","cleanup","fin","stale","isGenOne$1","fileHasChanged","localDoc","remoteDoc","getDocAttachments","getDocAttachmentsFromTargetOrSource","src","doCheckForLocalAttachments","createBulkGetOpts","diffs","missingRevs","missingRev","getDocs","getAllDocs","bulkGetOpts","bulkGetResponse","cancelled","bulkGetInfo","resultDocs","Boolean","fetchRevisionOneDocs","getRevisionOneDocs","returnResult","updateCheckpoint","checkpoint","session","session_id","replicator","REPLICATOR","CHECKPOINT_VERSION","unshift","CHECKPOINT_HISTORY_SIZE","Checkpointer","compareReplicationLogs","srcDoc","tgtDoc","compareReplicationHistory","sourceHistory","targetHistory","S","sourceRest","T","targetRest","LOWEST_SEQ","sourceId","hasSessionId","sessionId","props","rest","isForbiddenError","backOff","retry","back_off_function","backOffSet","current_back_off","STARTING_BACK_OFF","removeBackOffSetter","sortObjectPropertiesByKey","queryParams","generateReplicationId","filterFun","filterViewName","queryData","md5sum","replicate$1","initCheckpointer","checkpointer","repId","writeDocs","changedDocs","currentBatch","bulkOpts","completeReplication","errorsById","errorsNo","doc_write_failures","docs_written","errors","finishBatch","outResult","writingCheckpoint","writeCheckpoint","getChanges","onCheckpointError","getDiffs","getBatchDocs","got","docs_read","startNextBatch","batches","processPendingBatch","abortReplication","pendingBatch","changesOpts","live","changesCompleted","replicationCompleted","fatalError","end_time","onChangesComplete","changesPending","onChangesError","abortChanges","batches_limit","_abortChanges","startChanges","getCheckpoint","start_time","_addedListeners","Replication","toPouch","PouchConstructor","replicate","replicateRet","srcPouch","targetPouch","sync","Sync","pullChange","direction","pushChange","pushDenied","pullDenied","pushPaused","pullPaused","pushActive","pullActive","removeAll","isChange","isDenied","isPaused","isActive","removed","canceled","optsPush","optsPull","pull","success","replication","other","inherits","lie","mangled","setItem","getItem","eventFunction","inprogress","notifyLocalWindows","MISSING_BULK_DOCS","QUERY_PARSE_ERROR","NOT_AN_OBJECT","filterChanges","newPromise","ddoc","filterName","filters","post","createAttachment","prevrevpos","was_delete","addToMissing","revId","processDoc","missingForId","missingObj","compactDocument","maxHeight","revTree","candidates","promises","onComplete","finishOpenRevs","indexOfRev","howMany","_revs_info","incompatibleOpt","_type","attachmentError","dependentDb","dependentDbs","depDB","destroyDb","deletedMap","trueName","execute","addToPreferredAdapters","plugin","defaults","defaultOpts","PouchAlt","atob","btoa","platform","promiseFactory","promisedCallback","callbackify","finalPromiseFactory","_sum","_count","_stats","sumsqr","_sumsqr","viewCleanup","mapreduce","updateTarget","updateSource","readOnlySource","comparisons","targetDoc","sourceDoc","1","_readyCalled","hadRuntime","regeneratorRuntime","oldRuntime","wrap","innerFn","outerFn","tryLocsList","generator","Generator","Context","_invoke","makeInvokeMethod","GeneratorFunction","GeneratorFunctionPrototype","defineIteratorMethods","AwaitArgument","AsyncIterator","invoke","record","unwrapped","enqueue","callInvokeWithMethodAndArg","previousPromise","domain","GenStateSuspendedStart","GenStateExecuting","GenStateCompleted","doneResult","delegate","iterator","returnMethod","GenStateSuspendedYield","resultName","nextLoc","_sent","dispatchException","ContinueSentinel","pushTryEntry","locs","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iteratorMethod","iteratorSymbol","hasOwn","$Symbol","Symbol","toStringTagSymbol","toStringTag","inModule","runtime","Gp","displayName","isGeneratorFunction","genFun","mark","setPrototypeOf","__proto__","iter","skipTempReset","rootEntry","rootRecord","rval","handle","loc","caught","hasCatch","hasFinally","finallyEntry","thrown","delegateYield","hasProp","scope","cmn","q","t","add32","ff","gg","hh","ii","md5cycle","md5blk","md5blks","md5blk_array","md51","tail","tmp","lo","hi","md51_array","subarray","rhex","hex_chr","toUtf8","utf8Str2ArrayBuffer","returnUInt8Array","arrayBuffer2Utf8Str","concatenateArrayBuffers","first","second","hexToBinaryString","SparkMD5","lsw","msw","clamp","begin","contents","_buff","_length","_hash","_finish","getState","setState","hashBinary","content","arrayPrefix","objPrefix","numChar","parsedString","lastCh","numConsecutiveSlashes"],"mappings":"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","file":"PersistentMap.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmory imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmory exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tObject.defineProperty(exports, name, {\n/******/ \t\t\tconfigurable: false,\n/******/ \t\t\tenumerable: true,\n/******/ \t\t\tget: getter\n/******/ \t\t});\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 20);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() { return this; })();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _regenerator = __webpack_require__(4);\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _pouchdb = __webpack_require__(14);\n\nvar _pouchdb2 = _interopRequireDefault(_pouchdb);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar PersistentMap = function _callee(name) {\n  var lazyMap, db, docs, persistentMap;\n  return _regenerator2.default.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          lazyMap = new Map();\n          db = new _pouchdb2.default(name);\n          _context.next = 4;\n          return _regenerator2.default.awrap(db.allDocs({ include_docs: true }));\n\n        case 4:\n          docs = _context.sent;\n          persistentMap = {\n            set: function set(key, value) {\n              return _set(db, lazyMap, key, value);\n            },\n            getSync: function getSync(key) {\n              return _getSync(db, key);\n            },\n            delete: function _delete(key) {\n              return _delete2(db, lazyMap, key);\n            }\n          };\n\n          // if the db already exists, we inject its value to the lazy map.\n\n          docs.rows.forEach(function (row) {\n            lazyMap.set(row.doc._id, row.doc.value);\n          });\n\n          Object.getOwnPropertyNames(Map.prototype).forEach(function (prop) {\n            if (typeof persistentMap[prop] === 'undefined') {\n              if (typeof lazyMap[prop] === 'function') {\n                persistentMap[prop] = function () {\n                  return lazyMap[prop].apply(lazyMap, arguments);\n                };\n              } else {\n                persistentMap[prop] = lazyMap[prop];\n              }\n            }\n          });\n\n          return _context.abrupt('return', persistentMap);\n\n        case 9:\n        case 'end':\n          return _context.stop();\n      }\n    }\n  }, null, undefined);\n}; /**\n   *\n   * @module PersistentMap\n   */\n\nvar _set = function _callee2(db, lazyMap, key, value) {\n  return _regenerator2.default.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regenerator2.default.awrap(db.put({\n            _id: key,\n            value: value\n          }));\n\n        case 2:\n          lazyMap.set(key, value);\n\n        case 3:\n        case 'end':\n          return _context2.stop();\n      }\n    }\n  }, null, undefined);\n};\n\nvar _getSync = function _callee3(db, key) {\n  var entry;\n  return _regenerator2.default.async(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regenerator2.default.awrap(db.get(key));\n\n        case 2:\n          entry = _context3.sent;\n          return _context3.abrupt('return', entry.value);\n\n        case 4:\n        case 'end':\n          return _context3.stop();\n      }\n    }\n  }, null, undefined);\n};\n\nvar _delete2 = function _callee4(db, lazyMap, key) {\n  var entry;\n  return _regenerator2.default.async(function _callee4$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regenerator2.default.awrap(db.get(key));\n\n        case 2:\n          entry = _context4.sent;\n          _context4.next = 5;\n          return _regenerator2.default.awrap(db.remove(entry));\n\n        case 5:\n          lazyMap.delete(key);\n\n        case 6:\n        case 'end':\n          return _context4.stop();\n      }\n    }\n  }, null, undefined);\n};\n\nexports.default = PersistentMap;\nmodule.exports = exports['default'];\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\"use strict\";\n'use strict';\n\nmodule.exports = argsArray;\n\nfunction argsArray(fun) {\n  return function () {\n    var len = arguments.length;\n    if (len) {\n      var args = [];\n      var i = -1;\n      while (++i < len) {\n        args[i] = arguments[i];\n      }\n      return fun.call(this, args);\n    } else {\n      return fun.call(this, []);\n    }\n  };\n}\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(15);\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\n/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = __webpack_require__(6);\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  'lightseagreen',\n  'forestgreen',\n  'goldenrod',\n  'dodgerblue',\n  'darkorchid',\n  'crimson'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  return ('WebkitAppearance' in document.documentElement.style) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (window.console && (console.firebug || (console.exception && console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31);\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  return JSON.stringify(v);\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs() {\n  var args = arguments;\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return args;\n\n  var c = 'color: ' + this.color;\n  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n  return args;\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage(){\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = debug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = __webpack_require__(13);\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lowercased letter, i.e. \"n\".\n */\n\nexports.formatters = {};\n\n/**\n * Previously assigned color.\n */\n\nvar prevColor = 0;\n\n/**\n * Previous log timestamp.\n */\n\nvar prevTime;\n\n/**\n * Select a color.\n *\n * @return {Number}\n * @api private\n */\n\nfunction selectColor() {\n  return exports.colors[prevColor++ % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction debug(namespace) {\n\n  // define the `disabled` version\n  function disabled() {\n  }\n  disabled.enabled = false;\n\n  // define the `enabled` version\n  function enabled() {\n\n    var self = enabled;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // add the `color` if not set\n    if (null == self.useColors) self.useColors = exports.useColors();\n    if (null == self.color && self.useColors) self.color = selectColor();\n\n    var args = Array.prototype.slice.call(arguments);\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %o\n      args = ['%o'].concat(args);\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    if ('function' === typeof exports.formatArgs) {\n      args = exports.formatArgs.apply(self, args);\n    }\n    var logFn = enabled.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n  enabled.enabled = true;\n\n  var fn = exports.enabled(namespace) ? enabled : disabled;\n\n  fn.namespace = namespace;\n\n  return fn;\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  var split = (namespaces || '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (var i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {\r\n  /* istanbul ignore next */\r\n  if (true) {\r\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\r\n  } else if (typeof exports === 'object') {\r\n    module.exports = factory()\r\n  } else {\r\n    root.PromisePool = factory()\r\n    // Legacy API\r\n    root.promisePool = root.PromisePool\r\n  }\r\n})(this, function () {\r\n  'use strict'\r\n\r\n  var EventTarget = function () {\r\n    this._listeners = {}\r\n  }\r\n\r\n  EventTarget.prototype.addEventListener = function (type, listener) {\r\n    this._listeners[type] = this._listeners[type] || []\r\n    if (this._listeners[type].indexOf(listener) < 0) {\r\n      this._listeners[type].push(listener)\r\n    }\r\n  }\r\n\r\n  EventTarget.prototype.removeEventListener = function (type, listener) {\r\n    if (this._listeners[type]) {\r\n      var p = this._listeners[type].indexOf(listener)\r\n      if (p >= 0) {\r\n        this._listeners[type].splice(p, 1)\r\n      }\r\n    }\r\n  }\r\n\r\n  EventTarget.prototype.dispatchEvent = function (evt) {\r\n    if (this._listeners[evt.type] && this._listeners[evt.type].length) {\r\n      var listeners = this._listeners[evt.type].slice()\r\n      for (var i = 0, l = listeners.length; i < l; ++i) {\r\n        listeners[i].call(this, evt)\r\n      }\r\n    }\r\n  }\r\n\r\n  var isGenerator = function (func) {\r\n    return (typeof func.constructor === 'function' &&\r\n      func.constructor.name === 'GeneratorFunction')\r\n  }\r\n\r\n  var functionToIterator = function (func) {\r\n    return {\r\n      next: function () {\r\n        var promise = func()\r\n        return promise ? {value: promise} : {done: true}\r\n      }\r\n    }\r\n  }\r\n\r\n  var promiseToIterator = function (promise) {\r\n    var called = false\r\n    return {\r\n      next: function () {\r\n        if (called) {\r\n          return {done: true}\r\n        }\r\n        called = true\r\n        return {value: promise}\r\n      }\r\n    }\r\n  }\r\n\r\n  var toIterator = function (obj, Promise) {\r\n    var type = typeof obj\r\n    if (type === 'object') {\r\n      if (typeof obj.next === 'function') {\r\n        return obj\r\n      }\r\n      /* istanbul ignore else */\r\n      if (typeof obj.then === 'function') {\r\n        return promiseToIterator(obj)\r\n      }\r\n    }\r\n    if (type === 'function') {\r\n      return isGenerator(obj) ? obj() : functionToIterator(obj)\r\n    }\r\n    return promiseToIterator(Promise.resolve(obj))\r\n  }\r\n\r\n  var PromisePoolEvent = function (target, type, data) {\r\n    this.target = target\r\n    this.type = type\r\n    this.data = data\r\n  }\r\n\r\n  var PromisePool = function (source, concurrency, options) {\r\n    EventTarget.call(this)\r\n    if (typeof concurrency !== 'number' ||\r\n        Math.floor(concurrency) !== concurrency ||\r\n        concurrency < 1) {\r\n      throw new Error('Invalid concurrency')\r\n    }\r\n    this._concurrency = concurrency\r\n    this._options = options || {}\r\n    this._options.promise = this._options.promise || Promise\r\n    this._iterator = toIterator(source, this._options.promise)\r\n    this._done = false\r\n    this._size = 0\r\n    this._promise = null\r\n    this._callbacks = null\r\n  }\r\n  PromisePool.prototype = new EventTarget()\r\n  PromisePool.prototype.constructor = PromisePool\r\n\r\n  PromisePool.prototype.concurrency = function (value) {\r\n    if (typeof value !== 'undefined') {\r\n      this._concurrency = value\r\n      if (this.active()) {\r\n        this._proceed()\r\n      }\r\n    }\r\n    return this._concurrency\r\n  }\r\n\r\n  PromisePool.prototype.size = function () {\r\n    return this._size\r\n  }\r\n\r\n  PromisePool.prototype.active = function () {\r\n    return !!this._promise\r\n  }\r\n\r\n  PromisePool.prototype.promise = function () {\r\n    return this._promise\r\n  }\r\n\r\n  PromisePool.prototype.start = function () {\r\n    var that = this\r\n    var Promise = this._options.promise\r\n    this._promise = new Promise(function (resolve, reject) {\r\n      that._callbacks = {\r\n        reject: reject,\r\n        resolve: resolve\r\n      }\r\n      that._proceed()\r\n    })\r\n    return this._promise\r\n  }\r\n\r\n  PromisePool.prototype._fireEvent = function (type, data) {\r\n    this.dispatchEvent(new PromisePoolEvent(this, type, data))\r\n  }\r\n\r\n  PromisePool.prototype._settle = function (error) {\r\n    if (error) {\r\n      this._callbacks.reject(error)\r\n    } else {\r\n      this._callbacks.resolve()\r\n    }\r\n    this._promise = null\r\n    this._callbacks = null\r\n  }\r\n\r\n  PromisePool.prototype._onPooledPromiseFulfilled = function (promise, result) {\r\n    this._size--\r\n    if (this.active()) {\r\n      this._fireEvent('fulfilled', {\r\n        promise: promise,\r\n        result: result\r\n      })\r\n      this._proceed()\r\n    }\r\n  }\r\n\r\n  PromisePool.prototype._onPooledPromiseRejected = function (promise, error) {\r\n    this._size--\r\n    if (this.active()) {\r\n      this._fireEvent('rejected', {\r\n        promise: promise,\r\n        error: error\r\n      })\r\n      this._settle(error || new Error('Unknown error'))\r\n    }\r\n  }\r\n\r\n  PromisePool.prototype._trackPromise = function (promise) {\r\n    var that = this\r\n    promise\r\n      .then(function (result) {\r\n        that._onPooledPromiseFulfilled(promise, result)\r\n      }, function (error) {\r\n        that._onPooledPromiseRejected(promise, error)\r\n      })['catch'](function (err) {\r\n        that._settle(new Error('Promise processing failed: ' + err))\r\n      })\r\n  }\r\n\r\n  PromisePool.prototype._proceed = function () {\r\n    if (!this._done) {\r\n      var result = null\r\n      while (this._size < this._concurrency &&\r\n          !(result = this._iterator.next()).done) {\r\n        this._size++\r\n        this._trackPromise(result.value)\r\n      }\r\n      this._done = (result === null || !!result.done)\r\n    }\r\n    if (this._done && this._size === 0) {\r\n      this._settle()\r\n    }\r\n  }\r\n\r\n  PromisePool.PromisePoolEvent = PromisePoolEvent\r\n  // Legacy API\r\n  PromisePool.PromisePool = PromisePool\r\n\r\n  return PromisePool\r\n})\r\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {'use strict';\nvar Mutation = global.MutationObserver || global.WebKitMutationObserver;\n\nvar scheduleDrain;\n\n{\n  if (Mutation) {\n    var called = 0;\n    var observer = new Mutation(nextTick);\n    var element = global.document.createTextNode('');\n    observer.observe(element, {\n      characterData: true\n    });\n    scheduleDrain = function () {\n      element.data = (called = ++called % 2);\n    };\n  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {\n    var channel = new global.MessageChannel();\n    channel.port1.onmessage = nextTick;\n    scheduleDrain = function () {\n      channel.port2.postMessage(0);\n    };\n  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {\n    scheduleDrain = function () {\n\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      var scriptEl = global.document.createElement('script');\n      scriptEl.onreadystatechange = function () {\n        nextTick();\n\n        scriptEl.onreadystatechange = null;\n        scriptEl.parentNode.removeChild(scriptEl);\n        scriptEl = null;\n      };\n      global.document.documentElement.appendChild(scriptEl);\n    };\n  } else {\n    scheduleDrain = function () {\n      setTimeout(nextTick, 0);\n    };\n  }\n}\n\nvar draining;\nvar queue = [];\n//named nextTick for less confusing stack traces\nfunction nextTick() {\n  draining = true;\n  var i, oldQueue;\n  var len = queue.length;\n  while (len) {\n    oldQueue = queue;\n    queue = [];\n    i = -1;\n    while (++i < len) {\n      oldQueue[i]();\n    }\n    len = queue.length;\n  }\n  draining = false;\n}\n\nmodule.exports = immediate;\nfunction immediate(task) {\n  if (queue.push(task) === 1 && !draining) {\n    scheduleDrain();\n  }\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\nif (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n(function(factory) {\n  if(true) {\n    factory(exports);\n  } else {\n    factory(this);\n  }\n}).call(this, function(root) { \n\n  var slice   = Array.prototype.slice,\n      each    = Array.prototype.forEach;\n\n  var extend = function(obj) {\n    if(typeof obj !== 'object') throw obj + ' is not an object' ;\n\n    var sources = slice.call(arguments, 1); \n\n    each.call(sources, function(source) {\n      if(source) {\n        for(var prop in source) {\n          if(typeof source[prop] === 'object' && obj[prop]) {\n            extend.call(obj, obj[prop], source[prop]);\n          } else {\n            obj[prop] = source[prop];\n          }\n        } \n      }\n    });\n\n    return obj;\n  }\n\n  root.extend = extend;\n});\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n'use strict';\nvar immediate = __webpack_require__(9);\n\n/* istanbul ignore next */\nfunction INTERNAL() {}\n\nvar handlers = {};\n\nvar REJECTED = ['REJECTED'];\nvar FULFILLED = ['FULFILLED'];\nvar PENDING = ['PENDING'];\n\nmodule.exports = Promise;\n\nfunction Promise(resolver) {\n  if (typeof resolver !== 'function') {\n    throw new TypeError('resolver must be a function');\n  }\n  this.state = PENDING;\n  this.queue = [];\n  this.outcome = void 0;\n  if (resolver !== INTERNAL) {\n    safelyResolveThenable(this, resolver);\n  }\n}\n\nPromise.prototype[\"catch\"] = function (onRejected) {\n  return this.then(null, onRejected);\n};\nPromise.prototype.then = function (onFulfilled, onRejected) {\n  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||\n    typeof onRejected !== 'function' && this.state === REJECTED) {\n    return this;\n  }\n  var promise = new this.constructor(INTERNAL);\n  if (this.state !== PENDING) {\n    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;\n    unwrap(promise, resolver, this.outcome);\n  } else {\n    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));\n  }\n\n  return promise;\n};\nfunction QueueItem(promise, onFulfilled, onRejected) {\n  this.promise = promise;\n  if (typeof onFulfilled === 'function') {\n    this.onFulfilled = onFulfilled;\n    this.callFulfilled = this.otherCallFulfilled;\n  }\n  if (typeof onRejected === 'function') {\n    this.onRejected = onRejected;\n    this.callRejected = this.otherCallRejected;\n  }\n}\nQueueItem.prototype.callFulfilled = function (value) {\n  handlers.resolve(this.promise, value);\n};\nQueueItem.prototype.otherCallFulfilled = function (value) {\n  unwrap(this.promise, this.onFulfilled, value);\n};\nQueueItem.prototype.callRejected = function (value) {\n  handlers.reject(this.promise, value);\n};\nQueueItem.prototype.otherCallRejected = function (value) {\n  unwrap(this.promise, this.onRejected, value);\n};\n\nfunction unwrap(promise, func, value) {\n  immediate(function () {\n    var returnValue;\n    try {\n      returnValue = func(value);\n    } catch (e) {\n      return handlers.reject(promise, e);\n    }\n    if (returnValue === promise) {\n      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));\n    } else {\n      handlers.resolve(promise, returnValue);\n    }\n  });\n}\n\nhandlers.resolve = function (self, value) {\n  var result = tryCatch(getThen, value);\n  if (result.status === 'error') {\n    return handlers.reject(self, result.value);\n  }\n  var thenable = result.value;\n\n  if (thenable) {\n    safelyResolveThenable(self, thenable);\n  } else {\n    self.state = FULFILLED;\n    self.outcome = value;\n    var i = -1;\n    var len = self.queue.length;\n    while (++i < len) {\n      self.queue[i].callFulfilled(value);\n    }\n  }\n  return self;\n};\nhandlers.reject = function (self, error) {\n  self.state = REJECTED;\n  self.outcome = error;\n  var i = -1;\n  var len = self.queue.length;\n  while (++i < len) {\n    self.queue[i].callRejected(error);\n  }\n  return self;\n};\n\nfunction getThen(obj) {\n  // Make sure we only access the accessor once as required by the spec\n  var then = obj && obj.then;\n  if (obj && typeof obj === 'object' && typeof then === 'function') {\n    return function appyThen() {\n      then.apply(obj, arguments);\n    };\n  }\n}\n\nfunction safelyResolveThenable(self, thenable) {\n  // Either fulfill, reject or reject with error\n  var called = false;\n  function onError(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.reject(self, value);\n  }\n\n  function onSuccess(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.resolve(self, value);\n  }\n\n  function tryToUnwrap() {\n    thenable(onSuccess, onError);\n  }\n\n  var result = tryCatch(tryToUnwrap);\n  if (result.status === 'error') {\n    onError(result.value);\n  }\n}\n\nfunction tryCatch(func, value) {\n  var out = {};\n  try {\n    out.value = func(value);\n    out.status = 'success';\n  } catch (e) {\n    out.status = 'error';\n    out.value = e;\n  }\n  return out;\n}\n\nPromise.resolve = resolve;\nfunction resolve(value) {\n  if (value instanceof this) {\n    return value;\n  }\n  return handlers.resolve(new this(INTERNAL), value);\n}\n\nPromise.reject = reject;\nfunction reject(reason) {\n  var promise = new this(INTERNAL);\n  return handlers.reject(promise, reason);\n}\n\nPromise.all = all;\nfunction all(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var values = new Array(len);\n  var resolved = 0;\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    allResolver(iterable[i], i);\n  }\n  return promise;\n  function allResolver(value, i) {\n    self.resolve(value).then(resolveFromAll, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n    function resolveFromAll(outValue) {\n      values[i] = outValue;\n      if (++resolved === len && !called) {\n        called = true;\n        handlers.resolve(promise, values);\n      }\n    }\n  }\n}\n\nPromise.race = race;\nfunction race(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    resolver(iterable[i]);\n  }\n  return promise;\n  function resolver(value) {\n    self.resolve(value).then(function (response) {\n      if (!called) {\n        called = true;\n        handlers.resolve(promise, response);\n      }\n    }, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n  }\n}\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} options\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options){\n  options = options || {};\n  if ('string' == typeof val) return parse(val);\n  return options.long\n    ? long(val)\n    : short(val);\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = '' + str;\n  if (str.length > 10000) return;\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);\n  if (!match) return;\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction short(ms) {\n  if (ms >= d) return Math.round(ms / d) + 'd';\n  if (ms >= h) return Math.round(ms / h) + 'h';\n  if (ms >= m) return Math.round(ms / m) + 'm';\n  if (ms >= s) return Math.round(ms / s) + 's';\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction long(ms) {\n  return plural(ms, d, 'day')\n    || plural(ms, h, 'hour')\n    || plural(ms, m, 'minute')\n    || plural(ms, s, 'second')\n    || ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) return;\n  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(process, global) {'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar jsExtend = __webpack_require__(11);\nvar debug = _interopDefault(__webpack_require__(5));\nvar inherits = _interopDefault(__webpack_require__(10));\nvar lie = _interopDefault(__webpack_require__(12));\nvar events = __webpack_require__(8);\nvar getArguments = _interopDefault(__webpack_require__(3));\nvar scopedEval = _interopDefault(__webpack_require__(17));\nvar Md5 = _interopDefault(__webpack_require__(18));\nvar vuvuzela = _interopDefault(__webpack_require__(19));\nvar PromisePool = _interopDefault(__webpack_require__(7));\n\n/* istanbul ignore next */\nvar PouchPromise = typeof Promise === 'function' ? Promise : lie;\n\n// based on https://github.com/montagejs/collections\nfunction mangle(key) {\n  return '$' + key;\n}\nfunction unmangle(key) {\n  return key.substring(1);\n}\nfunction _Map() {\n  this.store = {};\n}\n_Map.prototype.get = function (key) {\n  var mangled = mangle(key);\n  return this.store[mangled];\n};\n_Map.prototype.set = function (key, value) {\n  var mangled = mangle(key);\n  this.store[mangled] = value;\n  return true;\n};\n_Map.prototype.has = function (key) {\n  var mangled = mangle(key);\n  return mangled in this.store;\n};\n_Map.prototype.delete = function (key) {\n  var mangled = mangle(key);\n  var res = mangled in this.store;\n  delete this.store[mangled];\n  return res;\n};\n_Map.prototype.forEach = function (cb) {\n  var keys = Object.keys(this.store);\n  for (var i = 0, len = keys.length; i < len; i++) {\n    var key = keys[i];\n    var value = this.store[key];\n    key = unmangle(key);\n    cb(value, key);\n  }\n};\n\nfunction _Set(array) {\n  this.store = new _Map();\n\n  // init with an array\n  if (array && Array.isArray(array)) {\n    for (var i = 0, len = array.length; i < len; i++) {\n      this.add(array[i]);\n    }\n  }\n}\n_Set.prototype.add = function (key) {\n  return this.store.set(key, true);\n};\n_Set.prototype.has = function (key) {\n  return this.store.has(key);\n};\n\nfunction isBinaryObject(object) {\n  return (typeof ArrayBuffer !== 'undefined' && object instanceof ArrayBuffer) ||\n    (typeof Blob !== 'undefined' && object instanceof Blob);\n}\n\nfunction cloneArrayBuffer(buff) {\n  if (typeof buff.slice === 'function') {\n    return buff.slice(0);\n  }\n  // IE10-11 slice() polyfill\n  var target = new ArrayBuffer(buff.byteLength);\n  var targetArray = new Uint8Array(target);\n  var sourceArray = new Uint8Array(buff);\n  targetArray.set(sourceArray);\n  return target;\n}\n\nfunction cloneBinaryObject(object) {\n  if (object instanceof ArrayBuffer) {\n    return cloneArrayBuffer(object);\n  }\n  var size = object.size;\n  var type = object.type;\n  // Blob\n  if (typeof object.slice === 'function') {\n    return object.slice(0, size, type);\n  }\n  // PhantomJS slice() replacement\n  return object.webkitSlice(0, size, type);\n}\n\n// most of this is borrowed from lodash.isPlainObject:\n// https://github.com/fis-components/lodash.isplainobject/\n// blob/29c358140a74f252aeb08c9eb28bef86f2217d4a/index.js\n\nvar funcToString = Function.prototype.toString;\nvar objectCtorString = funcToString.call(Object);\n\nfunction isPlainObject(value) {\n  var proto = Object.getPrototypeOf(value);\n  /* istanbul ignore if */\n  if (proto === null) { // not sure when this happens, but I guess it can\n    return true;\n  }\n  var Ctor = proto.constructor;\n  return (typeof Ctor == 'function' &&\n    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);\n}\n\nfunction clone(object) {\n  var newObject;\n  var i;\n  var len;\n\n  if (!object || typeof object !== 'object') {\n    return object;\n  }\n\n  if (Array.isArray(object)) {\n    newObject = [];\n    for (i = 0, len = object.length; i < len; i++) {\n      newObject[i] = clone(object[i]);\n    }\n    return newObject;\n  }\n\n  // special case: to avoid inconsistencies between IndexedDB\n  // and other backends, we automatically stringify Dates\n  if (object instanceof Date) {\n    return object.toISOString();\n  }\n\n  if (isBinaryObject(object)) {\n    return cloneBinaryObject(object);\n  }\n\n  if (!isPlainObject(object)) {\n    return object; // don't clone objects like Workers\n  }\n\n  newObject = {};\n  for (i in object) {\n    /* istanbul ignore else */\n    if (Object.prototype.hasOwnProperty.call(object, i)) {\n      var value = clone(object[i]);\n      if (typeof value !== 'undefined') {\n        newObject[i] = value;\n      }\n    }\n  }\n  return newObject;\n}\n\nfunction once(fun) {\n  var called = false;\n  return getArguments(function (args) {\n    /* istanbul ignore if */\n    if (called) {\n      // this is a smoke test and should never actually happen\n      throw new Error('once called more than once');\n    } else {\n      called = true;\n      fun.apply(this, args);\n    }\n  });\n}\n\nfunction toPromise(func) {\n  //create the function we will be returning\n  return getArguments(function (args) {\n    // Clone arguments\n    args = clone(args);\n    var self = this;\n    var tempCB =\n      (typeof args[args.length - 1] === 'function') ? args.pop() : false;\n    // if the last argument is a function, assume its a callback\n    var usedCB;\n    if (tempCB) {\n      // if it was a callback, create a new callback which calls it,\n      // but do so async so we don't trap any errors\n      usedCB = function (err, resp) {\n        process.nextTick(function () {\n          tempCB(err, resp);\n        });\n      };\n    }\n    var promise = new PouchPromise(function (fulfill, reject) {\n      var resp;\n      try {\n        var callback = once(function (err, mesg) {\n          if (err) {\n            reject(err);\n          } else {\n            fulfill(mesg);\n          }\n        });\n        // create a callback for this invocation\n        // apply the function in the orig context\n        args.push(callback);\n        resp = func.apply(self, args);\n        if (resp && typeof resp.then === 'function') {\n          fulfill(resp);\n        }\n      } catch (e) {\n        reject(e);\n      }\n    });\n    // if there is a callback, call it back\n    if (usedCB) {\n      promise.then(function (result) {\n        usedCB(null, result);\n      }, usedCB);\n    }\n    return promise;\n  });\n}\n\nvar log = debug('pouchdb:api');\n\nfunction adapterFun(name, callback) {\n  function logApiCall(self, name, args) {\n    /* istanbul ignore if */\n    if (log.enabled) {\n      var logArgs = [self.name, name];\n      for (var i = 0; i < args.length - 1; i++) {\n        logArgs.push(args[i]);\n      }\n      log.apply(null, logArgs);\n\n      // override the callback itself to log the response\n      var origCallback = args[args.length - 1];\n      args[args.length - 1] = function (err, res) {\n        var responseArgs = [self.name, name];\n        responseArgs = responseArgs.concat(\n          err ? ['error', err] : ['success', res]\n        );\n        log.apply(null, responseArgs);\n        origCallback(err, res);\n      };\n    }\n  }\n\n  return toPromise(getArguments(function (args) {\n    if (this._closed) {\n      return PouchPromise.reject(new Error('database is closed'));\n    }\n    if (this._destroyed) {\n      return PouchPromise.reject(new Error('database is destroyed'));\n    }\n    var self = this;\n    logApiCall(self, name, args);\n    if (!this.taskqueue.isReady) {\n      return new PouchPromise(function (fulfill, reject) {\n        self.taskqueue.addTask(function (failed) {\n          if (failed) {\n            reject(failed);\n          } else {\n            fulfill(self[name].apply(self, args));\n          }\n        });\n      });\n    }\n    return callback.apply(this, args);\n  }));\n}\n\n// like underscore/lodash _.pick()\nfunction pick(obj, arr) {\n  var res = {};\n  for (var i = 0, len = arr.length; i < len; i++) {\n    var prop = arr[i];\n    if (prop in obj) {\n      res[prop] = obj[prop];\n    }\n  }\n  return res;\n}\n\n// Most browsers throttle concurrent requests at 6, so it's silly\n// to shim _bulk_get by trying to launch potentially hundreds of requests\n// and then letting the majority time out. We can handle this ourselves.\nvar MAX_NUM_CONCURRENT_REQUESTS = 6;\n\nfunction identityFunction(x) {\n  return x;\n}\n\nfunction formatResultForOpenRevsGet(result) {\n  return [{\n    ok: result\n  }];\n}\n\n// shim for P/CouchDB adapters that don't directly implement _bulk_get\nfunction bulkGet(db, opts, callback) {\n  var requests = opts.docs;\n\n  // consolidate into one request per doc if possible\n  var requestsById = {};\n  requests.forEach(function (request) {\n    if (request.id in requestsById) {\n      requestsById[request.id].push(request);\n    } else {\n      requestsById[request.id] = [request];\n    }\n  });\n\n  var numDocs = Object.keys(requestsById).length;\n  var numDone = 0;\n  var perDocResults = new Array(numDocs);\n\n  function collapseResultsAndFinish() {\n    var results = [];\n    perDocResults.forEach(function (res) {\n      res.docs.forEach(function (info) {\n        results.push({\n          id: res.id,\n          docs: [info]\n        });\n      });\n    });\n    callback(null, {results: results});\n  }\n\n  function checkDone() {\n    if (++numDone === numDocs) {\n      collapseResultsAndFinish();\n    }\n  }\n\n  function gotResult(docIndex, id, docs) {\n    perDocResults[docIndex] = {id: id, docs: docs};\n    checkDone();\n  }\n\n  var allRequests = Object.keys(requestsById);\n\n  var i = 0;\n\n  function nextBatch() {\n\n    if (i >= allRequests.length) {\n      return;\n    }\n\n    var upTo = Math.min(i + MAX_NUM_CONCURRENT_REQUESTS, allRequests.length);\n    var batch = allRequests.slice(i, upTo);\n    processBatch(batch, i);\n    i += batch.length;\n  }\n\n  function processBatch(batch, offset) {\n    batch.forEach(function (docId, j) {\n      var docIdx = offset + j;\n      var docRequests = requestsById[docId];\n\n      // just use the first request as the \"template\"\n      // TODO: The _bulk_get API allows for more subtle use cases than this,\n      // but for now it is unlikely that there will be a mix of different\n      // \"atts_since\" or \"attachments\" in the same request, since it's just\n      // replicate.js that is using this for the moment.\n      // Also, atts_since is aspirational, since we don't support it yet.\n      var docOpts = pick(docRequests[0], ['atts_since', 'attachments']);\n      docOpts.open_revs = docRequests.map(function (request) {\n        // rev is optional, open_revs disallowed\n        return request.rev;\n      });\n\n      // remove falsey / undefined revisions\n      docOpts.open_revs = docOpts.open_revs.filter(identityFunction);\n\n      var formatResult = identityFunction;\n\n      if (docOpts.open_revs.length === 0) {\n        delete docOpts.open_revs;\n\n        // when fetching only the \"winning\" leaf,\n        // transform the result so it looks like an open_revs\n        // request\n        formatResult = formatResultForOpenRevsGet;\n      }\n\n      // globally-supplied options\n      ['revs', 'attachments', 'binary', 'ajax'].forEach(function (param) {\n        if (param in opts) {\n          docOpts[param] = opts[param];\n        }\n      });\n      db.get(docId, docOpts, function (err, res) {\n        var result;\n        /* istanbul ignore if */\n        if (err) {\n          result = [{error: err}];\n        } else {\n          result = formatResult(res);\n        }\n        gotResult(docIdx, docId, result);\n        nextBatch();\n      });\n    });\n  }\n\n  nextBatch();\n\n}\n\nfunction isChromeApp() {\n  return (typeof chrome !== \"undefined\" &&\n    typeof chrome.storage !== \"undefined\" &&\n    typeof chrome.storage.local !== \"undefined\");\n}\n\nvar hasLocal;\n\nif (isChromeApp()) {\n  hasLocal = false;\n} else {\n  try {\n    localStorage.setItem('_pouch_check_localstorage', 1);\n    hasLocal = !!localStorage.getItem('_pouch_check_localstorage');\n  } catch (e) {\n    hasLocal = false;\n  }\n}\n\nfunction hasLocalStorage() {\n  return hasLocal;\n}\n\ninherits(Changes$1, events.EventEmitter);\n\n/* istanbul ignore next */\nfunction attachBrowserEvents(self) {\n  if (isChromeApp()) {\n    chrome.storage.onChanged.addListener(function (e) {\n      // make sure it's event addressed to us\n      if (e.db_name != null) {\n        //object only has oldValue, newValue members\n        self.emit(e.dbName.newValue);\n      }\n    });\n  } else if (hasLocalStorage()) {\n    if (typeof addEventListener !== 'undefined') {\n      addEventListener(\"storage\", function (e) {\n        self.emit(e.key);\n      });\n    } else { // old IE\n      window.attachEvent(\"storage\", function (e) {\n        self.emit(e.key);\n      });\n    }\n  }\n}\n\nfunction Changes$1() {\n  events.EventEmitter.call(this);\n  this._listeners = {};\n\n  attachBrowserEvents(this);\n}\nChanges$1.prototype.addListener = function (dbName, id, db, opts) {\n  /* istanbul ignore if */\n  if (this._listeners[id]) {\n    return;\n  }\n  var self = this;\n  var inprogress = false;\n  function eventFunction() {\n    /* istanbul ignore if */\n    if (!self._listeners[id]) {\n      return;\n    }\n    if (inprogress) {\n      inprogress = 'waiting';\n      return;\n    }\n    inprogress = true;\n    var changesOpts = pick(opts, [\n      'style', 'include_docs', 'attachments', 'conflicts', 'filter',\n      'doc_ids', 'view', 'since', 'query_params', 'binary'\n    ]);\n\n    /* istanbul ignore next */\n    function onError() {\n      inprogress = false;\n    }\n\n    db.changes(changesOpts).on('change', function (c) {\n      if (c.seq > opts.since && !opts.cancelled) {\n        opts.since = c.seq;\n        opts.onChange(c);\n      }\n    }).on('complete', function () {\n      if (inprogress === 'waiting') {\n        setTimeout(function (){\n          eventFunction();\n        },0);\n      }\n      inprogress = false;\n    }).on('error', onError);\n  }\n  this._listeners[id] = eventFunction;\n  this.on(dbName, eventFunction);\n};\n\nChanges$1.prototype.removeListener = function (dbName, id) {\n  /* istanbul ignore if */\n  if (!(id in this._listeners)) {\n    return;\n  }\n  events.EventEmitter.prototype.removeListener.call(this, dbName,\n    this._listeners[id]);\n  delete this._listeners[id];\n};\n\n\n/* istanbul ignore next */\nChanges$1.prototype.notifyLocalWindows = function (dbName) {\n  //do a useless change on a storage thing\n  //in order to get other windows's listeners to activate\n  if (isChromeApp()) {\n    chrome.storage.local.set({dbName: dbName});\n  } else if (hasLocalStorage()) {\n    localStorage[dbName] = (localStorage[dbName] === \"a\") ? \"b\" : \"a\";\n  }\n};\n\nChanges$1.prototype.notify = function (dbName) {\n  this.emit(dbName);\n  this.notifyLocalWindows(dbName);\n};\n\nfunction guardedConsole(method) {\n  /* istanbul ignore else */\n  if (console !== 'undefined' && method in console) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    console[method].apply(console, args);\n  }\n}\n\nfunction randomNumber(min, max) {\n  var maxTimeout = 600000; // Hard-coded default of 10 minutes\n  min = parseInt(min, 10) || 0;\n  max = parseInt(max, 10);\n  if (max !== max || max <= min) {\n    max = (min || 1) << 1; //doubling\n  } else {\n    max = max + 1;\n  }\n  // In order to not exceed maxTimeout, pick a random value between half of maxTimeout and maxTimeout\n  if(max > maxTimeout) {\n    min = maxTimeout >> 1; // divide by two\n    max = maxTimeout;\n  }\n  var ratio = Math.random();\n  var range = max - min;\n\n  return ~~(range * ratio + min); // ~~ coerces to an int, but fast.\n}\n\nfunction defaultBackOff(min) {\n  var max = 0;\n  if (!min) {\n    max = 2000;\n  }\n  return randomNumber(min, max);\n}\n\n// designed to give info to browser users, who are disturbed\n// when they see http errors in the console\nfunction explainError(status, str) {\n  guardedConsole('info', 'The above ' + status + ' is totally normal. ' + str);\n}\n\ninherits(PouchError, Error);\n\nfunction PouchError(opts) {\n  Error.call(this, opts.reason);\n  this.status = opts.status;\n  this.name = opts.error;\n  this.message = opts.reason;\n  this.error = true;\n}\n\nPouchError.prototype.toString = function () {\n  return JSON.stringify({\n    status: this.status,\n    name: this.name,\n    message: this.message,\n    reason: this.reason\n  });\n};\n\nvar UNAUTHORIZED = new PouchError({\n  status: 401,\n  error: 'unauthorized',\n  reason: \"Name or password is incorrect.\"\n});\n\nvar MISSING_BULK_DOCS = new PouchError({\n  status: 400,\n  error: 'bad_request',\n  reason: \"Missing JSON list of 'docs'\"\n});\n\nvar MISSING_DOC = new PouchError({\n  status: 404,\n  error: 'not_found',\n  reason: 'missing'\n});\n\nvar REV_CONFLICT = new PouchError({\n  status: 409,\n  error: 'conflict',\n  reason: 'Document update conflict'\n});\n\nvar INVALID_ID = new PouchError({\n  status: 400,\n  error: 'bad_request',\n  reason: '_id field must contain a string'\n});\n\nvar MISSING_ID = new PouchError({\n  status: 412,\n  error: 'missing_id',\n  reason: '_id is required for puts'\n});\n\nvar RESERVED_ID = new PouchError({\n  status: 400,\n  error: 'bad_request',\n  reason: 'Only reserved document ids may start with underscore.'\n});\n\nvar NOT_OPEN = new PouchError({\n  status: 412,\n  error: 'precondition_failed',\n  reason: 'Database not open'\n});\n\nvar UNKNOWN_ERROR = new PouchError({\n  status: 500,\n  error: 'unknown_error',\n  reason: 'Database encountered an unknown error'\n});\n\nvar BAD_ARG = new PouchError({\n  status: 500,\n  error: 'badarg',\n  reason: 'Some query argument is invalid'\n});\n\nvar INVALID_REQUEST = new PouchError({\n  status: 400,\n  error: 'invalid_request',\n  reason: 'Request was invalid'\n});\n\nvar QUERY_PARSE_ERROR = new PouchError({\n  status: 400,\n  error: 'query_parse_error',\n  reason: 'Some query parameter is invalid'\n});\n\nvar DOC_VALIDATION = new PouchError({\n  status: 500,\n  error: 'doc_validation',\n  reason: 'Bad special document member'\n});\n\nvar BAD_REQUEST = new PouchError({\n  status: 400,\n  error: 'bad_request',\n  reason: 'Something wrong with the request'\n});\n\nvar NOT_AN_OBJECT = new PouchError({\n  status: 400,\n  error: 'bad_request',\n  reason: 'Document must be a JSON object'\n});\n\nvar DB_MISSING = new PouchError({\n  status: 404,\n  error: 'not_found',\n  reason: 'Database not found'\n});\n\nvar IDB_ERROR = new PouchError({\n  status: 500,\n  error: 'indexed_db_went_bad',\n  reason: 'unknown'\n});\n\nvar WSQ_ERROR = new PouchError({\n  status: 500,\n  error: 'web_sql_went_bad',\n  reason: 'unknown'\n});\n\nvar LDB_ERROR = new PouchError({\n  status: 500,\n  error: 'levelDB_went_went_bad',\n  reason: 'unknown'\n});\n\nvar FORBIDDEN = new PouchError({\n  status: 403,\n  error: 'forbidden',\n  reason: 'Forbidden by design doc validate_doc_update function'\n});\n\nvar INVALID_REV = new PouchError({\n  status: 400,\n  error: 'bad_request',\n  reason: 'Invalid rev format'\n});\n\nvar FILE_EXISTS = new PouchError({\n  status: 412,\n  error: 'file_exists',\n  reason: 'The database could not be created, the file already exists.'\n});\n\nvar MISSING_STUB = new PouchError({\n  status: 412,\n  error: 'missing_stub'\n});\n\nvar INVALID_URL = new PouchError({\n  status: 413,\n  error: 'invalid_url',\n  reason: 'Provided URL is invalid'\n});\n\nfunction createError(error, reason) {\n  function CustomPouchError(reason) {\n    // inherit error properties from our parent error manually\n    // so as to allow proper JSON parsing.\n    /* jshint ignore:start */\n    for (var p in error) {\n      if (typeof error[p] !== 'function') {\n        this[p] = error[p];\n      }\n    }\n    /* jshint ignore:end */\n    if (reason !== undefined) {\n      this.reason = reason;\n    }\n  }\n  CustomPouchError.prototype = PouchError.prototype;\n  return new CustomPouchError(reason);\n}\n\nfunction generateErrorFromResponse(err) {\n\n  if (typeof err !== 'object') {\n    var data = err;\n    err = UNKNOWN_ERROR;\n    err.data = data;\n  }\n\n  if ('error' in err && err.error === 'conflict') {\n    err.name = 'conflict';\n    err.status = 409;\n  }\n\n  if (!('name' in err)) {\n    err.name = err.error || 'unknown';\n  }\n\n  if (!('status' in err)) {\n    err.status = 500;\n  }\n\n  if (!('message' in err)) {\n    err.message = err.message || err.reason;\n  }\n\n  return err;\n}\n\nfunction tryFilter(filter, doc, req) {\n  try {\n    return !filter(doc, req);\n  } catch (err) {\n    var msg = 'Filter function threw: ' + err.toString();\n    return createError(BAD_REQUEST, msg);\n  }\n}\n\nfunction filterChange(opts) {\n  var req = {};\n  var hasFilter = opts.filter && typeof opts.filter === 'function';\n  req.query = opts.query_params;\n\n  return function filter(change) {\n    if (!change.doc) {\n      // CSG sends events on the changes feed that don't have documents,\n      // this hack makes a whole lot of existing code robust.\n      change.doc = {};\n    }\n\n    var filterReturn = hasFilter && tryFilter(opts.filter, change.doc, req);\n\n    if (typeof filterReturn === 'object') {\n      return filterReturn;\n    }\n\n    if (filterReturn) {\n      return false;\n    }\n\n    if (!opts.include_docs) {\n      delete change.doc;\n    } else if (!opts.attachments) {\n      for (var att in change.doc._attachments) {\n        /* istanbul ignore else */\n        if (change.doc._attachments.hasOwnProperty(att)) {\n          change.doc._attachments[att].stub = true;\n        }\n      }\n    }\n    return true;\n  };\n}\n\nfunction flatten(arrs) {\n  var res = [];\n  for (var i = 0, len = arrs.length; i < len; i++) {\n    res = res.concat(arrs[i]);\n  }\n  return res;\n}\n\n// Determine id an ID is valid\n//   - invalid IDs begin with an underescore that does not begin '_design' or\n//     '_local'\n//   - any other string value is a valid id\n// Returns the specific error object for each case\nfunction invalidIdError(id) {\n  var err;\n  if (!id) {\n    err = createError(MISSING_ID);\n  } else if (typeof id !== 'string') {\n    err = createError(INVALID_ID);\n  } else if (/^_/.test(id) && !(/^_(design|local)/).test(id)) {\n    err = createError(RESERVED_ID);\n  }\n  if (err) {\n    throw err;\n  }\n}\n\nfunction listenerCount(ee, type) {\n  return 'listenerCount' in ee ? ee.listenerCount(type) :\n                                 events.EventEmitter.listenerCount(ee, type);\n}\n\nfunction parseDesignDocFunctionName(s) {\n  if (!s) {\n    return null;\n  }\n  var parts = s.split('/');\n  if (parts.length === 2) {\n    return parts;\n  }\n  if (parts.length === 1) {\n    return [s, s];\n  }\n  return null;\n}\n\nfunction normalizeDesignDocFunctionName(s) {\n  var normalized = parseDesignDocFunctionName(s);\n  return normalized ? normalized.join('/') : null;\n}\n\n// originally parseUri 1.2.2, now patched by us\n// (c) Steven Levithan <stevenlevithan.com>\n// MIT License\nvar keys = [\"source\", \"protocol\", \"authority\", \"userInfo\", \"user\", \"password\",\n    \"host\", \"port\", \"relative\", \"path\", \"directory\", \"file\", \"query\", \"anchor\"];\nvar qName =\"queryKey\";\nvar qParser = /(?:^|&)([^&=]*)=?([^&]*)/g;\n\n// use the \"loose\" parser\n/* jshint maxlen: false */\nvar parser = /^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?(?:\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\n\nfunction parseUri(str) {\n  var m = parser.exec(str);\n  var uri = {};\n  var i = 14;\n\n  while (i--) {\n    var key = keys[i];\n    var value = m[i] || \"\";\n    var encoded = ['user', 'password'].indexOf(key) !== -1;\n    uri[key] = encoded ? decodeURIComponent(value) : value;\n  }\n\n  uri[qName] = {};\n  uri[keys[12]].replace(qParser, function ($0, $1, $2) {\n    if ($1) {\n      uri[qName][$1] = $2;\n    }\n  });\n\n  return uri;\n}\n\n// this is essentially the \"update sugar\" function from daleharvey/pouchdb#1388\n// the diffFun tells us what delta to apply to the doc.  it either returns\n// the doc, or false if it doesn't need to do an update after all\nfunction upsert(db, docId, diffFun) {\n  return new PouchPromise(function (fulfill, reject) {\n    db.get(docId, function (err, doc) {\n      if (err) {\n        /* istanbul ignore next */\n        if (err.status !== 404) {\n          return reject(err);\n        }\n        doc = {};\n      }\n\n      // the user might change the _rev, so save it for posterity\n      var docRev = doc._rev;\n      var newDoc = diffFun(doc);\n\n      if (!newDoc) {\n        // if the diffFun returns falsy, we short-circuit as\n        // an optimization\n        return fulfill({updated: false, rev: docRev});\n      }\n\n      // users aren't allowed to modify these values,\n      // so reset them here\n      newDoc._id = docId;\n      newDoc._rev = docRev;\n      fulfill(tryAndPut(db, newDoc, diffFun));\n    });\n  });\n}\n\nfunction tryAndPut(db, doc, diffFun) {\n  return db.put(doc).then(function (res) {\n    return {\n      updated: true,\n      rev: res.rev\n    };\n  }, function (err) {\n    /* istanbul ignore next */\n    if (err.status !== 409) {\n      throw err;\n    }\n    return upsert(db, doc._id, diffFun);\n  });\n}\n\n// BEGIN Math.uuid.js\n\n/*!\nMath.uuid.js (v1.4)\nhttp://www.broofa.com\nmailto:robert@broofa.com\n\nCopyright (c) 2010 Robert Kieffer\nDual licensed under the MIT and GPL licenses.\n*/\n\n/*\n * Generate a random uuid.\n *\n * USAGE: Math.uuid(length, radix)\n *   length - the desired number of characters\n *   radix  - the number of allowable values for each character.\n *\n * EXAMPLES:\n *   // No arguments  - returns RFC4122, version 4 ID\n *   >>> Math.uuid()\n *   \"92329D39-6F5C-4520-ABFC-AAB64544E172\"\n *\n *   // One argument - returns ID of the specified length\n *   >>> Math.uuid(15)     // 15 character ID (default base=62)\n *   \"VcydxgltxrVZSTV\"\n *\n *   // Two arguments - returns ID of the specified length, and radix. \n *   // (Radix must be <= 62)\n *   >>> Math.uuid(8, 2)  // 8 character ID (base=2)\n *   \"01001010\"\n *   >>> Math.uuid(8, 10) // 8 character ID (base=10)\n *   \"47473046\"\n *   >>> Math.uuid(8, 16) // 8 character ID (base=16)\n *   \"098F4D35\"\n */\nvar chars = (\n  '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ' +\n  'abcdefghijklmnopqrstuvwxyz'\n).split('');\nfunction getValue(radix) {\n  return 0 | Math.random() * radix;\n}\nfunction uuid(len, radix) {\n  radix = radix || chars.length;\n  var out = '';\n  var i = -1;\n\n  if (len) {\n    // Compact form\n    while (++i < len) {\n      out += chars[getValue(radix)];\n    }\n    return out;\n  }\n    // rfc4122, version 4 form\n    // Fill in random data.  At i==19 set the high bits of clock sequence as\n    // per rfc4122, sec. 4.1.5\n  while (++i < 36) {\n    switch (i) {\n      case 8:\n      case 13:\n      case 18:\n      case 23:\n        out += '-';\n        break;\n      case 19:\n        out += chars[(getValue(16) & 0x3) | 0x8];\n        break;\n      default:\n        out += chars[getValue(16)];\n    }\n  }\n\n  return out;\n}\n\n// We fetch all leafs of the revision tree, and sort them based on tree length\n// and whether they were deleted, undeleted documents with the longest revision\n// tree (most edits) win\n// The final sort algorithm is slightly documented in a sidebar here:\n// http://guide.couchdb.org/draft/conflicts.html\nfunction winningRev(metadata) {\n  var winningId;\n  var winningPos;\n  var winningDeleted;\n  var toVisit = metadata.rev_tree.slice();\n  var node;\n  while ((node = toVisit.pop())) {\n    var tree = node.ids;\n    var branches = tree[2];\n    var pos = node.pos;\n    if (branches.length) { // non-leaf\n      for (var i = 0, len = branches.length; i < len; i++) {\n        toVisit.push({pos: pos + 1, ids: branches[i]});\n      }\n      continue;\n    }\n    var deleted = !!tree[1].deleted;\n    var id = tree[0];\n    // sort by deleted, then pos, then id\n    if (!winningId || (winningDeleted !== deleted ? winningDeleted :\n        winningPos !== pos ? winningPos < pos : winningId < id)) {\n      winningId = id;\n      winningPos = pos;\n      winningDeleted = deleted;\n    }\n  }\n\n  return winningPos + '-' + winningId;\n}\n\n// Pretty much all below can be combined into a higher order function to\n// traverse revisions\n// The return value from the callback will be passed as context to all\n// children of that node\nfunction traverseRevTree(revs, callback) {\n  var toVisit = revs.slice();\n\n  var node;\n  while ((node = toVisit.pop())) {\n    var pos = node.pos;\n    var tree = node.ids;\n    var branches = tree[2];\n    var newCtx =\n      callback(branches.length === 0, pos, tree[0], node.ctx, tree[1]);\n    for (var i = 0, len = branches.length; i < len; i++) {\n      toVisit.push({pos: pos + 1, ids: branches[i], ctx: newCtx});\n    }\n  }\n}\n\nfunction sortByPos(a, b) {\n  return a.pos - b.pos;\n}\n\nfunction collectLeaves(revs) {\n  var leaves = [];\n  traverseRevTree(revs, function (isLeaf, pos, id, acc, opts) {\n    if (isLeaf) {\n      leaves.push({rev: pos + \"-\" + id, pos: pos, opts: opts});\n    }\n  });\n  leaves.sort(sortByPos).reverse();\n  for (var i = 0, len = leaves.length; i < len; i++) {\n    delete leaves[i].pos;\n  }\n  return leaves;\n}\n\n// returns revs of all conflicts that is leaves such that\n// 1. are not deleted and\n// 2. are different than winning revision\nfunction collectConflicts(metadata) {\n  var win = winningRev(metadata);\n  var leaves = collectLeaves(metadata.rev_tree);\n  var conflicts = [];\n  for (var i = 0, len = leaves.length; i < len; i++) {\n    var leaf = leaves[i];\n    if (leaf.rev !== win && !leaf.opts.deleted) {\n      conflicts.push(leaf.rev);\n    }\n  }\n  return conflicts;\n}\n\n// compact a tree by marking its non-leafs as missing,\n// and return a list of revs to delete\nfunction compactTree(metadata) {\n  var revs = [];\n  traverseRevTree(metadata.rev_tree, function (isLeaf, pos,\n                                               revHash, ctx, opts) {\n    if (opts.status === 'available' && !isLeaf) {\n      revs.push(pos + '-' + revHash);\n      opts.status = 'missing';\n    }\n  });\n  return revs;\n}\n\n// build up a list of all the paths to the leafs in this revision tree\nfunction rootToLeaf(revs) {\n  var paths = [];\n  var toVisit = revs.slice();\n  var node;\n  while ((node = toVisit.pop())) {\n    var pos = node.pos;\n    var tree = node.ids;\n    var id = tree[0];\n    var opts = tree[1];\n    var branches = tree[2];\n    var isLeaf = branches.length === 0;\n\n    var history = node.history ? node.history.slice() : [];\n    history.push({id: id, opts: opts});\n    if (isLeaf) {\n      paths.push({pos: (pos + 1 - history.length), ids: history});\n    }\n    for (var i = 0, len = branches.length; i < len; i++) {\n      toVisit.push({pos: pos + 1, ids: branches[i], history: history});\n    }\n  }\n  return paths.reverse();\n}\n\n// for a better overview of what this is doing, read:\n// https://github.com/apache/couchdb-couch/blob/master/src/couch_key_tree.erl\n//\n// But for a quick intro, CouchDB uses a revision tree to store a documents\n// history, A -> B -> C, when a document has conflicts, that is a branch in the\n// tree, A -> (B1 | B2 -> C), We store these as a nested array in the format\n//\n// KeyTree = [Path ... ]\n// Path = {pos: position_from_root, ids: Tree}\n// Tree = [Key, Opts, [Tree, ...]], in particular single node: [Key, []]\n\nfunction sortByPos$1(a, b) {\n  return a.pos - b.pos;\n}\n\n// classic binary search\nfunction binarySearch(arr, item, comparator) {\n  var low = 0;\n  var high = arr.length;\n  var mid;\n  while (low < high) {\n    mid = (low + high) >>> 1;\n    if (comparator(arr[mid], item) < 0) {\n      low = mid + 1;\n    } else {\n      high = mid;\n    }\n  }\n  return low;\n}\n\n// assuming the arr is sorted, insert the item in the proper place\nfunction insertSorted(arr, item, comparator) {\n  var idx = binarySearch(arr, item, comparator);\n  arr.splice(idx, 0, item);\n}\n\n// Turn a path as a flat array into a tree with a single branch.\n// If any should be stemmed from the beginning of the array, that's passed\n// in as the second argument\nfunction pathToTree(path, numStemmed) {\n  var root;\n  var leaf;\n  for (var i = numStemmed, len = path.length; i < len; i++) {\n    var node = path[i];\n    var currentLeaf = [node.id, node.opts, []];\n    if (leaf) {\n      leaf[2].push(currentLeaf);\n      leaf = currentLeaf;\n    } else {\n      root = leaf = currentLeaf;\n    }\n  }\n  return root;\n}\n\n// compare the IDs of two trees\nfunction compareTree(a, b) {\n  return a[0] < b[0] ? -1 : 1;\n}\n\n// Merge two trees together\n// The roots of tree1 and tree2 must be the same revision\nfunction mergeTree(in_tree1, in_tree2) {\n  var queue = [{tree1: in_tree1, tree2: in_tree2}];\n  var conflicts = false;\n  while (queue.length > 0) {\n    var item = queue.pop();\n    var tree1 = item.tree1;\n    var tree2 = item.tree2;\n\n    if (tree1[1].status || tree2[1].status) {\n      tree1[1].status =\n        (tree1[1].status ===  'available' ||\n        tree2[1].status === 'available') ? 'available' : 'missing';\n    }\n\n    for (var i = 0; i < tree2[2].length; i++) {\n      if (!tree1[2][0]) {\n        conflicts = 'new_leaf';\n        tree1[2][0] = tree2[2][i];\n        continue;\n      }\n\n      var merged = false;\n      for (var j = 0; j < tree1[2].length; j++) {\n        if (tree1[2][j][0] === tree2[2][i][0]) {\n          queue.push({tree1: tree1[2][j], tree2: tree2[2][i]});\n          merged = true;\n        }\n      }\n      if (!merged) {\n        conflicts = 'new_branch';\n        insertSorted(tree1[2], tree2[2][i], compareTree);\n      }\n    }\n  }\n  return {conflicts: conflicts, tree: in_tree1};\n}\n\nfunction doMerge(tree, path, dontExpand) {\n  var restree = [];\n  var conflicts = false;\n  var merged = false;\n  var res;\n\n  if (!tree.length) {\n    return {tree: [path], conflicts: 'new_leaf'};\n  }\n\n  for (var i = 0, len = tree.length; i < len; i++) {\n    var branch = tree[i];\n    if (branch.pos === path.pos && branch.ids[0] === path.ids[0]) {\n      // Paths start at the same position and have the same root, so they need\n      // merged\n      res = mergeTree(branch.ids, path.ids);\n      restree.push({pos: branch.pos, ids: res.tree});\n      conflicts = conflicts || res.conflicts;\n      merged = true;\n    } else if (dontExpand !== true) {\n      // The paths start at a different position, take the earliest path and\n      // traverse up until it as at the same point from root as the path we\n      // want to merge.  If the keys match we return the longer path with the\n      // other merged After stemming we dont want to expand the trees\n\n      var t1 = branch.pos < path.pos ? branch : path;\n      var t2 = branch.pos < path.pos ? path : branch;\n      var diff = t2.pos - t1.pos;\n\n      var candidateParents = [];\n\n      var trees = [];\n      trees.push({ids: t1.ids, diff: diff, parent: null, parentIdx: null});\n      while (trees.length > 0) {\n        var item = trees.pop();\n        if (item.diff === 0) {\n          if (item.ids[0] === t2.ids[0]) {\n            candidateParents.push(item);\n          }\n          continue;\n        }\n        var elements = item.ids[2];\n        for (var j = 0, elementsLen = elements.length; j < elementsLen; j++) {\n          trees.push({\n            ids: elements[j],\n            diff: item.diff - 1,\n            parent: item.ids,\n            parentIdx: j\n          });\n        }\n      }\n\n      var el = candidateParents[0];\n\n      if (!el) {\n        restree.push(branch);\n      } else {\n        res = mergeTree(el.ids, t2.ids);\n        el.parent[2][el.parentIdx] = res.tree;\n        restree.push({pos: t1.pos, ids: t1.ids});\n        conflicts = conflicts || res.conflicts;\n        merged = true;\n      }\n    } else {\n      restree.push(branch);\n    }\n  }\n\n  // We didnt find\n  if (!merged) {\n    restree.push(path);\n  }\n\n  restree.sort(sortByPos$1);\n\n  return {\n    tree: restree,\n    conflicts: conflicts || 'internal_node'\n  };\n}\n\n// To ensure we dont grow the revision tree infinitely, we stem old revisions\nfunction stem(tree, depth) {\n  // First we break out the tree into a complete list of root to leaf paths\n  var paths = rootToLeaf(tree);\n  var maybeStem = {};\n\n  var result;\n  for (var i = 0, len = paths.length; i < len; i++) {\n    // Then for each path, we cut off the start of the path based on the\n    // `depth` to stem to, and generate a new set of flat trees\n    var path = paths[i];\n    var stemmed = path.ids;\n    var numStemmed = Math.max(0, stemmed.length - depth);\n    var stemmedNode = {\n      pos: path.pos + numStemmed,\n      ids: pathToTree(stemmed, numStemmed)\n    };\n\n    for (var s = 0; s < numStemmed; s++) {\n      var rev = (path.pos + s) + '-' + stemmed[s].id;\n      maybeStem[rev] = true;\n    }\n\n    // Then we remerge all those flat trees together, ensuring that we dont\n    // connect trees that would go beyond the depth limit\n    if (result) {\n      result = doMerge(result, stemmedNode, true).tree;\n    } else {\n      result = [stemmedNode];\n    }\n  }\n\n  traverseRevTree(result, function (isLeaf, pos, revHash) {\n    // some revisions may have been removed in a branch but not in another\n    delete maybeStem[pos + '-' + revHash];\n  });\n\n  return {\n    tree: result,\n    revs: Object.keys(maybeStem)\n  };\n}\n\nfunction merge(tree, path, depth) {\n  var newTree = doMerge(tree, path);\n  var stemmed = stem(newTree.tree, depth);\n  return {\n    tree: stemmed.tree,\n    stemmedRevs: stemmed.revs,\n    conflicts: newTree.conflicts\n  };\n}\n\n// return true if a rev exists in the rev tree, false otherwise\nfunction revExists(revs, rev) {\n  var toVisit = revs.slice();\n  var splitRev = rev.split('-');\n  var targetPos = parseInt(splitRev[0], 10);\n  var targetId = splitRev[1];\n\n  var node;\n  while ((node = toVisit.pop())) {\n    if (node.pos === targetPos && node.ids[0] === targetId) {\n      return true;\n    }\n    var branches = node.ids[2];\n    for (var i = 0, len = branches.length; i < len; i++) {\n      toVisit.push({pos: node.pos + 1, ids: branches[i]});\n    }\n  }\n  return false;\n}\n\nfunction getTrees(node) {\n  return node.ids;\n}\n\n// check if a specific revision of a doc has been deleted\n//  - metadata: the metadata object from the doc store\n//  - rev: (optional) the revision to check. defaults to winning revision\nfunction isDeleted(metadata, rev) {\n  if (!rev) {\n    rev = winningRev(metadata);\n  }\n  var id = rev.substring(rev.indexOf('-') + 1);\n  var toVisit = metadata.rev_tree.map(getTrees);\n\n  var tree;\n  while ((tree = toVisit.pop())) {\n    if (tree[0] === id) {\n      return !!tree[1].deleted;\n    }\n    toVisit = toVisit.concat(tree[2]);\n  }\n}\n\nfunction isLocalId(id) {\n  return (/^_local/).test(id);\n}\n\nfunction evalFilter(input) {\n  return scopedEval('\"use strict\";\\nreturn ' + input + ';', {});\n}\n\nfunction evalView(input) {\n  var code = [\n    'return function(doc) {',\n    '  \"use strict\";',\n    '  var emitted = false;',\n    '  var emit = function (a, b) {',\n    '    emitted = true;',\n    '  };',\n    '  var view = ' + input + ';',\n    '  view(doc);',\n    '  if (emitted) {',\n    '    return true;',\n    '  }',\n    '};'\n  ].join('\\n');\n\n  return scopedEval(code, {});\n}\n\ninherits(Changes, events.EventEmitter);\n\nfunction tryCatchInChangeListener(self, change) {\n  // isolate try/catches to avoid V8 deoptimizations\n  try {\n    self.emit('change', change);\n  } catch (e) {\n    guardedConsole('error', 'Error in .on(\"change\", function):', e);\n  }\n}\n\nfunction Changes(db, opts, callback) {\n  events.EventEmitter.call(this);\n  var self = this;\n  this.db = db;\n  opts = opts ? clone(opts) : {};\n  var complete = opts.complete = once(function (err, resp) {\n    if (err) {\n      if (listenerCount(self, 'error') > 0) {\n        self.emit('error', err);\n      }\n    } else {\n      self.emit('complete', resp);\n    }\n    self.removeAllListeners();\n    db.removeListener('destroyed', onDestroy);\n  });\n  if (callback) {\n    self.on('complete', function (resp) {\n      callback(null, resp);\n    });\n    self.on('error', callback);\n  }\n  function onDestroy() {\n    self.cancel();\n  }\n  db.once('destroyed', onDestroy);\n\n  opts.onChange = function (change) {\n    /* istanbul ignore if */\n    if (opts.isCancelled) {\n      return;\n    }\n    tryCatchInChangeListener(self, change);\n  };\n\n  var promise = new PouchPromise(function (fulfill, reject) {\n    opts.complete = function (err, res) {\n      if (err) {\n        reject(err);\n      } else {\n        fulfill(res);\n      }\n    };\n  });\n  self.once('cancel', function () {\n    db.removeListener('destroyed', onDestroy);\n    opts.complete(null, {status: 'cancelled'});\n  });\n  this.then = promise.then.bind(promise);\n  this['catch'] = promise['catch'].bind(promise);\n  this.then(function (result) {\n    complete(null, result);\n  }, complete);\n\n\n\n  if (!db.taskqueue.isReady) {\n    db.taskqueue.addTask(function (failed) {\n      if (failed) {\n        opts.complete(failed);\n      } else if (self.isCancelled) {\n        self.emit('cancel');\n      } else {\n        self.doChanges(opts);\n      }\n    });\n  } else {\n    self.doChanges(opts);\n  }\n}\nChanges.prototype.cancel = function () {\n  this.isCancelled = true;\n  if (this.db.taskqueue.isReady) {\n    this.emit('cancel');\n  }\n};\nfunction processChange(doc, metadata, opts) {\n  var changeList = [{rev: doc._rev}];\n  if (opts.style === 'all_docs') {\n    changeList = collectLeaves(metadata.rev_tree)\n    .map(function (x) { return {rev: x.rev}; });\n  }\n  var change = {\n    id: metadata.id,\n    changes: changeList,\n    doc: doc\n  };\n\n  if (isDeleted(metadata, doc._rev)) {\n    change.deleted = true;\n  }\n  if (opts.conflicts) {\n    change.doc._conflicts = collectConflicts(metadata);\n    if (!change.doc._conflicts.length) {\n      delete change.doc._conflicts;\n    }\n  }\n  return change;\n}\n\nChanges.prototype.doChanges = function (opts) {\n  var self = this;\n  var callback = opts.complete;\n\n  opts = clone(opts);\n  if ('live' in opts && !('continuous' in opts)) {\n    opts.continuous = opts.live;\n  }\n  opts.processChange = processChange;\n\n  if (opts.since === 'latest') {\n    opts.since = 'now';\n  }\n  if (!opts.since) {\n    opts.since = 0;\n  }\n  if (opts.since === 'now') {\n    this.db.info().then(function (info) {\n      /* istanbul ignore if */\n      if (self.isCancelled) {\n        callback(null, {status: 'cancelled'});\n        return;\n      }\n      opts.since = info.update_seq;\n      self.doChanges(opts);\n    }, callback);\n    return;\n  }\n\n\n  if (opts.view && !opts.filter) {\n    opts.filter = '_view';\n  }\n\n  if (opts.filter && typeof opts.filter === 'string') {\n    if (opts.filter === '_view') {\n      opts.view = normalizeDesignDocFunctionName(opts.view);\n    } else {\n      opts.filter = normalizeDesignDocFunctionName(opts.filter);\n    }\n\n    if (this.db.type() !== 'http' && !opts.doc_ids) {\n      return this.filterChanges(opts);\n    }\n  }\n\n  if (!('descending' in opts)) {\n    opts.descending = false;\n  }\n\n  // 0 and 1 should return 1 document\n  opts.limit = opts.limit === 0 ? 1 : opts.limit;\n  opts.complete = callback;\n  var newPromise = this.db._changes(opts);\n  /* istanbul ignore else */\n  if (newPromise && typeof newPromise.cancel === 'function') {\n    var cancel = self.cancel;\n    self.cancel = getArguments(function (args) {\n      newPromise.cancel();\n      cancel.apply(this, args);\n    });\n  }\n};\n\nChanges.prototype.filterChanges = function (opts) {\n  var self = this;\n  var callback = opts.complete;\n  if (opts.filter === '_view') {\n    if (!opts.view || typeof opts.view !== 'string') {\n      var err = createError(BAD_REQUEST,\n        '`view` filter parameter not found or invalid.');\n      return callback(err);\n    }\n    // fetch a view from a design doc, make it behave like a filter\n    var viewName = parseDesignDocFunctionName(opts.view);\n    this.db.get('_design/' + viewName[0], function (err, ddoc) {\n      /* istanbul ignore if */\n      if (self.isCancelled) {\n        return callback(null, {status: 'cancelled'});\n      }\n      /* istanbul ignore next */\n      if (err) {\n        return callback(generateErrorFromResponse(err));\n      }\n      var mapFun = ddoc && ddoc.views && ddoc.views[viewName[1]] &&\n        ddoc.views[viewName[1]].map;\n      if (!mapFun) {\n        return callback(createError(MISSING_DOC,\n          (ddoc.views ? 'missing json key: ' + viewName[1] :\n            'missing json key: views')));\n      }\n      opts.filter = evalView(mapFun);\n      self.doChanges(opts);\n    });\n  } else {\n    // fetch a filter from a design doc\n    var filterName = parseDesignDocFunctionName(opts.filter);\n    if (!filterName) {\n      return self.doChanges(opts);\n    }\n    this.db.get('_design/' + filterName[0], function (err, ddoc) {\n      /* istanbul ignore if */\n      if (self.isCancelled) {\n        return callback(null, {status: 'cancelled'});\n      }\n      /* istanbul ignore next */\n      if (err) {\n        return callback(generateErrorFromResponse(err));\n      }\n      var filterFun = ddoc && ddoc.filters && ddoc.filters[filterName[1]];\n      if (!filterFun) {\n        return callback(createError(MISSING_DOC,\n          ((ddoc && ddoc.filters) ? 'missing json key: ' + filterName[1]\n            : 'missing json key: filters')));\n      }\n      opts.filter = evalFilter(filterFun);\n      self.doChanges(opts);\n    });\n  }\n};\n\n/*\n * A generic pouch adapter\n */\n\nfunction compare(left, right) {\n  return left < right ? -1 : left > right ? 1 : 0;\n}\n\n// returns first element of arr satisfying callback predicate\nfunction arrayFirst(arr, callback) {\n  for (var i = 0; i < arr.length; i++) {\n    if (callback(arr[i], i) === true) {\n      return arr[i];\n    }\n  }\n}\n\n// Wrapper for functions that call the bulkdocs api with a single doc,\n// if the first result is an error, return an error\nfunction yankError(callback) {\n  return function (err, results) {\n    if (err || (results[0] && results[0].error)) {\n      callback(err || results[0]);\n    } else {\n      callback(null, results.length ? results[0]  : results);\n    }\n  };\n}\n\n// clean docs given to us by the user\nfunction cleanDocs(docs) {\n  for (var i = 0; i < docs.length; i++) {\n    var doc = docs[i];\n    if (doc._deleted) {\n      delete doc._attachments; // ignore atts for deleted docs\n    } else if (doc._attachments) {\n      // filter out extraneous keys from _attachments\n      var atts = Object.keys(doc._attachments);\n      for (var j = 0; j < atts.length; j++) {\n        var att = atts[j];\n        doc._attachments[att] = pick(doc._attachments[att],\n          ['data', 'digest', 'content_type', 'length', 'revpos', 'stub']);\n      }\n    }\n  }\n}\n\n// compare two docs, first by _id then by _rev\nfunction compareByIdThenRev(a, b) {\n  var idCompare = compare(a._id, b._id);\n  if (idCompare !== 0) {\n    return idCompare;\n  }\n  var aStart = a._revisions ? a._revisions.start : 0;\n  var bStart = b._revisions ? b._revisions.start : 0;\n  return compare(aStart, bStart);\n}\n\n// for every node in a revision tree computes its distance from the closest\n// leaf\nfunction computeHeight(revs) {\n  var height = {};\n  var edges = [];\n  traverseRevTree(revs, function (isLeaf, pos, id, prnt) {\n    var rev = pos + \"-\" + id;\n    if (isLeaf) {\n      height[rev] = 0;\n    }\n    if (prnt !== undefined) {\n      edges.push({from: prnt, to: rev});\n    }\n    return rev;\n  });\n\n  edges.reverse();\n  edges.forEach(function (edge) {\n    if (height[edge.from] === undefined) {\n      height[edge.from] = 1 + height[edge.to];\n    } else {\n      height[edge.from] = Math.min(height[edge.from], 1 + height[edge.to]);\n    }\n  });\n  return height;\n}\n\nfunction allDocsKeysQuery(api, opts, callback) {\n  var keys =  ('limit' in opts) ?\n      opts.keys.slice(opts.skip, opts.limit + opts.skip) :\n      (opts.skip > 0) ? opts.keys.slice(opts.skip) : opts.keys;\n  if (opts.descending) {\n    keys.reverse();\n  }\n  if (!keys.length) {\n    return api._allDocs({limit: 0}, callback);\n  }\n  var finalResults = {\n    offset: opts.skip\n  };\n  return PouchPromise.all(keys.map(function (key) {\n    var subOpts = jsExtend.extend({key: key, deleted: 'ok'}, opts);\n    ['limit', 'skip', 'keys'].forEach(function (optKey) {\n      delete subOpts[optKey];\n    });\n    return new PouchPromise(function (resolve, reject) {\n      api._allDocs(subOpts, function (err, res) {\n        /* istanbul ignore if */\n        if (err) {\n          return reject(err);\n        }\n        finalResults.total_rows = res.total_rows;\n        resolve(res.rows[0] || {key: key, error: 'not_found'});\n      });\n    });\n  })).then(function (results) {\n    finalResults.rows = results;\n    return finalResults;\n  });\n}\n\n// all compaction is done in a queue, to avoid attaching\n// too many listeners at once\nfunction doNextCompaction(self) {\n  var task = self._compactionQueue[0];\n  var opts = task.opts;\n  var callback = task.callback;\n  self.get('_local/compaction').catch(function () {\n    return false;\n  }).then(function (doc) {\n    if (doc && doc.last_seq) {\n      opts.last_seq = doc.last_seq;\n    }\n    self._compact(opts, function (err, res) {\n      /* istanbul ignore if */\n      if (err) {\n        callback(err);\n      } else {\n        callback(null, res);\n      }\n      process.nextTick(function () {\n        self._compactionQueue.shift();\n        if (self._compactionQueue.length) {\n          doNextCompaction(self);\n        }\n      });\n    });\n  });\n}\n\nfunction attachmentNameError(name) {\n  if (name.charAt(0) === '_') {\n    return name + 'is not a valid attachment name, attachment ' +\n      'names cannot start with \\'_\\'';\n  }\n  return false;\n}\n\ninherits(AbstractPouchDB, events.EventEmitter);\n\nfunction AbstractPouchDB() {\n  events.EventEmitter.call(this);\n}\n\nAbstractPouchDB.prototype.post =\n  adapterFun('post', function (doc, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  if (typeof doc !== 'object' || Array.isArray(doc)) {\n    return callback(createError(NOT_AN_OBJECT));\n  }\n  this.bulkDocs({docs: [doc]}, opts, yankError(callback));\n});\n\nAbstractPouchDB.prototype.put = adapterFun('put', function (doc, opts, cb) {\n  if (typeof opts === 'function') {\n    cb = opts;\n    opts = {};\n  }\n  if (typeof doc !== 'object' || Array.isArray(doc)) {\n    return cb(createError(NOT_AN_OBJECT));\n  }\n  invalidIdError(doc._id);\n  if (isLocalId(doc._id) && typeof this._putLocal === 'function') {\n    if (doc._deleted) {\n      return this._removeLocal(doc, cb);\n    } else {\n      return this._putLocal(doc, cb);\n    }\n  }\n  if (typeof this._put === 'function' && opts.new_edits !== false) {\n    this._put(doc, opts, cb);\n  } else {\n    this.bulkDocs({docs: [doc]}, opts, yankError(cb));\n  }\n});\n\nAbstractPouchDB.prototype.putAttachment =\n  adapterFun('putAttachment', function (docId, attachmentId, rev,\n                                              blob, type) {\n  var api = this;\n  if (typeof type === 'function') {\n    type = blob;\n    blob = rev;\n    rev = null;\n  }\n  // Lets fix in https://github.com/pouchdb/pouchdb/issues/3267\n  /* istanbul ignore if */\n  if (typeof type === 'undefined') {\n    type = blob;\n    blob = rev;\n    rev = null;\n  }\n\n  function createAttachment(doc) {\n    var prevrevpos = '_rev' in doc ? parseInt(doc._rev, 10) : 0;\n    doc._attachments = doc._attachments || {};\n    doc._attachments[attachmentId] = {\n      content_type: type,\n      data: blob,\n      revpos: ++prevrevpos\n    };\n    return api.put(doc);\n  }\n\n  return api.get(docId).then(function (doc) {\n    if (doc._rev !== rev) {\n      throw createError(REV_CONFLICT);\n    }\n\n    return createAttachment(doc);\n  }, function (err) {\n     // create new doc\n    /* istanbul ignore else */\n    if (err.reason === MISSING_DOC.message) {\n      return createAttachment({_id: docId});\n    } else {\n      throw err;\n    }\n  });\n});\n\nAbstractPouchDB.prototype.removeAttachment =\n  adapterFun('removeAttachment', function (docId, attachmentId, rev,\n                                                 callback) {\n  var self = this;\n  self.get(docId, function (err, obj) {\n    /* istanbul ignore if */\n    if (err) {\n      callback(err);\n      return;\n    }\n    if (obj._rev !== rev) {\n      callback(createError(REV_CONFLICT));\n      return;\n    }\n    /* istanbul ignore if */\n    if (!obj._attachments) {\n      return callback();\n    }\n    delete obj._attachments[attachmentId];\n    if (Object.keys(obj._attachments).length === 0) {\n      delete obj._attachments;\n    }\n    self.put(obj, callback);\n  });\n});\n\nAbstractPouchDB.prototype.remove =\n  adapterFun('remove', function (docOrId, optsOrRev, opts, callback) {\n  var doc;\n  if (typeof optsOrRev === 'string') {\n    // id, rev, opts, callback style\n    doc = {\n      _id: docOrId,\n      _rev: optsOrRev\n    };\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n  } else {\n    // doc, opts, callback style\n    doc = docOrId;\n    if (typeof optsOrRev === 'function') {\n      callback = optsOrRev;\n      opts = {};\n    } else {\n      callback = opts;\n      opts = optsOrRev;\n    }\n  }\n  opts = opts || {};\n  opts.was_delete = true;\n  var newDoc = {_id: doc._id, _rev: (doc._rev || opts.rev)};\n  newDoc._deleted = true;\n  if (isLocalId(newDoc._id) && typeof this._removeLocal === 'function') {\n    return this._removeLocal(doc, callback);\n  }\n  this.bulkDocs({docs: [newDoc]}, opts, yankError(callback));\n});\n\nAbstractPouchDB.prototype.revsDiff =\n  adapterFun('revsDiff', function (req, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  var ids = Object.keys(req);\n\n  if (!ids.length) {\n    return callback(null, {});\n  }\n\n  var count = 0;\n  var missing = new _Map();\n\n  function addToMissing(id, revId) {\n    if (!missing.has(id)) {\n      missing.set(id, {missing: []});\n    }\n    missing.get(id).missing.push(revId);\n  }\n\n  function processDoc(id, rev_tree) {\n    // Is this fast enough? Maybe we should switch to a set simulated by a map\n    var missingForId = req[id].slice(0);\n    traverseRevTree(rev_tree, function (isLeaf, pos, revHash, ctx,\n      opts) {\n        var rev = pos + '-' + revHash;\n        var idx = missingForId.indexOf(rev);\n        if (idx === -1) {\n          return;\n        }\n\n        missingForId.splice(idx, 1);\n        /* istanbul ignore if */\n        if (opts.status !== 'available') {\n          addToMissing(id, rev);\n        }\n      });\n\n    // Traversing the tree is synchronous, so now `missingForId` contains\n    // revisions that were not found in the tree\n    missingForId.forEach(function (rev) {\n      addToMissing(id, rev);\n    });\n  }\n\n  ids.map(function (id) {\n    this._getRevisionTree(id, function (err, rev_tree) {\n      if (err && err.status === 404 && err.message === 'missing') {\n        missing.set(id, {missing: req[id]});\n      } else if (err) {\n        /* istanbul ignore next */\n        return callback(err);\n      } else {\n        processDoc(id, rev_tree);\n      }\n\n      if (++count === ids.length) {\n        // convert LazyMap to object\n        var missingObj = {};\n        missing.forEach(function (value, key) {\n          missingObj[key] = value;\n        });\n        return callback(null, missingObj);\n      }\n    });\n  }, this);\n});\n\n// _bulk_get API for faster replication, as described in\n// https://github.com/apache/couchdb-chttpd/pull/33\n// At the \"abstract\" level, it will just run multiple get()s in\n// parallel, because this isn't much of a performance cost\n// for local databases (except the cost of multiple transactions, which is\n// small). The http adapter overrides this in order\n// to do a more efficient single HTTP request.\nAbstractPouchDB.prototype.bulkGet =\n  adapterFun('bulkGet', function (opts, callback) {\n  bulkGet(this, opts, callback);\n});\n\n// compact one document and fire callback\n// by compacting we mean removing all revisions which\n// are further from the leaf in revision tree than max_height\nAbstractPouchDB.prototype.compactDocument =\n  adapterFun('compactDocument', function (docId, maxHeight, callback) {\n  var self = this;\n  this._getRevisionTree(docId, function (err, revTree) {\n    /* istanbul ignore if */\n    if (err) {\n      return callback(err);\n    }\n    var height = computeHeight(revTree);\n    var candidates = [];\n    var revs = [];\n    Object.keys(height).forEach(function (rev) {\n      if (height[rev] > maxHeight) {\n        candidates.push(rev);\n      }\n    });\n\n    traverseRevTree(revTree, function (isLeaf, pos, revHash, ctx, opts) {\n      var rev = pos + '-' + revHash;\n      if (opts.status === 'available' && candidates.indexOf(rev) !== -1) {\n        revs.push(rev);\n      }\n    });\n    self._doCompaction(docId, revs, callback);\n  });\n});\n\n// compact the whole database using single document\n// compaction\nAbstractPouchDB.prototype.compact =\n  adapterFun('compact', function (opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n\n  var self = this;\n  opts = opts || {};\n\n  self._compactionQueue = self._compactionQueue || [];\n  self._compactionQueue.push({opts: opts, callback: callback});\n  if (self._compactionQueue.length === 1) {\n    doNextCompaction(self);\n  }\n});\nAbstractPouchDB.prototype._compact = function (opts, callback) {\n  var self = this;\n  var changesOpts = {\n    return_docs: false,\n    last_seq: opts.last_seq || 0\n  };\n  var promises = [];\n\n  function onChange(row) {\n    promises.push(self.compactDocument(row.id, 0));\n  }\n  function onComplete(resp) {\n    var lastSeq = resp.last_seq;\n    PouchPromise.all(promises).then(function () {\n      return upsert(self, '_local/compaction', function deltaFunc(doc) {\n        if (!doc.last_seq || doc.last_seq < lastSeq) {\n          doc.last_seq = lastSeq;\n          return doc;\n        }\n        return false; // somebody else got here first, don't update\n      });\n    }).then(function () {\n      callback(null, {ok: true});\n    }).catch(callback);\n  }\n  self.changes(changesOpts)\n    .on('change', onChange)\n    .on('complete', onComplete)\n    .on('error', callback);\n};\n\n/* Begin api wrappers. Specific functionality to storage belongs in the\n   _[method] */\nAbstractPouchDB.prototype.get = adapterFun('get', function (id, opts, cb) {\n  if (typeof opts === 'function') {\n    cb = opts;\n    opts = {};\n  }\n  if (typeof id !== 'string') {\n    return cb(createError(INVALID_ID));\n  }\n  if (isLocalId(id) && typeof this._getLocal === 'function') {\n    return this._getLocal(id, cb);\n  }\n  var leaves = [], self = this;\n\n  function finishOpenRevs() {\n    var result = [];\n    var count = leaves.length;\n    /* istanbul ignore if */\n    if (!count) {\n      return cb(null, result);\n    }\n    // order with open_revs is unspecified\n    leaves.forEach(function (leaf) {\n      self.get(id, {\n        rev: leaf,\n        revs: opts.revs,\n        attachments: opts.attachments\n      }, function (err, doc) {\n        if (!err) {\n          result.push({ok: doc});\n        } else {\n          result.push({missing: leaf});\n        }\n        count--;\n        if (!count) {\n          cb(null, result);\n        }\n      });\n    });\n  }\n\n  if (opts.open_revs) {\n    if (opts.open_revs === \"all\") {\n      this._getRevisionTree(id, function (err, rev_tree) {\n        if (err) {\n          return cb(err);\n        }\n        leaves = collectLeaves(rev_tree).map(function (leaf) {\n          return leaf.rev;\n        });\n        finishOpenRevs();\n      });\n    } else {\n      if (Array.isArray(opts.open_revs)) {\n        leaves = opts.open_revs;\n        for (var i = 0; i < leaves.length; i++) {\n          var l = leaves[i];\n          // looks like it's the only thing couchdb checks\n          if (!(typeof (l) === \"string\" && /^\\d+-/.test(l))) {\n            return cb(createError(INVALID_REV));\n          }\n        }\n        finishOpenRevs();\n      } else {\n        return cb(createError(UNKNOWN_ERROR, 'function_clause'));\n      }\n    }\n    return; // open_revs does not like other options\n  }\n\n  return this._get(id, opts, function (err, result) {\n    if (err) {\n      return cb(err);\n    }\n\n    var doc = result.doc;\n    var metadata = result.metadata;\n    var ctx = result.ctx;\n\n    if (opts.conflicts) {\n      var conflicts = collectConflicts(metadata);\n      if (conflicts.length) {\n        doc._conflicts = conflicts;\n      }\n    }\n\n    if (isDeleted(metadata, doc._rev)) {\n      doc._deleted = true;\n    }\n\n    if (opts.revs || opts.revs_info) {\n      var paths = rootToLeaf(metadata.rev_tree);\n      var path = arrayFirst(paths, function (arr) {\n        return arr.ids.map(function (x) { return x.id; })\n          .indexOf(doc._rev.split('-')[1]) !== -1;\n      });\n\n      var indexOfRev = path.ids.map(function (x) {return x.id; })\n        .indexOf(doc._rev.split('-')[1]) + 1;\n      var howMany = path.ids.length - indexOfRev;\n      path.ids.splice(indexOfRev, howMany);\n      path.ids.reverse();\n\n      if (opts.revs) {\n        doc._revisions = {\n          start: (path.pos + path.ids.length) - 1,\n          ids: path.ids.map(function (rev) {\n            return rev.id;\n          })\n        };\n      }\n      if (opts.revs_info) {\n        var pos =  path.pos + path.ids.length;\n        doc._revs_info = path.ids.map(function (rev) {\n          pos--;\n          return {\n            rev: pos + '-' + rev.id,\n            status: rev.opts.status\n          };\n        });\n      }\n    }\n\n    if (opts.attachments && doc._attachments) {\n      var attachments = doc._attachments;\n      var count = Object.keys(attachments).length;\n      if (count === 0) {\n        return cb(null, doc);\n      }\n      Object.keys(attachments).forEach(function (key) {\n        this._getAttachment(doc._id, key, attachments[key], {\n          // Previously the revision handling was done in adapter.js\n          // getAttachment, however since idb-next doesnt we need to\n          // pass the rev through\n          rev: doc._rev,\n          binary: opts.binary,\n          ctx: ctx\n        }, function (err, data) {\n          var att = doc._attachments[key];\n          att.data = data;\n          delete att.stub;\n          delete att.length;\n          if (!--count) {\n            cb(null, doc);\n          }\n        });\n      }, self);\n    } else {\n      if (doc._attachments) {\n        for (var key in doc._attachments) {\n          /* istanbul ignore else */\n          if (doc._attachments.hasOwnProperty(key)) {\n            doc._attachments[key].stub = true;\n          }\n        }\n      }\n      cb(null, doc);\n    }\n  });\n});\n\n// TODO: I dont like this, it forces an extra read for every\n// attachment read and enforces a confusing api between\n// adapter.js and the adapter implementation\nAbstractPouchDB.prototype.getAttachment =\n  adapterFun('getAttachment', function (docId, attachmentId, opts, callback) {\n  var self = this;\n  if (opts instanceof Function) {\n    callback = opts;\n    opts = {};\n  }\n  this._get(docId, opts, function (err, res) {\n    if (err) {\n      return callback(err);\n    }\n    if (res.doc._attachments && res.doc._attachments[attachmentId]) {\n      opts.ctx = res.ctx;\n      opts.binary = true;\n      self._getAttachment(docId, attachmentId,\n                          res.doc._attachments[attachmentId], opts, callback);\n    } else {\n      return callback(createError(MISSING_DOC));\n    }\n  });\n});\n\nAbstractPouchDB.prototype.allDocs =\n  adapterFun('allDocs', function (opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  opts.skip = typeof opts.skip !== 'undefined' ? opts.skip : 0;\n  if (opts.start_key) {\n    opts.startkey = opts.start_key;\n  }\n  if (opts.end_key) {\n    opts.endkey = opts.end_key;\n  }\n  if ('keys' in opts) {\n    if (!Array.isArray(opts.keys)) {\n      return callback(new TypeError('options.keys must be an array'));\n    }\n    var incompatibleOpt =\n      ['startkey', 'endkey', 'key'].filter(function (incompatibleOpt) {\n      return incompatibleOpt in opts;\n    })[0];\n    if (incompatibleOpt) {\n      callback(createError(QUERY_PARSE_ERROR,\n        'Query parameter `' + incompatibleOpt +\n        '` is not compatible with multi-get'\n      ));\n      return;\n    }\n    if (this.type() !== 'http') {\n      return allDocsKeysQuery(this, opts, callback);\n    }\n  }\n\n  return this._allDocs(opts, callback);\n});\n\nAbstractPouchDB.prototype.changes = function (opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  return new Changes(this, opts, callback);\n};\n\nAbstractPouchDB.prototype.close = adapterFun('close', function (callback) {\n  this._closed = true;\n  return this._close(callback);\n});\n\nAbstractPouchDB.prototype.info = adapterFun('info', function (callback) {\n  var self = this;\n  this._info(function (err, info) {\n    if (err) {\n      return callback(err);\n    }\n    // assume we know better than the adapter, unless it informs us\n    info.db_name = info.db_name || self.name;\n    info.auto_compaction = !!(self.auto_compaction && self.type() !== 'http');\n    info.adapter = self.type();\n    callback(null, info);\n  });\n});\n\nAbstractPouchDB.prototype.id = adapterFun('id', function (callback) {\n  return this._id(callback);\n});\n\n/* istanbul ignore next */\nAbstractPouchDB.prototype.type = function () {\n  return (typeof this._type === 'function') ? this._type() : this.adapter;\n};\n\nAbstractPouchDB.prototype.bulkDocs =\n  adapterFun('bulkDocs', function (req, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n\n  if (Array.isArray(req)) {\n    req = {\n      docs: req\n    };\n  }\n\n  if (!req || !req.docs || !Array.isArray(req.docs)) {\n    return callback(createError(MISSING_BULK_DOCS));\n  }\n\n  for (var i = 0; i < req.docs.length; ++i) {\n    if (typeof req.docs[i] !== 'object' || Array.isArray(req.docs[i])) {\n      return callback(createError(NOT_AN_OBJECT));\n    }\n  }\n\n  var attachmentError;\n  req.docs.forEach(function (doc) {\n    if (doc._attachments) {\n      Object.keys(doc._attachments).forEach(function (name) {\n        attachmentError = attachmentError || attachmentNameError(name);\n      });\n    }\n  });\n\n  if (attachmentError) {\n    return callback(createError(BAD_REQUEST, attachmentError));\n  }\n\n  if (!('new_edits' in opts)) {\n    if ('new_edits' in req) {\n      opts.new_edits = req.new_edits;\n    } else {\n      opts.new_edits = true;\n    }\n  }\n\n  if (!opts.new_edits && this.type() !== 'http') {\n    // ensure revisions of the same doc are sorted, so that\n    // the local adapter processes them correctly (#2935)\n    req.docs.sort(compareByIdThenRev);\n  }\n\n  cleanDocs(req.docs);\n\n  return this._bulkDocs(req, opts, function (err, res) {\n    if (err) {\n      return callback(err);\n    }\n    if (!opts.new_edits) {\n      // this is what couch does when new_edits is false\n      res = res.filter(function (x) {\n        return x.error;\n      });\n    }\n    callback(null, res);\n  });\n});\n\nAbstractPouchDB.prototype.registerDependentDatabase =\n  adapterFun('registerDependentDatabase', function (dependentDb,\n                                                          callback) {\n  var depDB = new this.constructor(dependentDb, this.__opts);\n\n  function diffFun(doc) {\n    doc.dependentDbs = doc.dependentDbs || {};\n    if (doc.dependentDbs[dependentDb]) {\n      return false; // no update required\n    }\n    doc.dependentDbs[dependentDb] = true;\n    return doc;\n  }\n  upsert(this, '_local/_pouch_dependentDbs', diffFun)\n    .then(function () {\n      callback(null, {db: depDB});\n    }).catch(callback);\n});\n\nAbstractPouchDB.prototype.destroy =\n  adapterFun('destroy', function (opts, callback) {\n\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n\n  var self = this;\n  var usePrefix = 'use_prefix' in self ? self.use_prefix : true;\n\n  function destroyDb() {\n    // call destroy method of the particular adaptor\n    self._destroy(opts, function (err, resp) {\n      if (err) {\n        return callback(err);\n      }\n      self._destroyed = true;\n      self.emit('destroyed');\n      callback(null, resp || { 'ok': true });\n    });\n  }\n\n  if (self.type() === 'http') {\n    // no need to check for dependent DBs if it's a remote DB\n    return destroyDb();\n  }\n\n  self.get('_local/_pouch_dependentDbs', function (err, localDoc) {\n    if (err) {\n      /* istanbul ignore if */\n      if (err.status !== 404) {\n        return callback(err);\n      } else { // no dependencies\n        return destroyDb();\n      }\n    }\n    var dependentDbs = localDoc.dependentDbs;\n    var PouchDB = self.constructor;\n    var deletedMap = Object.keys(dependentDbs).map(function (name) {\n      // use_prefix is only false in the browser\n      /* istanbul ignore next */\n      var trueName = usePrefix ?\n        name.replace(new RegExp('^' + PouchDB.prefix), '') : name;\n      return new PouchDB(trueName, self.__opts).destroy();\n    });\n    PouchPromise.all(deletedMap).then(destroyDb, callback);\n  });\n});\n\nfunction TaskQueue() {\n  this.isReady = false;\n  this.failed = false;\n  this.queue = [];\n}\n\nTaskQueue.prototype.execute = function () {\n  var fun;\n  if (this.failed) {\n    while ((fun = this.queue.shift())) {\n      fun(this.failed);\n    }\n  } else {\n    while ((fun = this.queue.shift())) {\n      fun();\n    }\n  }\n};\n\nTaskQueue.prototype.fail = function (err) {\n  this.failed = err;\n  this.execute();\n};\n\nTaskQueue.prototype.ready = function (db) {\n  this.isReady = true;\n  this.db = db;\n  this.execute();\n};\n\nTaskQueue.prototype.addTask = function (fun) {\n  this.queue.push(fun);\n  if (this.failed) {\n    this.execute();\n  }\n};\n\nfunction parseAdapter(name, opts) {\n  var match = name.match(/([a-z\\-]*):\\/\\/(.*)/);\n  if (match) {\n    // the http adapter expects the fully qualified name\n    name = /http(s?)/.test(match[1]) ? match[1] + '://' + match[2] : match[2];\n    return {name: name, adapter: match[1]};\n  }\n\n  // check for browsers that have been upgraded from websql-only to websql+idb\n  var skipIdb = 'idb' in PouchDB.adapters && 'websql' in PouchDB.adapters &&\n    hasLocalStorage() &&\n    localStorage['_pouch__websqldb_' + PouchDB.prefix + name];\n\n  var adapterName;\n\n  if (opts.adapter) {\n    adapterName = opts.adapter;\n  } else if (typeof opts !== 'undefined' && opts.db) {\n    adapterName = 'leveldb';\n  } else { // automatically determine adapter\n    for (var i = 0; i < PouchDB.preferredAdapters.length; ++i) {\n      adapterName = PouchDB.preferredAdapters[i];\n      /* istanbul ignore if */\n      if (skipIdb && adapterName === 'idb') {\n        // log it, because this can be confusing during development\n        guardedConsole('log', 'PouchDB is downgrading \"' + name + '\" to WebSQL to' +\n          ' avoid data loss, because it was already opened with WebSQL.');\n        continue; // keep using websql to avoid user data loss\n      }\n      break;\n    }\n  }\n\n  var adapter = PouchDB.adapters[adapterName];\n\n  // if adapter is invalid, then an error will be thrown later\n  var usePrefix = (adapter && 'use_prefix' in adapter) ?\n    adapter.use_prefix : true;\n\n  return {\n    name: usePrefix ? (PouchDB.prefix + name) : name,\n    adapter: adapterName\n  };\n}\n\n// OK, so here's the deal. Consider this code:\n//     var db1 = new PouchDB('foo');\n//     var db2 = new PouchDB('foo');\n//     db1.destroy();\n// ^ these two both need to emit 'destroyed' events,\n// as well as the PouchDB constructor itself.\n// So we have one db object (whichever one got destroy() called on it)\n// responsible for emitting the initial event, which then gets emitted\n// by the constructor, which then broadcasts it to any other dbs\n// that may have been created with the same name.\nfunction prepareForDestruction(self) {\n\n  var destructionListeners = self.constructor._destructionListeners;\n\n  function onDestroyed() {\n    self.constructor.emit('destroyed', self.name);\n  }\n\n  function onConstructorDestroyed() {\n    self.removeListener('destroyed', onDestroyed);\n    self.emit('destroyed', self);\n  }\n\n  self.once('destroyed', onDestroyed);\n\n  // in setup.js, the constructor is primed to listen for destroy events\n  if (!destructionListeners.has(self.name)) {\n    destructionListeners.set(self.name, []);\n  }\n  destructionListeners.get(self.name).push(onConstructorDestroyed);\n}\n\ninherits(PouchDB, AbstractPouchDB);\nfunction PouchDB(name, opts) {\n  // In Node our test suite only tests this for PouchAlt unfortunately\n  /* istanbul ignore if */\n  if (!(this instanceof PouchDB)) {\n    return new PouchDB(name, opts);\n  }\n\n  var self = this;\n  opts = opts || {};\n\n  if (name && typeof name === 'object') {\n    opts = name;\n    name = opts.name;\n    delete opts.name;\n  }\n\n  this.__opts = opts = clone(opts);\n\n  self.auto_compaction = opts.auto_compaction;\n  self.prefix = PouchDB.prefix;\n\n  if (typeof name !== 'string') {\n    throw new Error('Missing/invalid DB name');\n  }\n\n  var prefixedName = (opts.prefix || '') + name;\n  var backend = parseAdapter(prefixedName, opts);\n\n  opts.name = backend.name;\n  opts.adapter = opts.adapter || backend.adapter;\n\n  self.name = name;\n  self._adapter = opts.adapter;\n  debug('pouchdb:adapter')('Picked adapter: ' + opts.adapter);\n\n  if (!PouchDB.adapters[opts.adapter] ||\n      !PouchDB.adapters[opts.adapter].valid()) {\n    throw new Error('Invalid Adapter: ' + opts.adapter);\n  }\n\n  AbstractPouchDB.call(self);\n  self.taskqueue = new TaskQueue();\n\n  self.adapter = opts.adapter;\n\n  PouchDB.adapters[opts.adapter].call(self, opts, function (err) {\n    if (err) {\n      return self.taskqueue.fail(err);\n    }\n    prepareForDestruction(self);\n\n    self.emit('created', self);\n    PouchDB.emit('created', self.name);\n    self.taskqueue.ready(self);\n  });\n\n}\n\nPouchDB.debug = debug;\n\nPouchDB.adapters = {};\nPouchDB.preferredAdapters = [];\n\nPouchDB.prefix = '_pouch_';\n\nvar eventEmitter = new events.EventEmitter();\n\nfunction setUpEventEmitter(Pouch) {\n  Object.keys(events.EventEmitter.prototype).forEach(function (key) {\n    if (typeof events.EventEmitter.prototype[key] === 'function') {\n      Pouch[key] = eventEmitter[key].bind(eventEmitter);\n    }\n  });\n\n  // these are created in constructor.js, and allow us to notify each DB with\n  // the same name that it was destroyed, via the constructor object\n  var destructListeners = Pouch._destructionListeners = new _Map();\n  Pouch.on('destroyed', function onConstructorDestroyed(name) {\n    destructListeners.get(name).forEach(function (callback) {\n      callback();\n    });\n    destructListeners.delete(name);\n  });\n}\n\nsetUpEventEmitter(PouchDB);\n\nPouchDB.adapter = function (id, obj, addToPreferredAdapters) {\n  /* istanbul ignore else */\n  if (obj.valid()) {\n    PouchDB.adapters[id] = obj;\n    if (addToPreferredAdapters) {\n      PouchDB.preferredAdapters.push(id);\n    }\n  }\n};\n\nPouchDB.plugin = function (obj) {\n  if (typeof obj === 'function') { // function style for plugins\n    obj(PouchDB);\n  } else if (typeof obj !== 'object' || Object.keys(obj).length === 0){\n    throw new Error('Invalid plugin: object passed in is empty or not an object');\n  } else {\n    Object.keys(obj).forEach(function (id) { // object style for plugins\n      PouchDB.prototype[id] = obj[id];\n    });\n  }\n  return PouchDB;\n};\n\nPouchDB.defaults = function (defaultOpts) {\n  function PouchAlt(name, opts) {\n    if (!(this instanceof PouchAlt)) {\n      return new PouchAlt(name, opts);\n    }\n\n    opts = opts || {};\n\n    if (name && typeof name === 'object') {\n      opts = name;\n      name = opts.name;\n      delete opts.name;\n    }\n\n    opts = jsExtend.extend({}, defaultOpts, opts);\n    PouchDB.call(this, name, opts);\n  }\n\n  inherits(PouchAlt, PouchDB);\n\n  PouchAlt.preferredAdapters = PouchDB.preferredAdapters.slice();\n  Object.keys(PouchDB).forEach(function (key) {\n    if (!(key in PouchAlt)) {\n      PouchAlt[key] = PouchDB[key];\n    }\n  });\n\n  return PouchAlt;\n};\n\n// managed automatically by set-version.js\nvar version = \"6.0.5\";\n\nPouchDB.version = version;\n\nfunction toObject(array) {\n  return array.reduce(function (obj, item) {\n    obj[item] = true;\n    return obj;\n  }, {});\n}\n// List of top level reserved words for doc\nvar reservedWords = toObject([\n  '_id',\n  '_rev',\n  '_attachments',\n  '_deleted',\n  '_revisions',\n  '_revs_info',\n  '_conflicts',\n  '_deleted_conflicts',\n  '_local_seq',\n  '_rev_tree',\n  //replication documents\n  '_replication_id',\n  '_replication_state',\n  '_replication_state_time',\n  '_replication_state_reason',\n  '_replication_stats',\n  // Specific to Couchbase Sync Gateway\n  '_removed'\n]);\n\n// List of reserved words that should end up the document\nvar dataWords = toObject([\n  '_attachments',\n  //replication documents\n  '_replication_id',\n  '_replication_state',\n  '_replication_state_time',\n  '_replication_state_reason',\n  '_replication_stats'\n]);\n\nfunction parseRevisionInfo(rev) {\n  if (!/^\\d+\\-./.test(rev)) {\n    return createError(INVALID_REV);\n  }\n  var idx = rev.indexOf('-');\n  var left = rev.substring(0, idx);\n  var right = rev.substring(idx + 1);\n  return {\n    prefix: parseInt(left, 10),\n    id: right\n  };\n}\n\nfunction makeRevTreeFromRevisions(revisions, opts) {\n  var pos = revisions.start - revisions.ids.length + 1;\n\n  var revisionIds = revisions.ids;\n  var ids = [revisionIds[0], opts, []];\n\n  for (var i = 1, len = revisionIds.length; i < len; i++) {\n    ids = [revisionIds[i], {status: 'missing'}, [ids]];\n  }\n\n  return [{\n    pos: pos,\n    ids: ids\n  }];\n}\n\n// Preprocess documents, parse their revisions, assign an id and a\n// revision for new writes that are missing them, etc\nfunction parseDoc(doc, newEdits) {\n\n  var nRevNum;\n  var newRevId;\n  var revInfo;\n  var opts = {status: 'available'};\n  if (doc._deleted) {\n    opts.deleted = true;\n  }\n\n  if (newEdits) {\n    if (!doc._id) {\n      doc._id = uuid();\n    }\n    newRevId = uuid(32, 16).toLowerCase();\n    if (doc._rev) {\n      revInfo = parseRevisionInfo(doc._rev);\n      if (revInfo.error) {\n        return revInfo;\n      }\n      doc._rev_tree = [{\n        pos: revInfo.prefix,\n        ids: [revInfo.id, {status: 'missing'}, [[newRevId, opts, []]]]\n      }];\n      nRevNum = revInfo.prefix + 1;\n    } else {\n      doc._rev_tree = [{\n        pos: 1,\n        ids : [newRevId, opts, []]\n      }];\n      nRevNum = 1;\n    }\n  } else {\n    if (doc._revisions) {\n      doc._rev_tree = makeRevTreeFromRevisions(doc._revisions, opts);\n      nRevNum = doc._revisions.start;\n      newRevId = doc._revisions.ids[0];\n    }\n    if (!doc._rev_tree) {\n      revInfo = parseRevisionInfo(doc._rev);\n      if (revInfo.error) {\n        return revInfo;\n      }\n      nRevNum = revInfo.prefix;\n      newRevId = revInfo.id;\n      doc._rev_tree = [{\n        pos: nRevNum,\n        ids: [newRevId, opts, []]\n      }];\n    }\n  }\n\n  invalidIdError(doc._id);\n\n  doc._rev = nRevNum + '-' + newRevId;\n\n  var result = {metadata : {}, data : {}};\n  for (var key in doc) {\n    /* istanbul ignore else */\n    if (Object.prototype.hasOwnProperty.call(doc, key)) {\n      var specialKey = key[0] === '_';\n      if (specialKey && !reservedWords[key]) {\n        var error = createError(DOC_VALIDATION, key);\n        error.message = DOC_VALIDATION.message + ': ' + key;\n        throw error;\n      } else if (specialKey && !dataWords[key]) {\n        result.metadata[key.slice(1)] = doc[key];\n      } else {\n        result.data[key] = doc[key];\n      }\n    }\n  }\n  return result;\n}\n\nvar atob$1 = function (str) {\n  return atob(str);\n};\n\nvar btoa$1 = function (str) {\n  return btoa(str);\n};\n\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor (e.g.\n// old QtWebKit versions, Android < 4.4).\nfunction createBlob(parts, properties) {\n  /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\n  parts = parts || [];\n  properties = properties || {};\n  try {\n    return new Blob(parts, properties);\n  } catch (e) {\n    if (e.name !== \"TypeError\") {\n      throw e;\n    }\n    var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder :\n                  typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder :\n                  typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder :\n                  WebKitBlobBuilder;\n    var builder = new Builder();\n    for (var i = 0; i < parts.length; i += 1) {\n      builder.append(parts[i]);\n    }\n    return builder.getBlob(properties.type);\n  }\n}\n\n// From http://stackoverflow.com/questions/14967647/ (continues on next line)\n// encode-decode-image-with-base64-breaks-image (2013-04-21)\nfunction binaryStringToArrayBuffer(bin) {\n  var length = bin.length;\n  var buf = new ArrayBuffer(length);\n  var arr = new Uint8Array(buf);\n  for (var i = 0; i < length; i++) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return buf;\n}\n\nfunction binStringToBluffer(binString, type) {\n  return createBlob([binaryStringToArrayBuffer(binString)], {type: type});\n}\n\nfunction b64ToBluffer(b64, type) {\n  return binStringToBluffer(atob$1(b64), type);\n}\n\n//Can't find original post, but this is close\n//http://stackoverflow.com/questions/6965107/ (continues on next line)\n//converting-between-strings-and-arraybuffers\nfunction arrayBufferToBinaryString(buffer) {\n  var binary = '';\n  var bytes = new Uint8Array(buffer);\n  var length = bytes.byteLength;\n  for (var i = 0; i < length; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return binary;\n}\n\n// shim for browsers that don't support it\nfunction readAsBinaryString(blob, callback) {\n  if (typeof FileReader === 'undefined') {\n    // fix for Firefox in a web worker\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=901097\n    return callback(arrayBufferToBinaryString(\n      new FileReaderSync().readAsArrayBuffer(blob)));\n  }\n\n  var reader = new FileReader();\n  var hasBinaryString = typeof reader.readAsBinaryString === 'function';\n  reader.onloadend = function (e) {\n    var result = e.target.result || '';\n    if (hasBinaryString) {\n      return callback(result);\n    }\n    callback(arrayBufferToBinaryString(result));\n  };\n  if (hasBinaryString) {\n    reader.readAsBinaryString(blob);\n  } else {\n    reader.readAsArrayBuffer(blob);\n  }\n}\n\nfunction blobToBinaryString(blobOrBuffer, callback) {\n  readAsBinaryString(blobOrBuffer, function (bin) {\n    callback(bin);\n  });\n}\n\nfunction blobToBase64(blobOrBuffer, callback) {\n  blobToBinaryString(blobOrBuffer, function (base64) {\n    callback(btoa$1(base64));\n  });\n}\n\n// simplified API. universal browser support is assumed\nfunction readAsArrayBuffer(blob, callback) {\n  if (typeof FileReader === 'undefined') {\n    // fix for Firefox in a web worker:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=901097\n    return callback(new FileReaderSync().readAsArrayBuffer(blob));\n  }\n\n  var reader = new FileReader();\n  reader.onloadend = function (e) {\n    var result = e.target.result || new ArrayBuffer(0);\n    callback(result);\n  };\n  reader.readAsArrayBuffer(blob);\n}\n\nvar setImmediateShim = global.setImmediate || global.setTimeout;\nvar MD5_CHUNK_SIZE = 32768;\n\nfunction rawToBase64(raw) {\n  return btoa$1(raw);\n}\n\nfunction sliceBlob(blob, start, end) {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  }\n  return blob.slice(start, end);\n}\n\nfunction appendBlob(buffer, blob, start, end, callback) {\n  if (start > 0 || end < blob.size) {\n    // only slice blob if we really need to\n    blob = sliceBlob(blob, start, end);\n  }\n  readAsArrayBuffer(blob, function (arrayBuffer) {\n    buffer.append(arrayBuffer);\n    callback();\n  });\n}\n\nfunction appendString(buffer, string, start, end, callback) {\n  if (start > 0 || end < string.length) {\n    // only create a substring if we really need to\n    string = string.substring(start, end);\n  }\n  buffer.appendBinary(string);\n  callback();\n}\n\nfunction binaryMd5(data, callback) {\n  var inputIsString = typeof data === 'string';\n  var len = inputIsString ? data.length : data.size;\n  var chunkSize = Math.min(MD5_CHUNK_SIZE, len);\n  var chunks = Math.ceil(len / chunkSize);\n  var currentChunk = 0;\n  var buffer = inputIsString ? new Md5() : new Md5.ArrayBuffer();\n\n  var append = inputIsString ? appendString : appendBlob;\n\n  function next() {\n    setImmediateShim(loadNextChunk);\n  }\n\n  function done() {\n    var raw = buffer.end(true);\n    var base64 = rawToBase64(raw);\n    callback(base64);\n    buffer.destroy();\n  }\n\n  function loadNextChunk() {\n    var start = currentChunk * chunkSize;\n    var end = start + chunkSize;\n    currentChunk++;\n    if (currentChunk < chunks) {\n      append(buffer, data, start, end, next);\n    } else {\n      append(buffer, data, start, end, done);\n    }\n  }\n  loadNextChunk();\n}\n\nfunction stringMd5(string) {\n  return Md5.hash(string);\n}\n\nfunction parseBase64(data) {\n  try {\n    return atob$1(data);\n  } catch (e) {\n    var err = createError(BAD_ARG,\n      'Attachment is not a valid base64 string');\n    return {error: err};\n  }\n}\n\nfunction preprocessString(att, blobType, callback) {\n  var asBinary = parseBase64(att.data);\n  if (asBinary.error) {\n    return callback(asBinary.error);\n  }\n\n  att.length = asBinary.length;\n  if (blobType === 'blob') {\n    att.data = binStringToBluffer(asBinary, att.content_type);\n  } else if (blobType === 'base64') {\n    att.data = btoa$1(asBinary);\n  } else { // binary\n    att.data = asBinary;\n  }\n  binaryMd5(asBinary, function (result) {\n    att.digest = 'md5-' + result;\n    callback();\n  });\n}\n\nfunction preprocessBlob(att, blobType, callback) {\n  binaryMd5(att.data, function (md5) {\n    att.digest = 'md5-' + md5;\n    // size is for blobs (browser), length is for buffers (node)\n    att.length = att.data.size || att.data.length || 0;\n    if (blobType === 'binary') {\n      blobToBinaryString(att.data, function (binString) {\n        att.data = binString;\n        callback();\n      });\n    } else if (blobType === 'base64') {\n      blobToBase64(att.data, function (b64) {\n        att.data = b64;\n        callback();\n      });\n    } else {\n      callback();\n    }\n  });\n}\n\nfunction preprocessAttachment(att, blobType, callback) {\n  if (att.stub) {\n    return callback();\n  }\n  if (typeof att.data === 'string') { // input is a base64 string\n    preprocessString(att, blobType, callback);\n  } else { // input is a blob\n    preprocessBlob(att, blobType, callback);\n  }\n}\n\nfunction preprocessAttachments(docInfos, blobType, callback) {\n\n  if (!docInfos.length) {\n    return callback();\n  }\n\n  var docv = 0;\n  var overallErr;\n\n  docInfos.forEach(function (docInfo) {\n    var attachments = docInfo.data && docInfo.data._attachments ?\n      Object.keys(docInfo.data._attachments) : [];\n    var recv = 0;\n\n    if (!attachments.length) {\n      return done();\n    }\n\n    function processedAttachment(err) {\n      overallErr = err;\n      recv++;\n      if (recv === attachments.length) {\n        done();\n      }\n    }\n\n    for (var key in docInfo.data._attachments) {\n      if (docInfo.data._attachments.hasOwnProperty(key)) {\n        preprocessAttachment(docInfo.data._attachments[key],\n          blobType, processedAttachment);\n      }\n    }\n  });\n\n  function done() {\n    docv++;\n    if (docInfos.length === docv) {\n      if (overallErr) {\n        callback(overallErr);\n      } else {\n        callback();\n      }\n    }\n  }\n}\n\nfunction updateDoc(revLimit, prev, docInfo, results,\n                   i, cb, writeDoc, newEdits) {\n\n  if (revExists(prev.rev_tree, docInfo.metadata.rev)) {\n    results[i] = docInfo;\n    return cb();\n  }\n\n  // sometimes this is pre-calculated. historically not always\n  var previousWinningRev = prev.winningRev || winningRev(prev);\n  var previouslyDeleted = 'deleted' in prev ? prev.deleted :\n    isDeleted(prev, previousWinningRev);\n  var deleted = 'deleted' in docInfo.metadata ? docInfo.metadata.deleted :\n    isDeleted(docInfo.metadata);\n  var isRoot = /^1-/.test(docInfo.metadata.rev);\n\n  if (previouslyDeleted && !deleted && newEdits && isRoot) {\n    var newDoc = docInfo.data;\n    newDoc._rev = previousWinningRev;\n    newDoc._id = docInfo.metadata.id;\n    docInfo = parseDoc(newDoc, newEdits);\n  }\n\n  var merged = merge(prev.rev_tree, docInfo.metadata.rev_tree[0], revLimit);\n\n  var inConflict = newEdits && (((previouslyDeleted && deleted) ||\n    (!previouslyDeleted && merged.conflicts !== 'new_leaf') ||\n    (previouslyDeleted && !deleted && merged.conflicts === 'new_branch')));\n\n  if (inConflict) {\n    var err = createError(REV_CONFLICT);\n    results[i] = err;\n    return cb();\n  }\n\n  var newRev = docInfo.metadata.rev;\n  docInfo.metadata.rev_tree = merged.tree;\n  docInfo.stemmedRevs = merged.stemmedRevs || [];\n  /* istanbul ignore else */\n  if (prev.rev_map) {\n    docInfo.metadata.rev_map = prev.rev_map; // used only by leveldb\n  }\n\n  // recalculate\n  var winningRev$$ = winningRev(docInfo.metadata);\n  var winningRevIsDeleted = isDeleted(docInfo.metadata, winningRev$$);\n\n  // calculate the total number of documents that were added/removed,\n  // from the perspective of total_rows/doc_count\n  var delta = (previouslyDeleted === winningRevIsDeleted) ? 0 :\n    previouslyDeleted < winningRevIsDeleted ? -1 : 1;\n\n  var newRevIsDeleted;\n  if (newRev === winningRev$$) {\n    // if the new rev is the same as the winning rev, we can reuse that value\n    newRevIsDeleted = winningRevIsDeleted;\n  } else {\n    // if they're not the same, then we need to recalculate\n    newRevIsDeleted = isDeleted(docInfo.metadata, newRev);\n  }\n\n  writeDoc(docInfo, winningRev$$, winningRevIsDeleted, newRevIsDeleted,\n    true, delta, i, cb);\n}\n\nfunction rootIsMissing(docInfo) {\n  return docInfo.metadata.rev_tree[0].ids[1].status === 'missing';\n}\n\nfunction processDocs(revLimit, docInfos, api, fetchedDocs, tx, results,\n                     writeDoc, opts, overallCallback) {\n\n  // Default to 1000 locally\n  revLimit = revLimit || 1000;\n\n  function insertDoc(docInfo, resultsIdx, callback) {\n    // Cant insert new deleted documents\n    var winningRev$$ = winningRev(docInfo.metadata);\n    var deleted = isDeleted(docInfo.metadata, winningRev$$);\n    if ('was_delete' in opts && deleted) {\n      results[resultsIdx] = createError(MISSING_DOC, 'deleted');\n      return callback();\n    }\n\n    // 4712 - detect whether a new document was inserted with a _rev\n    var inConflict = newEdits && rootIsMissing(docInfo);\n\n    if (inConflict) {\n      var err = createError(REV_CONFLICT);\n      results[resultsIdx] = err;\n      return callback();\n    }\n\n    var delta = deleted ? 0 : 1;\n\n    writeDoc(docInfo, winningRev$$, deleted, deleted, false,\n      delta, resultsIdx, callback);\n  }\n\n  var newEdits = opts.new_edits;\n  var idsToDocs = new _Map();\n\n  var docsDone = 0;\n  var docsToDo = docInfos.length;\n\n  function checkAllDocsDone() {\n    if (++docsDone === docsToDo && overallCallback) {\n      overallCallback();\n    }\n  }\n\n  docInfos.forEach(function (currentDoc, resultsIdx) {\n\n    if (currentDoc._id && isLocalId(currentDoc._id)) {\n      var fun = currentDoc._deleted ? '_removeLocal' : '_putLocal';\n      api[fun](currentDoc, {ctx: tx}, function (err, res) {\n        results[resultsIdx] = err || res;\n        checkAllDocsDone();\n      });\n      return;\n    }\n\n    var id = currentDoc.metadata.id;\n    if (idsToDocs.has(id)) {\n      docsToDo--; // duplicate\n      idsToDocs.get(id).push([currentDoc, resultsIdx]);\n    } else {\n      idsToDocs.set(id, [[currentDoc, resultsIdx]]);\n    }\n  });\n\n  // in the case of new_edits, the user can provide multiple docs\n  // with the same id. these need to be processed sequentially\n  idsToDocs.forEach(function (docs, id) {\n    var numDone = 0;\n\n    function docWritten() {\n      if (++numDone < docs.length) {\n        nextDoc();\n      } else {\n        checkAllDocsDone();\n      }\n    }\n    function nextDoc() {\n      var value = docs[numDone];\n      var currentDoc = value[0];\n      var resultsIdx = value[1];\n\n      if (fetchedDocs.has(id)) {\n        updateDoc(revLimit, fetchedDocs.get(id), currentDoc, results,\n          resultsIdx, docWritten, writeDoc, newEdits);\n      } else {\n        // Ensure stemming applies to new writes as well\n        var merged = merge([], currentDoc.metadata.rev_tree[0], revLimit);\n        currentDoc.metadata.rev_tree = merged.tree;\n        currentDoc.stemmedRevs = merged.stemmedRevs || [];\n        insertDoc(currentDoc, resultsIdx, docWritten);\n      }\n    }\n    nextDoc();\n  });\n}\n\n// IndexedDB requires a versioned database structure, so we use the\n// version here to manage migrations.\nvar ADAPTER_VERSION = 5;\n\n// The object stores created for each database\n// DOC_STORE stores the document meta data, its revision history and state\n// Keyed by document id\nvar DOC_STORE = 'document-store';\n// BY_SEQ_STORE stores a particular version of a document, keyed by its\n// sequence id\nvar BY_SEQ_STORE = 'by-sequence';\n// Where we store attachments\nvar ATTACH_STORE = 'attach-store';\n// Where we store many-to-many relations\n// between attachment digests and seqs\nvar ATTACH_AND_SEQ_STORE = 'attach-seq-store';\n\n// Where we store database-wide meta data in a single record\n// keyed by id: META_STORE\nvar META_STORE = 'meta-store';\n// Where we store local documents\nvar LOCAL_STORE = 'local-store';\n// Where we detect blob support\nvar DETECT_BLOB_SUPPORT_STORE = 'detect-blob-support';\n\nfunction slowJsonParse(str) {\n  try {\n    return JSON.parse(str);\n  } catch (e) {\n    /* istanbul ignore next */\n    return vuvuzela.parse(str);\n  }\n}\n\nfunction safeJsonParse(str) {\n  // try/catch is deoptimized in V8, leading to slower\n  // times than we'd like to have. Most documents are _not_\n  // huge, and do not require a slower code path just to parse them.\n  // We can be pretty sure that a document under 50000 characters\n  // will not be so deeply nested as to throw a stack overflow error\n  // (depends on the engine and available memory, though, so this is\n  // just a hunch). 50000 was chosen based on the average length\n  // of this string in our test suite, to try to find a number that covers\n  // most of our test cases (26 over this size, 26378 under it).\n  if (str.length < 50000) {\n    return JSON.parse(str);\n  }\n  return slowJsonParse(str);\n}\n\nfunction safeJsonStringify(json) {\n  try {\n    return JSON.stringify(json);\n  } catch (e) {\n    /* istanbul ignore next */\n    return vuvuzela.stringify(json);\n  }\n}\n\nfunction tryCode(fun, that, args, PouchDB) {\n  try {\n    fun.apply(that, args);\n  } catch (err) {\n    // Shouldn't happen, but in some odd cases\n    // IndexedDB implementations might throw a sync\n    // error, in which case this will at least log it.\n    PouchDB.emit('error', err);\n  }\n}\n\nvar taskQueue = {\n  running: false,\n  queue: []\n};\n\nfunction applyNext(PouchDB) {\n  if (taskQueue.running || !taskQueue.queue.length) {\n    return;\n  }\n  taskQueue.running = true;\n  var item = taskQueue.queue.shift();\n  item.action(function (err, res) {\n    tryCode(item.callback, this, [err, res], PouchDB);\n    taskQueue.running = false;\n    process.nextTick(function () {\n      applyNext(PouchDB);\n    });\n  });\n}\n\nfunction idbError(callback) {\n  return function (evt) {\n    var message = 'unknown_error';\n    if (evt.target && evt.target.error) {\n      message = evt.target.error.name || evt.target.error.message;\n    }\n    callback(createError(IDB_ERROR, message, evt.type));\n  };\n}\n\n// Unfortunately, the metadata has to be stringified\n// when it is put into the database, because otherwise\n// IndexedDB can throw errors for deeply-nested objects.\n// Originally we just used JSON.parse/JSON.stringify; now\n// we use this custom vuvuzela library that avoids recursion.\n// If we could do it all over again, we'd probably use a\n// format for the revision trees other than JSON.\nfunction encodeMetadata(metadata, winningRev, deleted) {\n  return {\n    data: safeJsonStringify(metadata),\n    winningRev: winningRev,\n    deletedOrLocal: deleted ? '1' : '0',\n    seq: metadata.seq, // highest seq for this doc\n    id: metadata.id\n  };\n}\n\nfunction decodeMetadata(storedObject) {\n  if (!storedObject) {\n    return null;\n  }\n  var metadata = safeJsonParse(storedObject.data);\n  metadata.winningRev = storedObject.winningRev;\n  metadata.deleted = storedObject.deletedOrLocal === '1';\n  metadata.seq = storedObject.seq;\n  return metadata;\n}\n\n// read the doc back out from the database. we don't store the\n// _id or _rev because we already have _doc_id_rev.\nfunction decodeDoc(doc) {\n  if (!doc) {\n    return doc;\n  }\n  var idx = doc._doc_id_rev.lastIndexOf(':');\n  doc._id = doc._doc_id_rev.substring(0, idx - 1);\n  doc._rev = doc._doc_id_rev.substring(idx + 1);\n  delete doc._doc_id_rev;\n  return doc;\n}\n\n// Read a blob from the database, encoding as necessary\n// and translating from base64 if the IDB doesn't support\n// native Blobs\nfunction readBlobData(body, type, asBlob, callback) {\n  if (asBlob) {\n    if (!body) {\n      callback(createBlob([''], {type: type}));\n    } else if (typeof body !== 'string') { // we have blob support\n      callback(body);\n    } else { // no blob support\n      callback(b64ToBluffer(body, type));\n    }\n  } else { // as base64 string\n    if (!body) {\n      callback('');\n    } else if (typeof body !== 'string') { // we have blob support\n      readAsBinaryString(body, function (binary) {\n        callback(btoa$1(binary));\n      });\n    } else { // no blob support\n      callback(body);\n    }\n  }\n}\n\nfunction fetchAttachmentsIfNecessary(doc, opts, txn, cb) {\n  var attachments = Object.keys(doc._attachments || {});\n  if (!attachments.length) {\n    return cb && cb();\n  }\n  var numDone = 0;\n\n  function checkDone() {\n    if (++numDone === attachments.length && cb) {\n      cb();\n    }\n  }\n\n  function fetchAttachment(doc, att) {\n    var attObj = doc._attachments[att];\n    var digest = attObj.digest;\n    var req = txn.objectStore(ATTACH_STORE).get(digest);\n    req.onsuccess = function (e) {\n      attObj.body = e.target.result.body;\n      checkDone();\n    };\n  }\n\n  attachments.forEach(function (att) {\n    if (opts.attachments && opts.include_docs) {\n      fetchAttachment(doc, att);\n    } else {\n      doc._attachments[att].stub = true;\n      checkDone();\n    }\n  });\n}\n\n// IDB-specific postprocessing necessary because\n// we don't know whether we stored a true Blob or\n// a base64-encoded string, and if it's a Blob it\n// needs to be read outside of the transaction context\nfunction postProcessAttachments(results, asBlob) {\n  return PouchPromise.all(results.map(function (row) {\n    if (row.doc && row.doc._attachments) {\n      var attNames = Object.keys(row.doc._attachments);\n      return PouchPromise.all(attNames.map(function (att) {\n        var attObj = row.doc._attachments[att];\n        if (!('body' in attObj)) { // already processed\n          return;\n        }\n        var body = attObj.body;\n        var type = attObj.content_type;\n        return new PouchPromise(function (resolve) {\n          readBlobData(body, type, asBlob, function (data) {\n            row.doc._attachments[att] = jsExtend.extend(\n              pick(attObj, ['digest', 'content_type']),\n              {data: data}\n            );\n            resolve();\n          });\n        });\n      }));\n    }\n  }));\n}\n\nfunction compactRevs(revs, docId, txn) {\n\n  var possiblyOrphanedDigests = [];\n  var seqStore = txn.objectStore(BY_SEQ_STORE);\n  var attStore = txn.objectStore(ATTACH_STORE);\n  var attAndSeqStore = txn.objectStore(ATTACH_AND_SEQ_STORE);\n  var count = revs.length;\n\n  function checkDone() {\n    count--;\n    if (!count) { // done processing all revs\n      deleteOrphanedAttachments();\n    }\n  }\n\n  function deleteOrphanedAttachments() {\n    if (!possiblyOrphanedDigests.length) {\n      return;\n    }\n    possiblyOrphanedDigests.forEach(function (digest) {\n      var countReq = attAndSeqStore.index('digestSeq').count(\n        IDBKeyRange.bound(\n          digest + '::', digest + '::\\uffff', false, false));\n      countReq.onsuccess = function (e) {\n        var count = e.target.result;\n        if (!count) {\n          // orphaned\n          attStore.delete(digest);\n        }\n      };\n    });\n  }\n\n  revs.forEach(function (rev) {\n    var index = seqStore.index('_doc_id_rev');\n    var key = docId + \"::\" + rev;\n    index.getKey(key).onsuccess = function (e) {\n      var seq = e.target.result;\n      if (typeof seq !== 'number') {\n        return checkDone();\n      }\n      seqStore.delete(seq);\n\n      var cursor = attAndSeqStore.index('seq')\n        .openCursor(IDBKeyRange.only(seq));\n\n      cursor.onsuccess = function (event) {\n        var cursor = event.target.result;\n        if (cursor) {\n          var digest = cursor.value.digestSeq.split('::')[0];\n          possiblyOrphanedDigests.push(digest);\n          attAndSeqStore.delete(cursor.primaryKey);\n          cursor.continue();\n        } else { // done\n          checkDone();\n        }\n      };\n    };\n  });\n}\n\nfunction openTransactionSafely(idb, stores, mode) {\n  try {\n    return {\n      txn: idb.transaction(stores, mode)\n    };\n  } catch (err) {\n    return {\n      error: err\n    };\n  }\n}\n\nfunction idbBulkDocs(dbOpts, req, opts, api, idb, idbChanges, callback) {\n  var docInfos = req.docs;\n  var txn;\n  var docStore;\n  var bySeqStore;\n  var attachStore;\n  var attachAndSeqStore;\n  var docInfoError;\n  var docCountDelta = 0;\n\n  for (var i = 0, len = docInfos.length; i < len; i++) {\n    var doc = docInfos[i];\n    if (doc._id && isLocalId(doc._id)) {\n      continue;\n    }\n    doc = docInfos[i] = parseDoc(doc, opts.new_edits);\n    if (doc.error && !docInfoError) {\n      docInfoError = doc;\n    }\n  }\n\n  if (docInfoError) {\n    return callback(docInfoError);\n  }\n\n  var results = new Array(docInfos.length);\n  var fetchedDocs = new _Map();\n  var preconditionErrored = false;\n  var blobType = api._meta.blobSupport ? 'blob' : 'base64';\n\n  preprocessAttachments(docInfos, blobType, function (err) {\n    if (err) {\n      return callback(err);\n    }\n    startTransaction();\n  });\n\n  function startTransaction() {\n\n    var stores = [\n      DOC_STORE, BY_SEQ_STORE,\n      ATTACH_STORE,\n      LOCAL_STORE, ATTACH_AND_SEQ_STORE\n    ];\n    var txnResult = openTransactionSafely(idb, stores, 'readwrite');\n    if (txnResult.error) {\n      return callback(txnResult.error);\n    }\n    txn = txnResult.txn;\n    txn.onabort = idbError(callback);\n    txn.ontimeout = idbError(callback);\n    txn.oncomplete = complete;\n    docStore = txn.objectStore(DOC_STORE);\n    bySeqStore = txn.objectStore(BY_SEQ_STORE);\n    attachStore = txn.objectStore(ATTACH_STORE);\n    attachAndSeqStore = txn.objectStore(ATTACH_AND_SEQ_STORE);\n\n    verifyAttachments(function (err) {\n      if (err) {\n        preconditionErrored = true;\n        return callback(err);\n      }\n      fetchExistingDocs();\n    });\n  }\n\n  function idbProcessDocs() {\n    processDocs(dbOpts.revs_limit, docInfos, api, fetchedDocs,\n                txn, results, writeDoc, opts);\n  }\n\n  function fetchExistingDocs() {\n\n    if (!docInfos.length) {\n      return;\n    }\n\n    var numFetched = 0;\n\n    function checkDone() {\n      if (++numFetched === docInfos.length) {\n        idbProcessDocs();\n      }\n    }\n\n    function readMetadata(event) {\n      var metadata = decodeMetadata(event.target.result);\n\n      if (metadata) {\n        fetchedDocs.set(metadata.id, metadata);\n      }\n      checkDone();\n    }\n\n    for (var i = 0, len = docInfos.length; i < len; i++) {\n      var docInfo = docInfos[i];\n      if (docInfo._id && isLocalId(docInfo._id)) {\n        checkDone(); // skip local docs\n        continue;\n      }\n      var req = docStore.get(docInfo.metadata.id);\n      req.onsuccess = readMetadata;\n    }\n  }\n\n  function complete() {\n    if (preconditionErrored) {\n      return;\n    }\n\n    idbChanges.notify(api._meta.name);\n    api._meta.docCount += docCountDelta;\n    callback(null, results);\n  }\n\n  function verifyAttachment(digest, callback) {\n\n    var req = attachStore.get(digest);\n    req.onsuccess = function (e) {\n      if (!e.target.result) {\n        var err = createError(MISSING_STUB,\n          'unknown stub attachment with digest ' +\n          digest);\n        err.status = 412;\n        callback(err);\n      } else {\n        callback();\n      }\n    };\n  }\n\n  function verifyAttachments(finish) {\n\n\n    var digests = [];\n    docInfos.forEach(function (docInfo) {\n      if (docInfo.data && docInfo.data._attachments) {\n        Object.keys(docInfo.data._attachments).forEach(function (filename) {\n          var att = docInfo.data._attachments[filename];\n          if (att.stub) {\n            digests.push(att.digest);\n          }\n        });\n      }\n    });\n    if (!digests.length) {\n      return finish();\n    }\n    var numDone = 0;\n    var err;\n\n    function checkDone() {\n      if (++numDone === digests.length) {\n        finish(err);\n      }\n    }\n    digests.forEach(function (digest) {\n      verifyAttachment(digest, function (attErr) {\n        if (attErr && !err) {\n          err = attErr;\n        }\n        checkDone();\n      });\n    });\n  }\n\n  function writeDoc(docInfo, winningRev, winningRevIsDeleted, newRevIsDeleted,\n                    isUpdate, delta, resultsIdx, callback) {\n\n    docCountDelta += delta;\n\n    docInfo.metadata.winningRev = winningRev;\n    docInfo.metadata.deleted = winningRevIsDeleted;\n\n    var doc = docInfo.data;\n    doc._id = docInfo.metadata.id;\n    doc._rev = docInfo.metadata.rev;\n\n    if (newRevIsDeleted) {\n      doc._deleted = true;\n    }\n\n    var hasAttachments = doc._attachments &&\n      Object.keys(doc._attachments).length;\n    if (hasAttachments) {\n      return writeAttachments(docInfo, winningRev, winningRevIsDeleted,\n        isUpdate, resultsIdx, callback);\n    }\n\n    finishDoc(docInfo, winningRev, winningRevIsDeleted,\n      isUpdate, resultsIdx, callback);\n  }\n\n  function finishDoc(docInfo, winningRev, winningRevIsDeleted,\n                     isUpdate, resultsIdx, callback) {\n\n    var doc = docInfo.data;\n    var metadata = docInfo.metadata;\n\n    doc._doc_id_rev = metadata.id + '::' + metadata.rev;\n    delete doc._id;\n    delete doc._rev;\n\n    function afterPutDoc(e) {\n      var revsToDelete = docInfo.stemmedRevs || [];\n\n      if (isUpdate && api.auto_compaction) {\n        revsToDelete = revsToDelete.concat(compactTree(docInfo.metadata));\n      }\n\n      if (revsToDelete && revsToDelete.length) {\n        compactRevs(revsToDelete, docInfo.metadata.id, txn);\n      }\n\n      metadata.seq = e.target.result;\n      // Current _rev is calculated from _rev_tree on read\n      delete metadata.rev;\n      var metadataToStore = encodeMetadata(metadata, winningRev,\n        winningRevIsDeleted);\n      var metaDataReq = docStore.put(metadataToStore);\n      metaDataReq.onsuccess = afterPutMetadata;\n    }\n\n    function afterPutDocError(e) {\n      // ConstraintError, need to update, not put (see #1638 for details)\n      e.preventDefault(); // avoid transaction abort\n      e.stopPropagation(); // avoid transaction onerror\n      var index = bySeqStore.index('_doc_id_rev');\n      var getKeyReq = index.getKey(doc._doc_id_rev);\n      getKeyReq.onsuccess = function (e) {\n        var putReq = bySeqStore.put(doc, e.target.result);\n        putReq.onsuccess = afterPutDoc;\n      };\n    }\n\n    function afterPutMetadata() {\n      results[resultsIdx] = {\n        ok: true,\n        id: metadata.id,\n        rev: winningRev\n      };\n      fetchedDocs.set(docInfo.metadata.id, docInfo.metadata);\n      insertAttachmentMappings(docInfo, metadata.seq, callback);\n    }\n\n    var putReq = bySeqStore.put(doc);\n\n    putReq.onsuccess = afterPutDoc;\n    putReq.onerror = afterPutDocError;\n  }\n\n  function writeAttachments(docInfo, winningRev, winningRevIsDeleted,\n                            isUpdate, resultsIdx, callback) {\n\n\n    var doc = docInfo.data;\n\n    var numDone = 0;\n    var attachments = Object.keys(doc._attachments);\n\n    function collectResults() {\n      if (numDone === attachments.length) {\n        finishDoc(docInfo, winningRev, winningRevIsDeleted,\n          isUpdate, resultsIdx, callback);\n      }\n    }\n\n    function attachmentSaved() {\n      numDone++;\n      collectResults();\n    }\n\n    attachments.forEach(function (key) {\n      var att = docInfo.data._attachments[key];\n      if (!att.stub) {\n        var data = att.data;\n        delete att.data;\n        att.revpos = parseInt(winningRev, 10);\n        var digest = att.digest;\n        saveAttachment(digest, data, attachmentSaved);\n      } else {\n        numDone++;\n        collectResults();\n      }\n    });\n  }\n\n  // map seqs to attachment digests, which\n  // we will need later during compaction\n  function insertAttachmentMappings(docInfo, seq, callback) {\n\n    var attsAdded = 0;\n    var attsToAdd = Object.keys(docInfo.data._attachments || {});\n\n    if (!attsToAdd.length) {\n      return callback();\n    }\n\n    function checkDone() {\n      if (++attsAdded === attsToAdd.length) {\n        callback();\n      }\n    }\n\n    function add(att) {\n      var digest = docInfo.data._attachments[att].digest;\n      var req = attachAndSeqStore.put({\n        seq: seq,\n        digestSeq: digest + '::' + seq\n      });\n\n      req.onsuccess = checkDone;\n      req.onerror = function (e) {\n        // this callback is for a constaint error, which we ignore\n        // because this docid/rev has already been associated with\n        // the digest (e.g. when new_edits == false)\n        e.preventDefault(); // avoid transaction abort\n        e.stopPropagation(); // avoid transaction onerror\n        checkDone();\n      };\n    }\n    for (var i = 0; i < attsToAdd.length; i++) {\n      add(attsToAdd[i]); // do in parallel\n    }\n  }\n\n  function saveAttachment(digest, data, callback) {\n\n\n    var getKeyReq = attachStore.count(digest);\n    getKeyReq.onsuccess = function (e) {\n      var count = e.target.result;\n      if (count) {\n        return callback(); // already exists\n      }\n      var newAtt = {\n        digest: digest,\n        body: data\n      };\n      var putReq = attachStore.put(newAtt);\n      putReq.onsuccess = callback;\n    };\n  }\n}\n\nfunction createKeyRange(start, end, inclusiveEnd, key, descending) {\n  try {\n    if (start && end) {\n      if (descending) {\n        return IDBKeyRange.bound(end, start, !inclusiveEnd, false);\n      } else {\n        return IDBKeyRange.bound(start, end, false, !inclusiveEnd);\n      }\n    } else if (start) {\n      if (descending) {\n        return IDBKeyRange.upperBound(start);\n      } else {\n        return IDBKeyRange.lowerBound(start);\n      }\n    } else if (end) {\n      if (descending) {\n        return IDBKeyRange.lowerBound(end, !inclusiveEnd);\n      } else {\n        return IDBKeyRange.upperBound(end, !inclusiveEnd);\n      }\n    } else if (key) {\n      return IDBKeyRange.only(key);\n    }\n  } catch (e) {\n    return {error: e};\n  }\n  return null;\n}\n\nfunction handleKeyRangeError(api, opts, err, callback) {\n  if (err.name === \"DataError\" && err.code === 0) {\n    // data error, start is less than end\n    return callback(null, {\n      total_rows: api._meta.docCount,\n      offset: opts.skip,\n      rows: []\n    });\n  }\n  callback(createError(IDB_ERROR, err.name, err.message));\n}\n\nfunction idbAllDocs(opts, api, idb, callback) {\n\n  function allDocsQuery(opts, callback) {\n    var start = 'startkey' in opts ? opts.startkey : false;\n    var end = 'endkey' in opts ? opts.endkey : false;\n    var key = 'key' in opts ? opts.key : false;\n    var skip = opts.skip || 0;\n    var limit = typeof opts.limit === 'number' ? opts.limit : -1;\n    var inclusiveEnd = opts.inclusive_end !== false;\n    var descending = 'descending' in opts && opts.descending ? 'prev' : null;\n\n    var keyRange = createKeyRange(start, end, inclusiveEnd, key, descending);\n    if (keyRange && keyRange.error) {\n      return handleKeyRangeError(api, opts, keyRange.error, callback);\n    }\n\n    var stores = [DOC_STORE, BY_SEQ_STORE];\n\n    if (opts.attachments) {\n      stores.push(ATTACH_STORE);\n    }\n    var txnResult = openTransactionSafely(idb, stores, 'readonly');\n    if (txnResult.error) {\n      return callback(txnResult.error);\n    }\n    var txn = txnResult.txn;\n    var docStore = txn.objectStore(DOC_STORE);\n    var seqStore = txn.objectStore(BY_SEQ_STORE);\n    var cursor = descending ?\n      docStore.openCursor(keyRange, descending) :\n      docStore.openCursor(keyRange);\n    var docIdRevIndex = seqStore.index('_doc_id_rev');\n    var results = [];\n    var docCount = 0;\n\n    // if the user specifies include_docs=true, then we don't\n    // want to block the main cursor while we're fetching the doc\n    function fetchDocAsynchronously(metadata, row, winningRev) {\n      var key = metadata.id + \"::\" + winningRev;\n      docIdRevIndex.get(key).onsuccess =  function onGetDoc(e) {\n        row.doc = decodeDoc(e.target.result);\n        if (opts.conflicts) {\n          row.doc._conflicts = collectConflicts(metadata);\n        }\n        fetchAttachmentsIfNecessary(row.doc, opts, txn);\n      };\n    }\n\n    function allDocsInner(cursor, winningRev, metadata) {\n      var row = {\n        id: metadata.id,\n        key: metadata.id,\n        value: {\n          rev: winningRev\n        }\n      };\n      var deleted = metadata.deleted;\n      if (opts.deleted === 'ok') {\n        results.push(row);\n        // deleted docs are okay with \"keys\" requests\n        if (deleted) {\n          row.value.deleted = true;\n          row.doc = null;\n        } else if (opts.include_docs) {\n          fetchDocAsynchronously(metadata, row, winningRev);\n        }\n      } else if (!deleted && skip-- <= 0) {\n        results.push(row);\n        if (opts.include_docs) {\n          fetchDocAsynchronously(metadata, row, winningRev);\n        }\n        if (--limit === 0) {\n          return;\n        }\n      }\n      cursor.continue();\n    }\n\n    function onGetCursor(e) {\n      docCount = api._meta.docCount; // do this within the txn for consistency\n      var cursor = e.target.result;\n      if (!cursor) {\n        return;\n      }\n      var metadata = decodeMetadata(cursor.value);\n      var winningRev = metadata.winningRev;\n\n      allDocsInner(cursor, winningRev, metadata);\n    }\n\n    function onResultsReady() {\n      callback(null, {\n        total_rows: docCount,\n        offset: opts.skip,\n        rows: results\n      });\n    }\n\n    function onTxnComplete() {\n      if (opts.attachments) {\n        postProcessAttachments(results, opts.binary).then(onResultsReady);\n      } else {\n        onResultsReady();\n      }\n    }\n\n    txn.oncomplete = onTxnComplete;\n    cursor.onsuccess = onGetCursor;\n  }\n\n  function allDocs(opts, callback) {\n\n    if (opts.limit === 0) {\n      return callback(null, {\n        total_rows: api._meta.docCount,\n        offset: opts.skip,\n        rows: []\n      });\n    }\n    allDocsQuery(opts, callback);\n  }\n\n  allDocs(opts, callback);\n}\n\n//\n// Blobs are not supported in all versions of IndexedDB, notably\n// Chrome <37 and Android <5. In those versions, storing a blob will throw.\n//\n// Various other blob bugs exist in Chrome v37-42 (inclusive).\n// Detecting them is expensive and confusing to users, and Chrome 37-42\n// is at very low usage worldwide, so we do a hacky userAgent check instead.\n//\n// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120\n// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916\n// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836\n//\nfunction checkBlobSupport(txn) {\n  return new PouchPromise(function (resolve) {\n    var blob = createBlob(['']);\n    txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');\n\n    txn.onabort = function (e) {\n      // If the transaction aborts now its due to not being able to\n      // write to the database, likely due to the disk being full\n      e.preventDefault();\n      e.stopPropagation();\n      resolve(false);\n    };\n\n    txn.oncomplete = function () {\n      var matchedChrome = navigator.userAgent.match(/Chrome\\/(\\d+)/);\n      var matchedEdge = navigator.userAgent.match(/Edge\\//);\n      // MS Edge pretends to be Chrome 42:\n      // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx\n      resolve(matchedEdge || !matchedChrome ||\n        parseInt(matchedChrome[1], 10) >= 43);\n    };\n  }).catch(function () {\n    return false; // error, so assume unsupported\n  });\n}\n\nvar cachedDBs = new _Map();\nvar blobSupportPromise;\nvar idbChanges = new Changes$1();\nvar openReqList = new _Map();\n\nfunction IdbPouch(opts, callback) {\n  var api = this;\n\n  taskQueue.queue.push({\n    action: function (thisCallback) {\n      init(api, opts, thisCallback);\n    },\n    callback: callback\n  });\n  applyNext(api.constructor);\n}\n\nfunction init(api, opts, callback) {\n\n  var dbName = opts.name;\n\n  var idb = null;\n  api._meta = null;\n\n  // called when creating a fresh new database\n  function createSchema(db) {\n    var docStore = db.createObjectStore(DOC_STORE, {keyPath : 'id'});\n    db.createObjectStore(BY_SEQ_STORE, {autoIncrement: true})\n      .createIndex('_doc_id_rev', '_doc_id_rev', {unique: true});\n    db.createObjectStore(ATTACH_STORE, {keyPath: 'digest'});\n    db.createObjectStore(META_STORE, {keyPath: 'id', autoIncrement: false});\n    db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);\n\n    // added in v2\n    docStore.createIndex('deletedOrLocal', 'deletedOrLocal', {unique : false});\n\n    // added in v3\n    db.createObjectStore(LOCAL_STORE, {keyPath: '_id'});\n\n    // added in v4\n    var attAndSeqStore = db.createObjectStore(ATTACH_AND_SEQ_STORE,\n      {autoIncrement: true});\n    attAndSeqStore.createIndex('seq', 'seq');\n    attAndSeqStore.createIndex('digestSeq', 'digestSeq', {unique: true});\n  }\n\n  // migration to version 2\n  // unfortunately \"deletedOrLocal\" is a misnomer now that we no longer\n  // store local docs in the main doc-store, but whaddyagonnado\n  function addDeletedOrLocalIndex(txn, callback) {\n    var docStore = txn.objectStore(DOC_STORE);\n    docStore.createIndex('deletedOrLocal', 'deletedOrLocal', {unique : false});\n\n    docStore.openCursor().onsuccess = function (event) {\n      var cursor = event.target.result;\n      if (cursor) {\n        var metadata = cursor.value;\n        var deleted = isDeleted(metadata);\n        metadata.deletedOrLocal = deleted ? \"1\" : \"0\";\n        docStore.put(metadata);\n        cursor.continue();\n      } else {\n        callback();\n      }\n    };\n  }\n\n  // migration to version 3 (part 1)\n  function createLocalStoreSchema(db) {\n    db.createObjectStore(LOCAL_STORE, {keyPath: '_id'})\n      .createIndex('_doc_id_rev', '_doc_id_rev', {unique: true});\n  }\n\n  // migration to version 3 (part 2)\n  function migrateLocalStore(txn, cb) {\n    var localStore = txn.objectStore(LOCAL_STORE);\n    var docStore = txn.objectStore(DOC_STORE);\n    var seqStore = txn.objectStore(BY_SEQ_STORE);\n\n    var cursor = docStore.openCursor();\n    cursor.onsuccess = function (event) {\n      var cursor = event.target.result;\n      if (cursor) {\n        var metadata = cursor.value;\n        var docId = metadata.id;\n        var local = isLocalId(docId);\n        var rev = winningRev(metadata);\n        if (local) {\n          var docIdRev = docId + \"::\" + rev;\n          // remove all seq entries\n          // associated with this docId\n          var start = docId + \"::\";\n          var end = docId + \"::~\";\n          var index = seqStore.index('_doc_id_rev');\n          var range = IDBKeyRange.bound(start, end, false, false);\n          var seqCursor = index.openCursor(range);\n          seqCursor.onsuccess = function (e) {\n            seqCursor = e.target.result;\n            if (!seqCursor) {\n              // done\n              docStore.delete(cursor.primaryKey);\n              cursor.continue();\n            } else {\n              var data = seqCursor.value;\n              if (data._doc_id_rev === docIdRev) {\n                localStore.put(data);\n              }\n              seqStore.delete(seqCursor.primaryKey);\n              seqCursor.continue();\n            }\n          };\n        } else {\n          cursor.continue();\n        }\n      } else if (cb) {\n        cb();\n      }\n    };\n  }\n\n  // migration to version 4 (part 1)\n  function addAttachAndSeqStore(db) {\n    var attAndSeqStore = db.createObjectStore(ATTACH_AND_SEQ_STORE,\n      {autoIncrement: true});\n    attAndSeqStore.createIndex('seq', 'seq');\n    attAndSeqStore.createIndex('digestSeq', 'digestSeq', {unique: true});\n  }\n\n  // migration to version 4 (part 2)\n  function migrateAttsAndSeqs(txn, callback) {\n    var seqStore = txn.objectStore(BY_SEQ_STORE);\n    var attStore = txn.objectStore(ATTACH_STORE);\n    var attAndSeqStore = txn.objectStore(ATTACH_AND_SEQ_STORE);\n\n    // need to actually populate the table. this is the expensive part,\n    // so as an optimization, check first that this database even\n    // contains attachments\n    var req = attStore.count();\n    req.onsuccess = function (e) {\n      var count = e.target.result;\n      if (!count) {\n        return callback(); // done\n      }\n\n      seqStore.openCursor().onsuccess = function (e) {\n        var cursor = e.target.result;\n        if (!cursor) {\n          return callback(); // done\n        }\n        var doc = cursor.value;\n        var seq = cursor.primaryKey;\n        var atts = Object.keys(doc._attachments || {});\n        var digestMap = {};\n        for (var j = 0; j < atts.length; j++) {\n          var att = doc._attachments[atts[j]];\n          digestMap[att.digest] = true; // uniq digests, just in case\n        }\n        var digests = Object.keys(digestMap);\n        for (j = 0; j < digests.length; j++) {\n          var digest = digests[j];\n          attAndSeqStore.put({\n            seq: seq,\n            digestSeq: digest + '::' + seq\n          });\n        }\n        cursor.continue();\n      };\n    };\n  }\n\n  // migration to version 5\n  // Instead of relying on on-the-fly migration of metadata,\n  // this brings the doc-store to its modern form:\n  // - metadata.winningrev\n  // - metadata.seq\n  // - stringify the metadata when storing it\n  function migrateMetadata(txn) {\n\n    function decodeMetadataCompat(storedObject) {\n      if (!storedObject.data) {\n        // old format, when we didn't store it stringified\n        storedObject.deleted = storedObject.deletedOrLocal === '1';\n        return storedObject;\n      }\n      return decodeMetadata(storedObject);\n    }\n\n    // ensure that every metadata has a winningRev and seq,\n    // which was previously created on-the-fly but better to migrate\n    var bySeqStore = txn.objectStore(BY_SEQ_STORE);\n    var docStore = txn.objectStore(DOC_STORE);\n    var cursor = docStore.openCursor();\n    cursor.onsuccess = function (e) {\n      var cursor = e.target.result;\n      if (!cursor) {\n        return; // done\n      }\n      var metadata = decodeMetadataCompat(cursor.value);\n\n      metadata.winningRev = metadata.winningRev ||\n        winningRev(metadata);\n\n      function fetchMetadataSeq() {\n        // metadata.seq was added post-3.2.0, so if it's missing,\n        // we need to fetch it manually\n        var start = metadata.id + '::';\n        var end = metadata.id + '::\\uffff';\n        var req = bySeqStore.index('_doc_id_rev').openCursor(\n          IDBKeyRange.bound(start, end));\n\n        var metadataSeq = 0;\n        req.onsuccess = function (e) {\n          var cursor = e.target.result;\n          if (!cursor) {\n            metadata.seq = metadataSeq;\n            return onGetMetadataSeq();\n          }\n          var seq = cursor.primaryKey;\n          if (seq > metadataSeq) {\n            metadataSeq = seq;\n          }\n          cursor.continue();\n        };\n      }\n\n      function onGetMetadataSeq() {\n        var metadataToStore = encodeMetadata(metadata,\n          metadata.winningRev, metadata.deleted);\n\n        var req = docStore.put(metadataToStore);\n        req.onsuccess = function () {\n          cursor.continue();\n        };\n      }\n\n      if (metadata.seq) {\n        return onGetMetadataSeq();\n      }\n\n      fetchMetadataSeq();\n    };\n\n  }\n\n  api.type = function () {\n    return 'idb';\n  };\n\n  api._id = toPromise(function (callback) {\n    callback(null, api._meta.instanceId);\n  });\n\n  api._bulkDocs = function idb_bulkDocs(req, reqOpts, callback) {\n    idbBulkDocs(opts, req, reqOpts, api, idb, idbChanges, callback);\n  };\n\n  // First we look up the metadata in the ids database, then we fetch the\n  // current revision(s) from the by sequence store\n  api._get = function idb_get(id, opts, callback) {\n    var doc;\n    var metadata;\n    var err;\n    var txn = opts.ctx;\n    if (!txn) {\n      var txnResult = openTransactionSafely(idb,\n        [DOC_STORE, BY_SEQ_STORE, ATTACH_STORE], 'readonly');\n      if (txnResult.error) {\n        return callback(txnResult.error);\n      }\n      txn = txnResult.txn;\n    }\n\n    function finish() {\n      callback(err, {doc: doc, metadata: metadata, ctx: txn});\n    }\n\n    txn.objectStore(DOC_STORE).get(id).onsuccess = function (e) {\n      metadata = decodeMetadata(e.target.result);\n      // we can determine the result here if:\n      // 1. there is no such document\n      // 2. the document is deleted and we don't ask about specific rev\n      // When we ask with opts.rev we expect the answer to be either\n      // doc (possibly with _deleted=true) or missing error\n      if (!metadata) {\n        err = createError(MISSING_DOC, 'missing');\n        return finish();\n      }\n      if (isDeleted(metadata) && !opts.rev) {\n        err = createError(MISSING_DOC, \"deleted\");\n        return finish();\n      }\n      var objectStore = txn.objectStore(BY_SEQ_STORE);\n\n      var rev = opts.rev || metadata.winningRev;\n      var key = metadata.id + '::' + rev;\n\n      objectStore.index('_doc_id_rev').get(key).onsuccess = function (e) {\n        doc = e.target.result;\n        if (doc) {\n          doc = decodeDoc(doc);\n        }\n        if (!doc) {\n          err = createError(MISSING_DOC, 'missing');\n          return finish();\n        }\n        finish();\n      };\n    };\n  };\n\n  api._getAttachment = function (docId, attachId, attachment, opts, callback) {\n    var txn;\n    if (opts.ctx) {\n      txn = opts.ctx;\n    } else {\n      var txnResult = openTransactionSafely(idb,\n        [DOC_STORE, BY_SEQ_STORE, ATTACH_STORE], 'readonly');\n      if (txnResult.error) {\n        return callback(txnResult.error);\n      }\n      txn = txnResult.txn;\n    }\n    var digest = attachment.digest;\n    var type = attachment.content_type;\n\n    txn.objectStore(ATTACH_STORE).get(digest).onsuccess = function (e) {\n      var body = e.target.result.body;\n      readBlobData(body, type, opts.binary, function (blobData) {\n        callback(null, blobData);\n      });\n    };\n  };\n\n  api._info = function idb_info(callback) {\n\n    if (idb === null || !cachedDBs.has(dbName)) {\n      var error = new Error('db isn\\'t open');\n      error.id = 'idbNull';\n      return callback(error);\n    }\n    var updateSeq;\n    var docCount;\n\n    var txnResult = openTransactionSafely(idb, [BY_SEQ_STORE], 'readonly');\n    if (txnResult.error) {\n      return callback(txnResult.error);\n    }\n    var txn = txnResult.txn;\n    var cursor = txn.objectStore(BY_SEQ_STORE).openCursor(null, 'prev');\n    cursor.onsuccess = function (event) {\n      var cursor = event.target.result;\n      updateSeq = cursor ? cursor.key : 0;\n      // count within the same txn for consistency\n      docCount = api._meta.docCount;\n    };\n\n    txn.oncomplete = function () {\n      callback(null, {\n        doc_count: docCount,\n        update_seq: updateSeq,\n        // for debugging\n        idb_attachment_format: (api._meta.blobSupport ? 'binary' : 'base64')\n      });\n    };\n  };\n\n  api._allDocs = function idb_allDocs(opts, callback) {\n    idbAllDocs(opts, api, idb, callback);\n  };\n\n  api._changes = function (opts) {\n    opts = clone(opts);\n\n    if (opts.continuous) {\n      var id = dbName + ':' + uuid();\n      idbChanges.addListener(dbName, id, api, opts);\n      idbChanges.notify(dbName);\n      return {\n        cancel: function () {\n          idbChanges.removeListener(dbName, id);\n        }\n      };\n    }\n\n    var docIds = opts.doc_ids && new _Set(opts.doc_ids);\n\n    opts.since = opts.since || 0;\n    var lastSeq = opts.since;\n\n    var limit = 'limit' in opts ? opts.limit : -1;\n    if (limit === 0) {\n      limit = 1; // per CouchDB _changes spec\n    }\n    var returnDocs;\n    if ('return_docs' in opts) {\n      returnDocs = opts.return_docs;\n    } else if ('returnDocs' in opts) {\n      // TODO: Remove 'returnDocs' in favor of 'return_docs' in a future release\n      returnDocs = opts.returnDocs;\n    } else {\n      returnDocs = true;\n    }\n\n    var results = [];\n    var numResults = 0;\n    var filter = filterChange(opts);\n    var docIdsToMetadata = new _Map();\n\n    var txn;\n    var bySeqStore;\n    var docStore;\n    var docIdRevIndex;\n\n    function onGetCursor(cursor) {\n\n      var doc = decodeDoc(cursor.value);\n      var seq = cursor.key;\n\n      if (docIds && !docIds.has(doc._id)) {\n        return cursor.continue();\n      }\n\n      var metadata;\n\n      function onGetMetadata() {\n        if (metadata.seq !== seq) {\n          // some other seq is later\n          return cursor.continue();\n        }\n\n        lastSeq = seq;\n\n        if (metadata.winningRev === doc._rev) {\n          return onGetWinningDoc(doc);\n        }\n\n        fetchWinningDoc();\n      }\n\n      function fetchWinningDoc() {\n        var docIdRev = doc._id + '::' + metadata.winningRev;\n        var req = docIdRevIndex.get(docIdRev);\n        req.onsuccess = function (e) {\n          onGetWinningDoc(decodeDoc(e.target.result));\n        };\n      }\n\n      function onGetWinningDoc(winningDoc) {\n\n        var change = opts.processChange(winningDoc, metadata, opts);\n        change.seq = metadata.seq;\n\n        var filtered = filter(change);\n        if (typeof filtered === 'object') {\n          return opts.complete(filtered);\n        }\n\n        if (filtered) {\n          numResults++;\n          if (returnDocs) {\n            results.push(change);\n          }\n          // process the attachment immediately\n          // for the benefit of live listeners\n          if (opts.attachments && opts.include_docs) {\n            fetchAttachmentsIfNecessary(winningDoc, opts, txn, function () {\n              postProcessAttachments([change], opts.binary).then(function () {\n                opts.onChange(change);\n              });\n            });\n          } else {\n            opts.onChange(change);\n          }\n        }\n        if (numResults !== limit) {\n          cursor.continue();\n        }\n      }\n\n      metadata = docIdsToMetadata.get(doc._id);\n      if (metadata) { // cached\n        return onGetMetadata();\n      }\n      // metadata not cached, have to go fetch it\n      docStore.get(doc._id).onsuccess = function (event) {\n        metadata = decodeMetadata(event.target.result);\n        docIdsToMetadata.set(doc._id, metadata);\n        onGetMetadata();\n      };\n    }\n\n    function onsuccess(event) {\n      var cursor = event.target.result;\n\n      if (!cursor) {\n        return;\n      }\n      onGetCursor(cursor);\n    }\n\n    function fetchChanges() {\n      var objectStores = [DOC_STORE, BY_SEQ_STORE];\n      if (opts.attachments) {\n        objectStores.push(ATTACH_STORE);\n      }\n      var txnResult = openTransactionSafely(idb, objectStores, 'readonly');\n      if (txnResult.error) {\n        return opts.complete(txnResult.error);\n      }\n      txn = txnResult.txn;\n      txn.onabort = idbError(opts.complete);\n      txn.oncomplete = onTxnComplete;\n\n      bySeqStore = txn.objectStore(BY_SEQ_STORE);\n      docStore = txn.objectStore(DOC_STORE);\n      docIdRevIndex = bySeqStore.index('_doc_id_rev');\n\n      var req;\n\n      if (opts.descending) {\n        req = bySeqStore.openCursor(null, 'prev');\n      } else {\n        req = bySeqStore.openCursor(IDBKeyRange.lowerBound(opts.since, true));\n      }\n\n      req.onsuccess = onsuccess;\n    }\n\n    fetchChanges();\n\n    function onTxnComplete() {\n\n      function finish() {\n        opts.complete(null, {\n          results: results,\n          last_seq: lastSeq\n        });\n      }\n\n      if (!opts.continuous && opts.attachments) {\n        // cannot guarantee that postProcessing was already done,\n        // so do it again\n        postProcessAttachments(results).then(finish);\n      } else {\n        finish();\n      }\n    }\n  };\n\n  api._close = function (callback) {\n    if (idb === null) {\n      return callback(createError(NOT_OPEN));\n    }\n\n    // https://developer.mozilla.org/en-US/docs/IndexedDB/IDBDatabase#close\n    // \"Returns immediately and closes the connection in a separate thread...\"\n    idb.close();\n    cachedDBs.delete(dbName);\n    idb = null;\n    callback();\n  };\n\n  api._getRevisionTree = function (docId, callback) {\n    var txnResult = openTransactionSafely(idb, [DOC_STORE], 'readonly');\n    if (txnResult.error) {\n      return callback(txnResult.error);\n    }\n    var txn = txnResult.txn;\n    var req = txn.objectStore(DOC_STORE).get(docId);\n    req.onsuccess = function (event) {\n      var doc = decodeMetadata(event.target.result);\n      if (!doc) {\n        callback(createError(MISSING_DOC));\n      } else {\n        callback(null, doc.rev_tree);\n      }\n    };\n  };\n\n  // This function removes revisions of document docId\n  // which are listed in revs and sets this document\n  // revision to to rev_tree\n  api._doCompaction = function (docId, revs, callback) {\n    var stores = [\n      DOC_STORE,\n      BY_SEQ_STORE,\n      ATTACH_STORE,\n      ATTACH_AND_SEQ_STORE\n    ];\n    var txnResult = openTransactionSafely(idb, stores, 'readwrite');\n    if (txnResult.error) {\n      return callback(txnResult.error);\n    }\n    var txn = txnResult.txn;\n\n    var docStore = txn.objectStore(DOC_STORE);\n\n    docStore.get(docId).onsuccess = function (event) {\n      var metadata = decodeMetadata(event.target.result);\n      traverseRevTree(metadata.rev_tree, function (isLeaf, pos,\n                                                         revHash, ctx, opts) {\n        var rev = pos + '-' + revHash;\n        if (revs.indexOf(rev) !== -1) {\n          opts.status = 'missing';\n        }\n      });\n      compactRevs(revs, docId, txn);\n      var winningRev = metadata.winningRev;\n      var deleted = metadata.deleted;\n      txn.objectStore(DOC_STORE).put(\n        encodeMetadata(metadata, winningRev, deleted));\n    };\n    txn.onabort = idbError(callback);\n    txn.oncomplete = function () {\n      callback();\n    };\n  };\n\n\n  api._getLocal = function (id, callback) {\n    var txnResult = openTransactionSafely(idb, [LOCAL_STORE], 'readonly');\n    if (txnResult.error) {\n      return callback(txnResult.error);\n    }\n    var tx = txnResult.txn;\n    var req = tx.objectStore(LOCAL_STORE).get(id);\n\n    req.onerror = idbError(callback);\n    req.onsuccess = function (e) {\n      var doc = e.target.result;\n      if (!doc) {\n        callback(createError(MISSING_DOC));\n      } else {\n        delete doc['_doc_id_rev']; // for backwards compat\n        callback(null, doc);\n      }\n    };\n  };\n\n  api._putLocal = function (doc, opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    delete doc._revisions; // ignore this, trust the rev\n    var oldRev = doc._rev;\n    var id = doc._id;\n    if (!oldRev) {\n      doc._rev = '0-1';\n    } else {\n      doc._rev = '0-' + (parseInt(oldRev.split('-')[1], 10) + 1);\n    }\n\n    var tx = opts.ctx;\n    var ret;\n    if (!tx) {\n      var txnResult = openTransactionSafely(idb, [LOCAL_STORE], 'readwrite');\n      if (txnResult.error) {\n        return callback(txnResult.error);\n      }\n      tx = txnResult.txn;\n      tx.onerror = idbError(callback);\n      tx.oncomplete = function () {\n        if (ret) {\n          callback(null, ret);\n        }\n      };\n    }\n\n    var oStore = tx.objectStore(LOCAL_STORE);\n    var req;\n    if (oldRev) {\n      req = oStore.get(id);\n      req.onsuccess = function (e) {\n        var oldDoc = e.target.result;\n        if (!oldDoc || oldDoc._rev !== oldRev) {\n          callback(createError(REV_CONFLICT));\n        } else { // update\n          var req = oStore.put(doc);\n          req.onsuccess = function () {\n            ret = {ok: true, id: doc._id, rev: doc._rev};\n            if (opts.ctx) { // return immediately\n              callback(null, ret);\n            }\n          };\n        }\n      };\n    } else { // new doc\n      req = oStore.add(doc);\n      req.onerror = function (e) {\n        // constraint error, already exists\n        callback(createError(REV_CONFLICT));\n        e.preventDefault(); // avoid transaction abort\n        e.stopPropagation(); // avoid transaction onerror\n      };\n      req.onsuccess = function () {\n        ret = {ok: true, id: doc._id, rev: doc._rev};\n        if (opts.ctx) { // return immediately\n          callback(null, ret);\n        }\n      };\n    }\n  };\n\n  api._removeLocal = function (doc, opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    var tx = opts.ctx;\n    if (!tx) {\n      var txnResult = openTransactionSafely(idb, [LOCAL_STORE], 'readwrite');\n      if (txnResult.error) {\n        return callback(txnResult.error);\n      }\n      tx = txnResult.txn;\n      tx.oncomplete = function () {\n        if (ret) {\n          callback(null, ret);\n        }\n      };\n    }\n    var ret;\n    var id = doc._id;\n    var oStore = tx.objectStore(LOCAL_STORE);\n    var req = oStore.get(id);\n\n    req.onerror = idbError(callback);\n    req.onsuccess = function (e) {\n      var oldDoc = e.target.result;\n      if (!oldDoc || oldDoc._rev !== doc._rev) {\n        callback(createError(MISSING_DOC));\n      } else {\n        oStore.delete(id);\n        ret = {ok: true, id: id, rev: '0-0'};\n        if (opts.ctx) { // return immediately\n          callback(null, ret);\n        }\n      }\n    };\n  };\n\n  api._destroy = function (opts, callback) {\n    idbChanges.removeAllListeners(dbName);\n\n    //Close open request for \"dbName\" database to fix ie delay.\n    var openReq = openReqList.get(dbName);\n    if (openReq && openReq.result) {\n      openReq.result.close();\n      cachedDBs.delete(dbName);\n    }\n    var req = indexedDB.deleteDatabase(dbName);\n\n    req.onsuccess = function () {\n      //Remove open request from the list.\n      openReqList.delete(dbName);\n      if (hasLocalStorage() && (dbName in localStorage)) {\n        delete localStorage[dbName];\n      }\n      callback(null, { 'ok': true });\n    };\n\n    req.onerror = idbError(callback);\n  };\n\n  var cached = cachedDBs.get(dbName);\n\n  if (cached) {\n    idb = cached.idb;\n    api._meta = cached.global;\n    process.nextTick(function () {\n      callback(null, api);\n    });\n    return;\n  }\n\n  var req;\n  if (opts.storage) {\n    req = tryStorageOption(dbName, opts.storage);\n  } else {\n    req = indexedDB.open(dbName, ADAPTER_VERSION);\n  }\n\n  openReqList.set(dbName, req);\n\n  req.onupgradeneeded = function (e) {\n    var db = e.target.result;\n    if (e.oldVersion < 1) {\n      return createSchema(db); // new db, initial schema\n    }\n    // do migrations\n\n    var txn = e.currentTarget.transaction;\n    // these migrations have to be done in this function, before\n    // control is returned to the event loop, because IndexedDB\n\n    if (e.oldVersion < 3) {\n      createLocalStoreSchema(db); // v2 -> v3\n    }\n    if (e.oldVersion < 4) {\n      addAttachAndSeqStore(db); // v3 -> v4\n    }\n\n    var migrations = [\n      addDeletedOrLocalIndex, // v1 -> v2\n      migrateLocalStore,      // v2 -> v3\n      migrateAttsAndSeqs,     // v3 -> v4\n      migrateMetadata         // v4 -> v5\n    ];\n\n    var i = e.oldVersion;\n\n    function next() {\n      var migration = migrations[i - 1];\n      i++;\n      if (migration) {\n        migration(txn, next);\n      }\n    }\n\n    next();\n  };\n\n  req.onsuccess = function (e) {\n\n    idb = e.target.result;\n\n    idb.onversionchange = function () {\n      idb.close();\n      cachedDBs.delete(dbName);\n    };\n\n    idb.onabort = function (e) {\n      guardedConsole('error', 'Database has a global failure', e.target.error);\n      idb.close();\n      cachedDBs.delete(dbName);\n    };\n\n    var txn = idb.transaction([\n      META_STORE,\n      DETECT_BLOB_SUPPORT_STORE,\n      DOC_STORE\n    ], 'readwrite');\n\n    var req = txn.objectStore(META_STORE).get(META_STORE);\n\n    var blobSupport = null;\n    var docCount = null;\n    var instanceId = null;\n\n    req.onsuccess = function (e) {\n\n      var checkSetupComplete = function () {\n        if (blobSupport === null || docCount === null ||\n            instanceId === null) {\n          return;\n        } else {\n          api._meta = {\n            name: dbName,\n            instanceId: instanceId,\n            blobSupport: blobSupport,\n            docCount: docCount\n          };\n\n          cachedDBs.set(dbName, {\n            idb: idb,\n            global: api._meta\n          });\n          callback(null, api);\n        }\n      };\n\n      //\n      // fetch/store the id\n      //\n\n      var meta = e.target.result || {id: META_STORE};\n      if (dbName  + '_id' in meta) {\n        instanceId = meta[dbName + '_id'];\n        checkSetupComplete();\n      } else {\n        instanceId = uuid();\n        meta[dbName + '_id'] = instanceId;\n        txn.objectStore(META_STORE).put(meta).onsuccess = function () {\n          checkSetupComplete();\n        };\n      }\n\n      //\n      // check blob support\n      //\n\n      if (!blobSupportPromise) {\n        // make sure blob support is only checked once\n        blobSupportPromise = checkBlobSupport(txn);\n      }\n\n      blobSupportPromise.then(function (val) {\n        blobSupport = val;\n        checkSetupComplete();\n      });\n\n      //\n      // count docs\n      //\n\n      var index = txn.objectStore(DOC_STORE).index('deletedOrLocal');\n      index.count(IDBKeyRange.only('0')).onsuccess = function (e) {\n        docCount = e.target.result;\n        checkSetupComplete();\n      };\n\n    };\n  };\n\n  req.onerror = function () {\n    var msg = 'Failed to open indexedDB, are you in private browsing mode?';\n    guardedConsole('error', msg);\n    callback(createError(IDB_ERROR, msg));\n  };\n}\n\nIdbPouch.valid = function () {\n  // Issue #2533, we finally gave up on doing bug\n  // detection instead of browser sniffing. Safari brought us\n  // to our knees.\n  var isSafari = typeof openDatabase !== 'undefined' &&\n    /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) &&\n    !/Chrome/.test(navigator.userAgent) &&\n    !/BlackBerry/.test(navigator.platform);\n\n  // some outdated implementations of IDB that appear on Samsung\n  // and HTC Android devices <4.4 are missing IDBKeyRange\n  return !isSafari && typeof indexedDB !== 'undefined' &&\n    typeof IDBKeyRange !== 'undefined';\n};\n\nfunction tryStorageOption(dbName, storage) {\n  try { // option only available in Firefox 26+\n    return indexedDB.open(dbName, {\n      version: ADAPTER_VERSION,\n      storage: storage\n    });\n  } catch(err) {\n      return indexedDB.open(dbName, ADAPTER_VERSION);\n  }\n}\n\nfunction IDBPouch (PouchDB) {\n  PouchDB.adapter('idb', IdbPouch, true);\n}\n\n//\n// Parsing hex strings. Yeah.\n//\n// So basically we need this because of a bug in WebSQL:\n// https://code.google.com/p/chromium/issues/detail?id=422690\n// https://bugs.webkit.org/show_bug.cgi?id=137637\n//\n// UTF-8 and UTF-16 are provided as separate functions\n// for meager performance improvements\n//\n\nfunction decodeUtf8(str) {\n  return decodeURIComponent(escape(str));\n}\n\nfunction hexToInt(charCode) {\n  // '0'-'9' is 48-57\n  // 'A'-'F' is 65-70\n  // SQLite will only give us uppercase hex\n  return charCode < 65 ? (charCode - 48) : (charCode - 55);\n}\n\n\n// Example:\n// pragma encoding=utf8;\n// select hex('A');\n// returns '41'\nfunction parseHexUtf8(str, start, end) {\n  var result = '';\n  while (start < end) {\n    result += String.fromCharCode(\n      (hexToInt(str.charCodeAt(start++)) << 4) |\n        hexToInt(str.charCodeAt(start++)));\n  }\n  return result;\n}\n\n// Example:\n// pragma encoding=utf16;\n// select hex('A');\n// returns '4100'\n// notice that the 00 comes after the 41 (i.e. it's swizzled)\nfunction parseHexUtf16(str, start, end) {\n  var result = '';\n  while (start < end) {\n    // UTF-16, so swizzle the bytes\n    result += String.fromCharCode(\n      (hexToInt(str.charCodeAt(start + 2)) << 12) |\n        (hexToInt(str.charCodeAt(start + 3)) << 8) |\n        (hexToInt(str.charCodeAt(start)) << 4) |\n        hexToInt(str.charCodeAt(start + 1)));\n    start += 4;\n  }\n  return result;\n}\n\nfunction parseHexString(str, encoding) {\n  if (encoding === 'UTF-8') {\n    return decodeUtf8(parseHexUtf8(str, 0, str.length));\n  } else {\n    return parseHexUtf16(str, 0, str.length);\n  }\n}\n\nfunction quote(str) {\n  return \"'\" + str + \"'\";\n}\n\nvar ADAPTER_VERSION$1 = 7; // used to manage migrations\n\n// The object stores created for each database\n// DOC_STORE stores the document meta data, its revision history and state\nvar DOC_STORE$1 = quote('document-store');\n// BY_SEQ_STORE stores a particular version of a document, keyed by its\n// sequence id\nvar BY_SEQ_STORE$1 = quote('by-sequence');\n// Where we store attachments\nvar ATTACH_STORE$1 = quote('attach-store');\nvar LOCAL_STORE$1 = quote('local-store');\nvar META_STORE$1 = quote('metadata-store');\n// where we store many-to-many relations between attachment\n// digests and seqs\nvar ATTACH_AND_SEQ_STORE$1 = quote('attach-seq-store');\n\n// escapeBlob and unescapeBlob are workarounds for a websql bug:\n// https://code.google.com/p/chromium/issues/detail?id=422690\n// https://bugs.webkit.org/show_bug.cgi?id=137637\n// The goal is to never actually insert the \\u0000 character\n// in the database.\nfunction escapeBlob(str) {\n  return str\n    .replace(/\\u0002/g, '\\u0002\\u0002')\n    .replace(/\\u0001/g, '\\u0001\\u0002')\n    .replace(/\\u0000/g, '\\u0001\\u0001');\n}\n\nfunction unescapeBlob(str) {\n  return str\n    .replace(/\\u0001\\u0001/g, '\\u0000')\n    .replace(/\\u0001\\u0002/g, '\\u0001')\n    .replace(/\\u0002\\u0002/g, '\\u0002');\n}\n\nfunction stringifyDoc(doc) {\n  // don't bother storing the id/rev. it uses lots of space,\n  // in persistent map/reduce especially\n  delete doc._id;\n  delete doc._rev;\n  return JSON.stringify(doc);\n}\n\nfunction unstringifyDoc(doc, id, rev) {\n  doc = JSON.parse(doc);\n  doc._id = id;\n  doc._rev = rev;\n  return doc;\n}\n\n// question mark groups IN queries, e.g. 3 -> '(?,?,?)'\nfunction qMarks(num) {\n  var s = '(';\n  while (num--) {\n    s += '?';\n    if (num) {\n      s += ',';\n    }\n  }\n  return s + ')';\n}\n\nfunction select(selector, table, joiner, where, orderBy) {\n  return 'SELECT ' + selector + ' FROM ' +\n    (typeof table === 'string' ? table : table.join(' JOIN ')) +\n    (joiner ? (' ON ' + joiner) : '') +\n    (where ? (' WHERE ' +\n    (typeof where === 'string' ? where : where.join(' AND '))) : '') +\n    (orderBy ? (' ORDER BY ' + orderBy) : '');\n}\n\nfunction compactRevs$1(revs, docId, tx) {\n\n  if (!revs.length) {\n    return;\n  }\n\n  var numDone = 0;\n  var seqs = [];\n\n  function checkDone() {\n    if (++numDone === revs.length) { // done\n      deleteOrphans();\n    }\n  }\n\n  function deleteOrphans() {\n    // find orphaned attachment digests\n\n    if (!seqs.length) {\n      return;\n    }\n\n    var sql = 'SELECT DISTINCT digest AS digest FROM ' +\n      ATTACH_AND_SEQ_STORE$1 + ' WHERE seq IN ' + qMarks(seqs.length);\n\n    tx.executeSql(sql, seqs, function (tx, res) {\n\n      var digestsToCheck = [];\n      for (var i = 0; i < res.rows.length; i++) {\n        digestsToCheck.push(res.rows.item(i).digest);\n      }\n      if (!digestsToCheck.length) {\n        return;\n      }\n\n      var sql = 'DELETE FROM ' + ATTACH_AND_SEQ_STORE$1 +\n        ' WHERE seq IN (' +\n        seqs.map(function () { return '?'; }).join(',') +\n        ')';\n      tx.executeSql(sql, seqs, function (tx) {\n\n        var sql = 'SELECT digest FROM ' + ATTACH_AND_SEQ_STORE$1 +\n          ' WHERE digest IN (' +\n          digestsToCheck.map(function () { return '?'; }).join(',') +\n          ')';\n        tx.executeSql(sql, digestsToCheck, function (tx, res) {\n          var nonOrphanedDigests = new _Set();\n          for (var i = 0; i < res.rows.length; i++) {\n            nonOrphanedDigests.add(res.rows.item(i).digest);\n          }\n          digestsToCheck.forEach(function (digest) {\n            if (nonOrphanedDigests.has(digest)) {\n              return;\n            }\n            tx.executeSql(\n              'DELETE FROM ' + ATTACH_AND_SEQ_STORE$1 + ' WHERE digest=?',\n              [digest]);\n            tx.executeSql(\n              'DELETE FROM ' + ATTACH_STORE$1 + ' WHERE digest=?', [digest]);\n          });\n        });\n      });\n    });\n  }\n\n  // update by-seq and attach stores in parallel\n  revs.forEach(function (rev) {\n    var sql = 'SELECT seq FROM ' + BY_SEQ_STORE$1 +\n      ' WHERE doc_id=? AND rev=?';\n\n    tx.executeSql(sql, [docId, rev], function (tx, res) {\n      if (!res.rows.length) { // already deleted\n        return checkDone();\n      }\n      var seq = res.rows.item(0).seq;\n      seqs.push(seq);\n\n      tx.executeSql(\n        'DELETE FROM ' + BY_SEQ_STORE$1 + ' WHERE seq=?', [seq], checkDone);\n    });\n  });\n}\n\nfunction websqlError(callback) {\n  return function (event) {\n    guardedConsole('error', 'WebSQL threw an error', event);\n    // event may actually be a SQLError object, so report is as such\n    var errorNameMatch = event && event.constructor.toString()\n        .match(/function ([^\\(]+)/);\n    var errorName = (errorNameMatch && errorNameMatch[1]) || event.type;\n    var errorReason = event.target || event.message;\n    callback(createError(WSQ_ERROR, errorReason, errorName));\n  };\n}\n\nfunction getSize(opts) {\n  if ('size' in opts) {\n    // triggers immediate popup in iOS, fixes #2347\n    // e.g. 5000001 asks for 5 MB, 10000001 asks for 10 MB,\n    return opts.size * 1000000;\n  }\n  // In iOS, doesn't matter as long as it's <= 5000000.\n  // Except that if you request too much, our tests fail\n  // because of the native \"do you accept?\" popup.\n  // In Android <=4.3, this value is actually used as an\n  // honest-to-god ceiling for data, so we need to\n  // set it to a decently high number.\n  var isAndroid = typeof navigator !== 'undefined' &&\n    /Android/.test(navigator.userAgent);\n  return isAndroid ? 5000000 : 1; // in PhantomJS, if you use 0 it will crash\n}\n\nfunction websqlBulkDocs(dbOpts, req, opts, api, db, websqlChanges, callback) {\n  var newEdits = opts.new_edits;\n  var userDocs = req.docs;\n\n  // Parse the docs, give them a sequence number for the result\n  var docInfos = userDocs.map(function (doc) {\n    if (doc._id && isLocalId(doc._id)) {\n      return doc;\n    }\n    var newDoc = parseDoc(doc, newEdits);\n    return newDoc;\n  });\n\n  var docInfoErrors = docInfos.filter(function (docInfo) {\n    return docInfo.error;\n  });\n  if (docInfoErrors.length) {\n    return callback(docInfoErrors[0]);\n  }\n\n  var tx;\n  var results = new Array(docInfos.length);\n  var fetchedDocs = new _Map();\n\n  var preconditionErrored;\n  function complete() {\n    if (preconditionErrored) {\n      return callback(preconditionErrored);\n    }\n    websqlChanges.notify(api._name);\n    api._docCount = -1; // invalidate\n    callback(null, results);\n  }\n\n  function verifyAttachment(digest, callback) {\n    var sql = 'SELECT count(*) as cnt FROM ' + ATTACH_STORE$1 +\n      ' WHERE digest=?';\n    tx.executeSql(sql, [digest], function (tx, result) {\n      if (result.rows.item(0).cnt === 0) {\n        var err = createError(MISSING_STUB,\n          'unknown stub attachment with digest ' +\n          digest);\n        callback(err);\n      } else {\n        callback();\n      }\n    });\n  }\n\n  function verifyAttachments(finish) {\n    var digests = [];\n    docInfos.forEach(function (docInfo) {\n      if (docInfo.data && docInfo.data._attachments) {\n        Object.keys(docInfo.data._attachments).forEach(function (filename) {\n          var att = docInfo.data._attachments[filename];\n          if (att.stub) {\n            digests.push(att.digest);\n          }\n        });\n      }\n    });\n    if (!digests.length) {\n      return finish();\n    }\n    var numDone = 0;\n    var err;\n\n    function checkDone() {\n      if (++numDone === digests.length) {\n        finish(err);\n      }\n    }\n    digests.forEach(function (digest) {\n      verifyAttachment(digest, function (attErr) {\n        if (attErr && !err) {\n          err = attErr;\n        }\n        checkDone();\n      });\n    });\n  }\n\n  function writeDoc(docInfo, winningRev, winningRevIsDeleted, newRevIsDeleted,\n                    isUpdate, delta, resultsIdx, callback) {\n\n    function finish() {\n      var data = docInfo.data;\n      var deletedInt = newRevIsDeleted ? 1 : 0;\n\n      var id = data._id;\n      var rev = data._rev;\n      var json = stringifyDoc(data);\n      var sql = 'INSERT INTO ' + BY_SEQ_STORE$1 +\n        ' (doc_id, rev, json, deleted) VALUES (?, ?, ?, ?);';\n      var sqlArgs = [id, rev, json, deletedInt];\n\n      // map seqs to attachment digests, which\n      // we will need later during compaction\n      function insertAttachmentMappings(seq, callback) {\n        var attsAdded = 0;\n        var attsToAdd = Object.keys(data._attachments || {});\n\n        if (!attsToAdd.length) {\n          return callback();\n        }\n        function checkDone() {\n          if (++attsAdded === attsToAdd.length) {\n            callback();\n          }\n          return false; // ack handling a constraint error\n        }\n        function add(att) {\n          var sql = 'INSERT INTO ' + ATTACH_AND_SEQ_STORE$1 +\n            ' (digest, seq) VALUES (?,?)';\n          var sqlArgs = [data._attachments[att].digest, seq];\n          tx.executeSql(sql, sqlArgs, checkDone, checkDone);\n          // second callback is for a constaint error, which we ignore\n          // because this docid/rev has already been associated with\n          // the digest (e.g. when new_edits == false)\n        }\n        for (var i = 0; i < attsToAdd.length; i++) {\n          add(attsToAdd[i]); // do in parallel\n        }\n      }\n\n      tx.executeSql(sql, sqlArgs, function (tx, result) {\n        var seq = result.insertId;\n        insertAttachmentMappings(seq, function () {\n          dataWritten(tx, seq);\n        });\n      }, function () {\n        // constraint error, recover by updating instead (see #1638)\n        var fetchSql = select('seq', BY_SEQ_STORE$1, null,\n          'doc_id=? AND rev=?');\n        tx.executeSql(fetchSql, [id, rev], function (tx, res) {\n          var seq = res.rows.item(0).seq;\n          var sql = 'UPDATE ' + BY_SEQ_STORE$1 +\n            ' SET json=?, deleted=? WHERE doc_id=? AND rev=?;';\n          var sqlArgs = [json, deletedInt, id, rev];\n          tx.executeSql(sql, sqlArgs, function (tx) {\n            insertAttachmentMappings(seq, function () {\n              dataWritten(tx, seq);\n            });\n          });\n        });\n        return false; // ack that we've handled the error\n      });\n    }\n\n    function collectResults(attachmentErr) {\n      if (!err) {\n        if (attachmentErr) {\n          err = attachmentErr;\n          callback(err);\n        } else if (recv === attachments.length) {\n          finish();\n        }\n      }\n    }\n\n    var err = null;\n    var recv = 0;\n\n    docInfo.data._id = docInfo.metadata.id;\n    docInfo.data._rev = docInfo.metadata.rev;\n    var attachments = Object.keys(docInfo.data._attachments || {});\n\n\n    if (newRevIsDeleted) {\n      docInfo.data._deleted = true;\n    }\n\n    function attachmentSaved(err) {\n      recv++;\n      collectResults(err);\n    }\n\n    attachments.forEach(function (key) {\n      var att = docInfo.data._attachments[key];\n      if (!att.stub) {\n        var data = att.data;\n        delete att.data;\n        att.revpos = parseInt(winningRev, 10);\n        var digest = att.digest;\n        saveAttachment(digest, data, attachmentSaved);\n      } else {\n        recv++;\n        collectResults();\n      }\n    });\n\n    if (!attachments.length) {\n      finish();\n    }\n\n    function dataWritten(tx, seq) {\n      var id = docInfo.metadata.id;\n\n      var revsToCompact = docInfo.stemmedRevs || [];\n      if (isUpdate && api.auto_compaction) {\n        revsToCompact = compactTree(docInfo.metadata).concat(revsToCompact);\n      }\n      if (revsToCompact.length) {\n        compactRevs$1(revsToCompact, id, tx);\n      }\n\n      docInfo.metadata.seq = seq;\n      delete docInfo.metadata.rev;\n\n      var sql = isUpdate ?\n      'UPDATE ' + DOC_STORE$1 +\n      ' SET json=?, max_seq=?, winningseq=' +\n      '(SELECT seq FROM ' + BY_SEQ_STORE$1 +\n      ' WHERE doc_id=' + DOC_STORE$1 + '.id AND rev=?) WHERE id=?'\n        : 'INSERT INTO ' + DOC_STORE$1 +\n      ' (id, winningseq, max_seq, json) VALUES (?,?,?,?);';\n      var metadataStr = safeJsonStringify(docInfo.metadata);\n      var params = isUpdate ?\n        [metadataStr, seq, winningRev, id] :\n        [id, seq, seq, metadataStr];\n      tx.executeSql(sql, params, function () {\n        results[resultsIdx] = {\n          ok: true,\n          id: docInfo.metadata.id,\n          rev: winningRev\n        };\n        fetchedDocs.set(id, docInfo.metadata);\n        callback();\n      });\n    }\n  }\n\n  function websqlProcessDocs() {\n    processDocs(dbOpts.revs_limit, docInfos, api, fetchedDocs, tx,\n                results, writeDoc, opts);\n  }\n\n  function fetchExistingDocs(callback) {\n    if (!docInfos.length) {\n      return callback();\n    }\n\n    var numFetched = 0;\n\n    function checkDone() {\n      if (++numFetched === docInfos.length) {\n        callback();\n      }\n    }\n\n    docInfos.forEach(function (docInfo) {\n      if (docInfo._id && isLocalId(docInfo._id)) {\n        return checkDone(); // skip local docs\n      }\n      var id = docInfo.metadata.id;\n      tx.executeSql('SELECT json FROM ' + DOC_STORE$1 +\n      ' WHERE id = ?', [id], function (tx, result) {\n        if (result.rows.length) {\n          var metadata = safeJsonParse(result.rows.item(0).json);\n          fetchedDocs.set(id, metadata);\n        }\n        checkDone();\n      });\n    });\n  }\n\n  function saveAttachment(digest, data, callback) {\n    var sql = 'SELECT digest FROM ' + ATTACH_STORE$1 + ' WHERE digest=?';\n    tx.executeSql(sql, [digest], function (tx, result) {\n      if (result.rows.length) { // attachment already exists\n        return callback();\n      }\n      // we could just insert before selecting and catch the error,\n      // but my hunch is that it's cheaper not to serialize the blob\n      // from JS to C if we don't have to (TODO: confirm this)\n      sql = 'INSERT INTO ' + ATTACH_STORE$1 +\n      ' (digest, body, escaped) VALUES (?,?,1)';\n      tx.executeSql(sql, [digest, escapeBlob(data)], function () {\n        callback();\n      }, function () {\n        // ignore constaint errors, means it already exists\n        callback();\n        return false; // ack we handled the error\n      });\n    });\n  }\n\n  preprocessAttachments(docInfos, 'binary', function (err) {\n    if (err) {\n      return callback(err);\n    }\n    db.transaction(function (txn) {\n      tx = txn;\n      verifyAttachments(function (err) {\n        if (err) {\n          preconditionErrored = err;\n        } else {\n          fetchExistingDocs(websqlProcessDocs);\n        }\n      });\n    }, websqlError(callback), complete);\n  });\n}\n\nvar cachedDatabases = new _Map();\n\n// openDatabase passed in through opts (e.g. for node-websql)\nfunction openDatabaseWithOpts(opts) {\n  return opts.websql(opts.name, opts.version, opts.description, opts.size);\n}\n\nfunction openDBSafely(opts) {\n  try {\n    return {\n      db: openDatabaseWithOpts(opts)\n    };\n  } catch (err) {\n    return {\n      error: err\n    };\n  }\n}\n\nfunction openDB$1(opts) {\n  var cachedResult = cachedDatabases.get(opts.name);\n  if (!cachedResult) {\n    cachedResult = openDBSafely(opts);\n    cachedDatabases.set(opts.name, cachedResult);\n  }\n  return cachedResult;\n}\n\nvar websqlChanges = new Changes$1();\n\nfunction fetchAttachmentsIfNecessary$1(doc, opts, api, txn, cb) {\n  var attachments = Object.keys(doc._attachments || {});\n  if (!attachments.length) {\n    return cb && cb();\n  }\n  var numDone = 0;\n\n  function checkDone() {\n    if (++numDone === attachments.length && cb) {\n      cb();\n    }\n  }\n\n  function fetchAttachment(doc, att) {\n    var attObj = doc._attachments[att];\n    var attOpts = {binary: opts.binary, ctx: txn};\n    api._getAttachment(doc._id, att, attObj, attOpts, function (_, data) {\n      doc._attachments[att] = jsExtend.extend(\n        pick(attObj, ['digest', 'content_type']),\n        { data: data }\n      );\n      checkDone();\n    });\n  }\n\n  attachments.forEach(function (att) {\n    if (opts.attachments && opts.include_docs) {\n      fetchAttachment(doc, att);\n    } else {\n      doc._attachments[att].stub = true;\n      checkDone();\n    }\n  });\n}\n\nvar POUCH_VERSION = 1;\n\n// these indexes cover the ground for most allDocs queries\nvar BY_SEQ_STORE_DELETED_INDEX_SQL =\n  'CREATE INDEX IF NOT EXISTS \\'by-seq-deleted-idx\\' ON ' +\n  BY_SEQ_STORE$1 + ' (seq, deleted)';\nvar BY_SEQ_STORE_DOC_ID_REV_INDEX_SQL =\n  'CREATE UNIQUE INDEX IF NOT EXISTS \\'by-seq-doc-id-rev\\' ON ' +\n    BY_SEQ_STORE$1 + ' (doc_id, rev)';\nvar DOC_STORE_WINNINGSEQ_INDEX_SQL =\n  'CREATE INDEX IF NOT EXISTS \\'doc-winningseq-idx\\' ON ' +\n  DOC_STORE$1 + ' (winningseq)';\nvar ATTACH_AND_SEQ_STORE_SEQ_INDEX_SQL =\n  'CREATE INDEX IF NOT EXISTS \\'attach-seq-seq-idx\\' ON ' +\n    ATTACH_AND_SEQ_STORE$1 + ' (seq)';\nvar ATTACH_AND_SEQ_STORE_ATTACH_INDEX_SQL =\n  'CREATE UNIQUE INDEX IF NOT EXISTS \\'attach-seq-digest-idx\\' ON ' +\n    ATTACH_AND_SEQ_STORE$1 + ' (digest, seq)';\n\nvar DOC_STORE_AND_BY_SEQ_JOINER = BY_SEQ_STORE$1 +\n  '.seq = ' + DOC_STORE$1 + '.winningseq';\n\nvar SELECT_DOCS = BY_SEQ_STORE$1 + '.seq AS seq, ' +\n  BY_SEQ_STORE$1 + '.deleted AS deleted, ' +\n  BY_SEQ_STORE$1 + '.json AS data, ' +\n  BY_SEQ_STORE$1 + '.rev AS rev, ' +\n  DOC_STORE$1 + '.json AS metadata';\n\nfunction WebSqlPouch$1(opts, callback) {\n  var api = this;\n  var instanceId = null;\n  var size = getSize(opts);\n  var idRequests = [];\n  var encoding;\n\n  api._docCount = -1; // cache sqlite count(*) for performance\n  api._name = opts.name;\n\n  // extend the options here, because sqlite plugin has a ton of options\n  // and they are constantly changing, so it's more prudent to allow anything\n  var websqlOpts = jsExtend.extend({}, opts, {\n    version: POUCH_VERSION,\n    description: opts.name,\n    size: size\n  });\n  var openDBResult = openDB$1(websqlOpts);\n  if (openDBResult.error) {\n    return websqlError(callback)(openDBResult.error);\n  }\n  var db = openDBResult.db;\n  if (typeof db.readTransaction !== 'function') {\n    // doesn't exist in sqlite plugin\n    db.readTransaction = db.transaction;\n  }\n\n  function dbCreated() {\n    // note the db name in case the browser upgrades to idb\n    if (hasLocalStorage()) {\n      window.localStorage['_pouch__websqldb_' + api._name] = true;\n    }\n    callback(null, api);\n  }\n\n  // In this migration, we added the 'deleted' and 'local' columns to the\n  // by-seq and doc store tables.\n  // To preserve existing user data, we re-process all the existing JSON\n  // and add these values.\n  // Called migration2 because it corresponds to adapter version (db_version) #2\n  function runMigration2(tx, callback) {\n    // index used for the join in the allDocs query\n    tx.executeSql(DOC_STORE_WINNINGSEQ_INDEX_SQL);\n\n    tx.executeSql('ALTER TABLE ' + BY_SEQ_STORE$1 +\n      ' ADD COLUMN deleted TINYINT(1) DEFAULT 0', [], function () {\n      tx.executeSql(BY_SEQ_STORE_DELETED_INDEX_SQL);\n      tx.executeSql('ALTER TABLE ' + DOC_STORE$1 +\n        ' ADD COLUMN local TINYINT(1) DEFAULT 0', [], function () {\n        tx.executeSql('CREATE INDEX IF NOT EXISTS \\'doc-store-local-idx\\' ON ' +\n          DOC_STORE$1 + ' (local, id)');\n\n        var sql = 'SELECT ' + DOC_STORE$1 + '.winningseq AS seq, ' + DOC_STORE$1 +\n          '.json AS metadata FROM ' + BY_SEQ_STORE$1 + ' JOIN ' + DOC_STORE$1 +\n          ' ON ' + BY_SEQ_STORE$1 + '.seq = ' + DOC_STORE$1 + '.winningseq';\n\n        tx.executeSql(sql, [], function (tx, result) {\n\n          var deleted = [];\n          var local = [];\n\n          for (var i = 0; i < result.rows.length; i++) {\n            var item = result.rows.item(i);\n            var seq = item.seq;\n            var metadata = JSON.parse(item.metadata);\n            if (isDeleted(metadata)) {\n              deleted.push(seq);\n            }\n            if (isLocalId(metadata.id)) {\n              local.push(metadata.id);\n            }\n          }\n          tx.executeSql('UPDATE ' + DOC_STORE$1 + 'SET local = 1 WHERE id IN ' +\n            qMarks(local.length), local, function () {\n            tx.executeSql('UPDATE ' + BY_SEQ_STORE$1 +\n              ' SET deleted = 1 WHERE seq IN ' +\n              qMarks(deleted.length), deleted, callback);\n          });\n        });\n      });\n    });\n  }\n\n  // in this migration, we make all the local docs unversioned\n  function runMigration3(tx, callback) {\n    var local = 'CREATE TABLE IF NOT EXISTS ' + LOCAL_STORE$1 +\n      ' (id UNIQUE, rev, json)';\n    tx.executeSql(local, [], function () {\n      var sql = 'SELECT ' + DOC_STORE$1 + '.id AS id, ' +\n        BY_SEQ_STORE$1 + '.json AS data ' +\n        'FROM ' + BY_SEQ_STORE$1 + ' JOIN ' +\n        DOC_STORE$1 + ' ON ' + BY_SEQ_STORE$1 + '.seq = ' +\n        DOC_STORE$1 + '.winningseq WHERE local = 1';\n      tx.executeSql(sql, [], function (tx, res) {\n        var rows = [];\n        for (var i = 0; i < res.rows.length; i++) {\n          rows.push(res.rows.item(i));\n        }\n        function doNext() {\n          if (!rows.length) {\n            return callback(tx);\n          }\n          var row = rows.shift();\n          var rev = JSON.parse(row.data)._rev;\n          tx.executeSql('INSERT INTO ' + LOCAL_STORE$1 +\n              ' (id, rev, json) VALUES (?,?,?)',\n              [row.id, rev, row.data], function (tx) {\n            tx.executeSql('DELETE FROM ' + DOC_STORE$1 + ' WHERE id=?',\n                [row.id], function (tx) {\n              tx.executeSql('DELETE FROM ' + BY_SEQ_STORE$1 + ' WHERE seq=?',\n                  [row.seq], function () {\n                doNext();\n              });\n            });\n          });\n        }\n        doNext();\n      });\n    });\n  }\n\n  // in this migration, we remove doc_id_rev and just use rev\n  function runMigration4(tx, callback) {\n\n    function updateRows(rows) {\n      function doNext() {\n        if (!rows.length) {\n          return callback(tx);\n        }\n        var row = rows.shift();\n        var doc_id_rev = parseHexString(row.hex, encoding);\n        var idx = doc_id_rev.lastIndexOf('::');\n        var doc_id = doc_id_rev.substring(0, idx);\n        var rev = doc_id_rev.substring(idx + 2);\n        var sql = 'UPDATE ' + BY_SEQ_STORE$1 +\n          ' SET doc_id=?, rev=? WHERE doc_id_rev=?';\n        tx.executeSql(sql, [doc_id, rev, doc_id_rev], function () {\n          doNext();\n        });\n      }\n      doNext();\n    }\n\n    var sql = 'ALTER TABLE ' + BY_SEQ_STORE$1 + ' ADD COLUMN doc_id';\n    tx.executeSql(sql, [], function (tx) {\n      var sql = 'ALTER TABLE ' + BY_SEQ_STORE$1 + ' ADD COLUMN rev';\n      tx.executeSql(sql, [], function (tx) {\n        tx.executeSql(BY_SEQ_STORE_DOC_ID_REV_INDEX_SQL, [], function (tx) {\n          var sql = 'SELECT hex(doc_id_rev) as hex FROM ' + BY_SEQ_STORE$1;\n          tx.executeSql(sql, [], function (tx, res) {\n            var rows = [];\n            for (var i = 0; i < res.rows.length; i++) {\n              rows.push(res.rows.item(i));\n            }\n            updateRows(rows);\n          });\n        });\n      });\n    });\n  }\n\n  // in this migration, we add the attach_and_seq table\n  // for issue #2818\n  function runMigration5(tx, callback) {\n\n    function migrateAttsAndSeqs(tx) {\n      // need to actually populate the table. this is the expensive part,\n      // so as an optimization, check first that this database even\n      // contains attachments\n      var sql = 'SELECT COUNT(*) AS cnt FROM ' + ATTACH_STORE$1;\n      tx.executeSql(sql, [], function (tx, res) {\n        var count = res.rows.item(0).cnt;\n        if (!count) {\n          return callback(tx);\n        }\n\n        var offset = 0;\n        var pageSize = 10;\n        function nextPage() {\n          var sql = select(\n            SELECT_DOCS + ', ' + DOC_STORE$1 + '.id AS id',\n            [DOC_STORE$1, BY_SEQ_STORE$1],\n            DOC_STORE_AND_BY_SEQ_JOINER,\n            null,\n            DOC_STORE$1 + '.id '\n          );\n          sql += ' LIMIT ' + pageSize + ' OFFSET ' + offset;\n          offset += pageSize;\n          tx.executeSql(sql, [], function (tx, res) {\n            if (!res.rows.length) {\n              return callback(tx);\n            }\n            var digestSeqs = {};\n            function addDigestSeq(digest, seq) {\n              // uniq digest/seq pairs, just in case there are dups\n              var seqs = digestSeqs[digest] = (digestSeqs[digest] || []);\n              if (seqs.indexOf(seq) === -1) {\n                seqs.push(seq);\n              }\n            }\n            for (var i = 0; i < res.rows.length; i++) {\n              var row = res.rows.item(i);\n              var doc = unstringifyDoc(row.data, row.id, row.rev);\n              var atts = Object.keys(doc._attachments || {});\n              for (var j = 0; j < atts.length; j++) {\n                var att = doc._attachments[atts[j]];\n                addDigestSeq(att.digest, row.seq);\n              }\n            }\n            var digestSeqPairs = [];\n            Object.keys(digestSeqs).forEach(function (digest) {\n              var seqs = digestSeqs[digest];\n              seqs.forEach(function (seq) {\n                digestSeqPairs.push([digest, seq]);\n              });\n            });\n            if (!digestSeqPairs.length) {\n              return nextPage();\n            }\n            var numDone = 0;\n            digestSeqPairs.forEach(function (pair) {\n              var sql = 'INSERT INTO ' + ATTACH_AND_SEQ_STORE$1 +\n                ' (digest, seq) VALUES (?,?)';\n              tx.executeSql(sql, pair, function () {\n                if (++numDone === digestSeqPairs.length) {\n                  nextPage();\n                }\n              });\n            });\n          });\n        }\n        nextPage();\n      });\n    }\n\n    var attachAndRev = 'CREATE TABLE IF NOT EXISTS ' +\n      ATTACH_AND_SEQ_STORE$1 + ' (digest, seq INTEGER)';\n    tx.executeSql(attachAndRev, [], function (tx) {\n      tx.executeSql(\n        ATTACH_AND_SEQ_STORE_ATTACH_INDEX_SQL, [], function (tx) {\n          tx.executeSql(\n            ATTACH_AND_SEQ_STORE_SEQ_INDEX_SQL, [],\n            migrateAttsAndSeqs);\n        });\n    });\n  }\n\n  // in this migration, we use escapeBlob() and unescapeBlob()\n  // instead of reading out the binary as HEX, which is slow\n  function runMigration6(tx, callback) {\n    var sql = 'ALTER TABLE ' + ATTACH_STORE$1 +\n      ' ADD COLUMN escaped TINYINT(1) DEFAULT 0';\n    tx.executeSql(sql, [], callback);\n  }\n\n  // issue #3136, in this migration we need a \"latest seq\" as well\n  // as the \"winning seq\" in the doc store\n  function runMigration7(tx, callback) {\n    var sql = 'ALTER TABLE ' + DOC_STORE$1 +\n      ' ADD COLUMN max_seq INTEGER';\n    tx.executeSql(sql, [], function (tx) {\n      var sql = 'UPDATE ' + DOC_STORE$1 + ' SET max_seq=(SELECT MAX(seq) FROM ' +\n        BY_SEQ_STORE$1 + ' WHERE doc_id=id)';\n      tx.executeSql(sql, [], function (tx) {\n        // add unique index after filling, else we'll get a constraint\n        // error when we do the ALTER TABLE\n        var sql =\n          'CREATE UNIQUE INDEX IF NOT EXISTS \\'doc-max-seq-idx\\' ON ' +\n          DOC_STORE$1 + ' (max_seq)';\n        tx.executeSql(sql, [], callback);\n      });\n    });\n  }\n\n  function checkEncoding(tx, cb) {\n    // UTF-8 on chrome/android, UTF-16 on safari < 7.1\n    tx.executeSql('SELECT HEX(\"a\") AS hex', [], function (tx, res) {\n        var hex = res.rows.item(0).hex;\n        encoding = hex.length === 2 ? 'UTF-8' : 'UTF-16';\n        cb();\n      }\n    );\n  }\n\n  function onGetInstanceId() {\n    while (idRequests.length > 0) {\n      var idCallback = idRequests.pop();\n      idCallback(null, instanceId);\n    }\n  }\n\n  function onGetVersion(tx, dbVersion) {\n    if (dbVersion === 0) {\n      // initial schema\n\n      var meta = 'CREATE TABLE IF NOT EXISTS ' + META_STORE$1 +\n        ' (dbid, db_version INTEGER)';\n      var attach = 'CREATE TABLE IF NOT EXISTS ' + ATTACH_STORE$1 +\n        ' (digest UNIQUE, escaped TINYINT(1), body BLOB)';\n      var attachAndRev = 'CREATE TABLE IF NOT EXISTS ' +\n        ATTACH_AND_SEQ_STORE$1 + ' (digest, seq INTEGER)';\n      // TODO: migrate winningseq to INTEGER\n      var doc = 'CREATE TABLE IF NOT EXISTS ' + DOC_STORE$1 +\n        ' (id unique, json, winningseq, max_seq INTEGER UNIQUE)';\n      var seq = 'CREATE TABLE IF NOT EXISTS ' + BY_SEQ_STORE$1 +\n        ' (seq INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, ' +\n        'json, deleted TINYINT(1), doc_id, rev)';\n      var local = 'CREATE TABLE IF NOT EXISTS ' + LOCAL_STORE$1 +\n        ' (id UNIQUE, rev, json)';\n\n      // creates\n      tx.executeSql(attach);\n      tx.executeSql(local);\n      tx.executeSql(attachAndRev, [], function () {\n        tx.executeSql(ATTACH_AND_SEQ_STORE_SEQ_INDEX_SQL);\n        tx.executeSql(ATTACH_AND_SEQ_STORE_ATTACH_INDEX_SQL);\n      });\n      tx.executeSql(doc, [], function () {\n        tx.executeSql(DOC_STORE_WINNINGSEQ_INDEX_SQL);\n        tx.executeSql(seq, [], function () {\n          tx.executeSql(BY_SEQ_STORE_DELETED_INDEX_SQL);\n          tx.executeSql(BY_SEQ_STORE_DOC_ID_REV_INDEX_SQL);\n          tx.executeSql(meta, [], function () {\n            // mark the db version, and new dbid\n            var initSeq = 'INSERT INTO ' + META_STORE$1 +\n              ' (db_version, dbid) VALUES (?,?)';\n            instanceId = uuid();\n            var initSeqArgs = [ADAPTER_VERSION$1, instanceId];\n            tx.executeSql(initSeq, initSeqArgs, function () {\n              onGetInstanceId();\n            });\n          });\n        });\n      });\n    } else { // version > 0\n\n      var setupDone = function () {\n        var migrated = dbVersion < ADAPTER_VERSION$1;\n        if (migrated) {\n          // update the db version within this transaction\n          tx.executeSql('UPDATE ' + META_STORE$1 + ' SET db_version = ' +\n            ADAPTER_VERSION$1);\n        }\n        // notify db.id() callers\n        var sql = 'SELECT dbid FROM ' + META_STORE$1;\n        tx.executeSql(sql, [], function (tx, result) {\n          instanceId = result.rows.item(0).dbid;\n          onGetInstanceId();\n        });\n      };\n\n      // would love to use promises here, but then websql\n      // ends the transaction early\n      var tasks = [\n        runMigration2,\n        runMigration3,\n        runMigration4,\n        runMigration5,\n        runMigration6,\n        runMigration7,\n        setupDone\n      ];\n\n      // run each migration sequentially\n      var i = dbVersion;\n      var nextMigration = function (tx) {\n        tasks[i - 1](tx, nextMigration);\n        i++;\n      };\n      nextMigration(tx);\n    }\n  }\n\n  function setup() {\n    db.transaction(function (tx) {\n      // first check the encoding\n      checkEncoding(tx, function () {\n        // then get the version\n        fetchVersion(tx);\n      });\n    }, websqlError(callback), dbCreated);\n  }\n\n  function fetchVersion(tx) {\n    var sql = 'SELECT sql FROM sqlite_master WHERE tbl_name = ' + META_STORE$1;\n    tx.executeSql(sql, [], function (tx, result) {\n      if (!result.rows.length) {\n        // database hasn't even been created yet (version 0)\n        onGetVersion(tx, 0);\n      } else if (!/db_version/.test(result.rows.item(0).sql)) {\n        // table was created, but without the new db_version column,\n        // so add it.\n        tx.executeSql('ALTER TABLE ' + META_STORE$1 +\n          ' ADD COLUMN db_version INTEGER', [], function () {\n          // before version 2, this column didn't even exist\n          onGetVersion(tx, 1);\n        });\n      } else { // column exists, we can safely get it\n        tx.executeSql('SELECT db_version FROM ' + META_STORE$1,\n          [], function (tx, result) {\n          var dbVersion = result.rows.item(0).db_version;\n          onGetVersion(tx, dbVersion);\n        });\n      }\n    });\n  }\n\n  setup();\n\n  api.type = function () {\n    return 'websql';\n  };\n\n  api._id = toPromise(function (callback) {\n    callback(null, instanceId);\n  });\n\n  api._info = function (callback) {\n    db.readTransaction(function (tx) {\n      countDocs(tx, function (docCount) {\n        var sql = 'SELECT MAX(seq) AS seq FROM ' + BY_SEQ_STORE$1;\n        tx.executeSql(sql, [], function (tx, res) {\n          var updateSeq = res.rows.item(0).seq || 0;\n          callback(null, {\n            doc_count: docCount,\n            update_seq: updateSeq,\n            websql_encoding: encoding\n          });\n        });\n      });\n    }, websqlError(callback));\n  };\n\n  api._bulkDocs = function (req, reqOpts, callback) {\n    websqlBulkDocs(opts, req, reqOpts, api, db, websqlChanges, callback);\n  };\n\n  api._get = function (id, opts, callback) {\n    var doc;\n    var metadata;\n    var err;\n    var tx = opts.ctx;\n    if (!tx) {\n      return db.readTransaction(function (txn) {\n        api._get(id, jsExtend.extend({ctx: txn}, opts), callback);\n      });\n    }\n\n    function finish() {\n      callback(err, {doc: doc, metadata: metadata, ctx: tx});\n    }\n\n    var sql;\n    var sqlArgs;\n    if (opts.rev) {\n      sql = select(\n        SELECT_DOCS,\n        [DOC_STORE$1, BY_SEQ_STORE$1],\n        DOC_STORE$1 + '.id=' + BY_SEQ_STORE$1 + '.doc_id',\n        [BY_SEQ_STORE$1 + '.doc_id=?', BY_SEQ_STORE$1 + '.rev=?']);\n      sqlArgs = [id, opts.rev];\n    } else {\n      sql = select(\n        SELECT_DOCS,\n        [DOC_STORE$1, BY_SEQ_STORE$1],\n        DOC_STORE_AND_BY_SEQ_JOINER,\n        DOC_STORE$1 + '.id=?');\n      sqlArgs = [id];\n    }\n    tx.executeSql(sql, sqlArgs, function (a, results) {\n      if (!results.rows.length) {\n        err = createError(MISSING_DOC, 'missing');\n        return finish();\n      }\n      var item = results.rows.item(0);\n      metadata = safeJsonParse(item.metadata);\n      if (item.deleted && !opts.rev) {\n        err = createError(MISSING_DOC, 'deleted');\n        return finish();\n      }\n      doc = unstringifyDoc(item.data, metadata.id, item.rev);\n      finish();\n    });\n  };\n\n  function countDocs(tx, callback) {\n\n    if (api._docCount !== -1) {\n      return callback(api._docCount);\n    }\n\n    // count the total rows\n    var sql = select(\n      'COUNT(' + DOC_STORE$1 + '.id) AS \\'num\\'',\n      [DOC_STORE$1, BY_SEQ_STORE$1],\n      DOC_STORE_AND_BY_SEQ_JOINER,\n      BY_SEQ_STORE$1 + '.deleted=0');\n\n    tx.executeSql(sql, [], function (tx, result) {\n      api._docCount = result.rows.item(0).num;\n      callback(api._docCount);\n    });\n  }\n\n  api._allDocs = function (opts, callback) {\n    var results = [];\n    var totalRows;\n\n    var start = 'startkey' in opts ? opts.startkey : false;\n    var end = 'endkey' in opts ? opts.endkey : false;\n    var key = 'key' in opts ? opts.key : false;\n    var descending = 'descending' in opts ? opts.descending : false;\n    var limit = 'limit' in opts ? opts.limit : -1;\n    var offset = 'skip' in opts ? opts.skip : 0;\n    var inclusiveEnd = opts.inclusive_end !== false;\n\n    var sqlArgs = [];\n    var criteria = [];\n\n    if (key !== false) {\n      criteria.push(DOC_STORE$1 + '.id = ?');\n      sqlArgs.push(key);\n    } else if (start !== false || end !== false) {\n      if (start !== false) {\n        criteria.push(DOC_STORE$1 + '.id ' + (descending ? '<=' : '>=') + ' ?');\n        sqlArgs.push(start);\n      }\n      if (end !== false) {\n        var comparator = descending ? '>' : '<';\n        if (inclusiveEnd) {\n          comparator += '=';\n        }\n        criteria.push(DOC_STORE$1 + '.id ' + comparator + ' ?');\n        sqlArgs.push(end);\n      }\n      if (key !== false) {\n        criteria.push(DOC_STORE$1 + '.id = ?');\n        sqlArgs.push(key);\n      }\n    }\n\n    if (opts.deleted !== 'ok') {\n      // report deleted if keys are specified\n      criteria.push(BY_SEQ_STORE$1 + '.deleted = 0');\n    }\n\n    db.readTransaction(function (tx) {\n\n      // first count up the total rows\n      countDocs(tx, function (count) {\n        totalRows = count;\n\n        if (limit === 0) {\n          return;\n        }\n\n        // then actually fetch the documents\n        var sql = select(\n          SELECT_DOCS,\n          [DOC_STORE$1, BY_SEQ_STORE$1],\n          DOC_STORE_AND_BY_SEQ_JOINER,\n          criteria,\n          DOC_STORE$1 + '.id ' + (descending ? 'DESC' : 'ASC')\n          );\n        sql += ' LIMIT ' + limit + ' OFFSET ' + offset;\n\n        tx.executeSql(sql, sqlArgs, function (tx, result) {\n          for (var i = 0, l = result.rows.length; i < l; i++) {\n            var item = result.rows.item(i);\n            var metadata = safeJsonParse(item.metadata);\n            var id = metadata.id;\n            var data = unstringifyDoc(item.data, id, item.rev);\n            var winningRev = data._rev;\n            var doc = {\n              id: id,\n              key: id,\n              value: {rev: winningRev}\n            };\n            if (opts.include_docs) {\n              doc.doc = data;\n              doc.doc._rev = winningRev;\n              if (opts.conflicts) {\n                doc.doc._conflicts = collectConflicts(metadata);\n              }\n              fetchAttachmentsIfNecessary$1(doc.doc, opts, api, tx);\n            }\n            if (item.deleted) {\n              if (opts.deleted === 'ok') {\n                doc.value.deleted = true;\n                doc.doc = null;\n              } else {\n                continue;\n              }\n            }\n            results.push(doc);\n          }\n        });\n      });\n    }, websqlError(callback), function () {\n      callback(null, {\n        total_rows: totalRows,\n        offset: opts.skip,\n        rows: results\n      });\n    });\n  };\n\n  api._changes = function (opts) {\n    opts = clone(opts);\n\n    if (opts.continuous) {\n      var id = api._name + ':' + uuid();\n      websqlChanges.addListener(api._name, id, api, opts);\n      websqlChanges.notify(api._name);\n      return {\n        cancel: function () {\n          websqlChanges.removeListener(api._name, id);\n        }\n      };\n    }\n\n    var descending = opts.descending;\n\n    // Ignore the `since` parameter when `descending` is true\n    opts.since = opts.since && !descending ? opts.since : 0;\n\n    var limit = 'limit' in opts ? opts.limit : -1;\n    if (limit === 0) {\n      limit = 1; // per CouchDB _changes spec\n    }\n\n    var returnDocs;\n    if ('return_docs' in opts) {\n      returnDocs = opts.return_docs;\n    } else if ('returnDocs' in opts) {\n      // TODO: Remove 'returnDocs' in favor of 'return_docs' in a future release\n      returnDocs = opts.returnDocs;\n    } else {\n      returnDocs = true;\n    }\n    var results = [];\n    var numResults = 0;\n\n    function fetchChanges() {\n\n      var selectStmt =\n        DOC_STORE$1 + '.json AS metadata, ' +\n        DOC_STORE$1 + '.max_seq AS maxSeq, ' +\n        BY_SEQ_STORE$1 + '.json AS winningDoc, ' +\n        BY_SEQ_STORE$1 + '.rev AS winningRev ';\n\n      var from = DOC_STORE$1 + ' JOIN ' + BY_SEQ_STORE$1;\n\n      var joiner = DOC_STORE$1 + '.id=' + BY_SEQ_STORE$1 + '.doc_id' +\n        ' AND ' + DOC_STORE$1 + '.winningseq=' + BY_SEQ_STORE$1 + '.seq';\n\n      var criteria = ['maxSeq > ?'];\n      var sqlArgs = [opts.since];\n\n      if (opts.doc_ids) {\n        criteria.push(DOC_STORE$1 + '.id IN ' + qMarks(opts.doc_ids.length));\n        sqlArgs = sqlArgs.concat(opts.doc_ids);\n      }\n\n      var orderBy = 'maxSeq ' + (descending ? 'DESC' : 'ASC');\n\n      var sql = select(selectStmt, from, joiner, criteria, orderBy);\n\n      var filter = filterChange(opts);\n      if (!opts.view && !opts.filter) {\n        // we can just limit in the query\n        sql += ' LIMIT ' + limit;\n      }\n\n      var lastSeq = opts.since || 0;\n      db.readTransaction(function (tx) {\n        tx.executeSql(sql, sqlArgs, function (tx, result) {\n          function reportChange(change) {\n            return function () {\n              opts.onChange(change);\n            };\n          }\n          for (var i = 0, l = result.rows.length; i < l; i++) {\n            var item = result.rows.item(i);\n            var metadata = safeJsonParse(item.metadata);\n            lastSeq = item.maxSeq;\n\n            var doc = unstringifyDoc(item.winningDoc, metadata.id,\n              item.winningRev);\n            var change = opts.processChange(doc, metadata, opts);\n            change.seq = item.maxSeq;\n\n            var filtered = filter(change);\n            if (typeof filtered === 'object') {\n              return opts.complete(filtered);\n            }\n\n            if (filtered) {\n              numResults++;\n              if (returnDocs) {\n                results.push(change);\n              }\n              // process the attachment immediately\n              // for the benefit of live listeners\n              if (opts.attachments && opts.include_docs) {\n                fetchAttachmentsIfNecessary$1(doc, opts, api, tx,\n                  reportChange(change));\n              } else {\n                reportChange(change)();\n              }\n            }\n            if (numResults === limit) {\n              break;\n            }\n          }\n        });\n      }, websqlError(opts.complete), function () {\n        if (!opts.continuous) {\n          opts.complete(null, {\n            results: results,\n            last_seq: lastSeq\n          });\n        }\n      });\n    }\n\n    fetchChanges();\n  };\n\n  api._close = function (callback) {\n    //WebSQL databases do not need to be closed\n    callback();\n  };\n\n  api._getAttachment = function (docId, attachId, attachment, opts, callback) {\n    var res;\n    var tx = opts.ctx;\n    var digest = attachment.digest;\n    var type = attachment.content_type;\n    var sql = 'SELECT escaped, ' +\n      'CASE WHEN escaped = 1 THEN body ELSE HEX(body) END AS body FROM ' +\n      ATTACH_STORE$1 + ' WHERE digest=?';\n    tx.executeSql(sql, [digest], function (tx, result) {\n      // websql has a bug where \\u0000 causes early truncation in strings\n      // and blobs. to work around this, we used to use the hex() function,\n      // but that's not performant. after migration 6, we remove \\u0000\n      // and add it back in afterwards\n      var item = result.rows.item(0);\n      var data = item.escaped ? unescapeBlob(item.body) :\n        parseHexString(item.body, encoding);\n      if (opts.binary) {\n        res = binStringToBluffer(data, type);\n      } else {\n        res = btoa$1(data);\n      }\n      callback(null, res);\n    });\n  };\n\n  api._getRevisionTree = function (docId, callback) {\n    db.readTransaction(function (tx) {\n      var sql = 'SELECT json AS metadata FROM ' + DOC_STORE$1 + ' WHERE id = ?';\n      tx.executeSql(sql, [docId], function (tx, result) {\n        if (!result.rows.length) {\n          callback(createError(MISSING_DOC));\n        } else {\n          var data = safeJsonParse(result.rows.item(0).metadata);\n          callback(null, data.rev_tree);\n        }\n      });\n    });\n  };\n\n  api._doCompaction = function (docId, revs, callback) {\n    if (!revs.length) {\n      return callback();\n    }\n    db.transaction(function (tx) {\n\n      // update doc store\n      var sql = 'SELECT json AS metadata FROM ' + DOC_STORE$1 + ' WHERE id = ?';\n      tx.executeSql(sql, [docId], function (tx, result) {\n        var metadata = safeJsonParse(result.rows.item(0).metadata);\n        traverseRevTree(metadata.rev_tree, function (isLeaf, pos,\n                                                           revHash, ctx, opts) {\n          var rev = pos + '-' + revHash;\n          if (revs.indexOf(rev) !== -1) {\n            opts.status = 'missing';\n          }\n        });\n\n        var sql = 'UPDATE ' + DOC_STORE$1 + ' SET json = ? WHERE id = ?';\n        tx.executeSql(sql, [safeJsonStringify(metadata), docId]);\n      });\n\n      compactRevs$1(revs, docId, tx);\n    }, websqlError(callback), function () {\n      callback();\n    });\n  };\n\n  api._getLocal = function (id, callback) {\n    db.readTransaction(function (tx) {\n      var sql = 'SELECT json, rev FROM ' + LOCAL_STORE$1 + ' WHERE id=?';\n      tx.executeSql(sql, [id], function (tx, res) {\n        if (res.rows.length) {\n          var item = res.rows.item(0);\n          var doc = unstringifyDoc(item.json, id, item.rev);\n          callback(null, doc);\n        } else {\n          callback(createError(MISSING_DOC));\n        }\n      });\n    });\n  };\n\n  api._putLocal = function (doc, opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    delete doc._revisions; // ignore this, trust the rev\n    var oldRev = doc._rev;\n    var id = doc._id;\n    var newRev;\n    if (!oldRev) {\n      newRev = doc._rev = '0-1';\n    } else {\n      newRev = doc._rev = '0-' + (parseInt(oldRev.split('-')[1], 10) + 1);\n    }\n    var json = stringifyDoc(doc);\n\n    var ret;\n    function putLocal(tx) {\n      var sql;\n      var values;\n      if (oldRev) {\n        sql = 'UPDATE ' + LOCAL_STORE$1 + ' SET rev=?, json=? ' +\n          'WHERE id=? AND rev=?';\n        values = [newRev, json, id, oldRev];\n      } else {\n        sql = 'INSERT INTO ' + LOCAL_STORE$1 + ' (id, rev, json) VALUES (?,?,?)';\n        values = [id, newRev, json];\n      }\n      tx.executeSql(sql, values, function (tx, res) {\n        if (res.rowsAffected) {\n          ret = {ok: true, id: id, rev: newRev};\n          if (opts.ctx) { // return immediately\n            callback(null, ret);\n          }\n        } else {\n          callback(createError(REV_CONFLICT));\n        }\n      }, function () {\n        callback(createError(REV_CONFLICT));\n        return false; // ack that we handled the error\n      });\n    }\n\n    if (opts.ctx) {\n      putLocal(opts.ctx);\n    } else {\n      db.transaction(putLocal, websqlError(callback), function () {\n        if (ret) {\n          callback(null, ret);\n        }\n      });\n    }\n  };\n\n  api._removeLocal = function (doc, opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    var ret;\n\n    function removeLocal(tx) {\n      var sql = 'DELETE FROM ' + LOCAL_STORE$1 + ' WHERE id=? AND rev=?';\n      var params = [doc._id, doc._rev];\n      tx.executeSql(sql, params, function (tx, res) {\n        if (!res.rowsAffected) {\n          return callback(createError(MISSING_DOC));\n        }\n        ret = {ok: true, id: doc._id, rev: '0-0'};\n        if (opts.ctx) { // return immediately\n          callback(null, ret);\n        }\n      });\n    }\n\n    if (opts.ctx) {\n      removeLocal(opts.ctx);\n    } else {\n      db.transaction(removeLocal, websqlError(callback), function () {\n        if (ret) {\n          callback(null, ret);\n        }\n      });\n    }\n  };\n\n  api._destroy = function (opts, callback) {\n    websqlChanges.removeAllListeners(api._name);\n    db.transaction(function (tx) {\n      var stores = [DOC_STORE$1, BY_SEQ_STORE$1, ATTACH_STORE$1, META_STORE$1,\n        LOCAL_STORE$1, ATTACH_AND_SEQ_STORE$1];\n      stores.forEach(function (store) {\n        tx.executeSql('DROP TABLE IF EXISTS ' + store, []);\n      });\n    }, websqlError(callback), function () {\n      if (hasLocalStorage()) {\n        delete window.localStorage['_pouch__websqldb_' + api._name];\n        delete window.localStorage[api._name];\n      }\n      callback(null, {'ok': true});\n    });\n  };\n}\n\nfunction canOpenTestDB() {\n  try {\n    openDatabase('_pouch_validate_websql', 1, '', 1);\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\n// WKWebView had a bug where WebSQL would throw a DOM Exception 18\n// (see https://bugs.webkit.org/show_bug.cgi?id=137760 and\n// https://github.com/pouchdb/pouchdb/issues/5079)\n// This has been fixed in latest WebKit, so we try to detect it here.\nfunction isValidWebSQL() {\n  // WKWebView UA:\n  //   Mozilla/5.0 (iPhone; CPU iPhone OS 9_2 like Mac OS X)\n  //   AppleWebKit/601.1.46 (KHTML, like Gecko) Mobile/13C75\n  // Chrome for iOS UA:\n  //   Mozilla/5.0 (iPhone; U; CPU iPhone OS 5_1_1 like Mac OS X; en)\n  //   AppleWebKit/534.46.0 (KHTML, like Gecko) CriOS/19.0.1084.60\n  //   Mobile/9B206 Safari/7534.48.3\n  // Firefox for iOS UA:\n  //   Mozilla/5.0 (iPhone; CPU iPhone OS 8_3 like Mac OS X) AppleWebKit/600.1.4\n  //   (KHTML, like Gecko) FxiOS/1.0 Mobile/12F69 Safari/600.1.4\n\n  // indexedDB is null on some UIWebViews and undefined in others\n  // see: https://bugs.webkit.org/show_bug.cgi?id=137034\n  if (typeof indexedDB === 'undefined' || indexedDB === null ||\n      !/iP(hone|od|ad)/.test(navigator.userAgent)) {\n    // definitely not WKWebView, avoid creating an unnecessary database\n    return true;\n  }\n  // Cache the result in LocalStorage. Reason we do this is because if we\n  // call openDatabase() too many times, Safari craps out in SauceLabs and\n  // starts throwing DOM Exception 14s.\n  var hasLS = hasLocalStorage();\n  // Include user agent in the hash, so that if Safari is upgraded, we don't\n  // continually think it's broken.\n  var localStorageKey = '_pouch__websqldb_valid_' + navigator.userAgent;\n  if (hasLS && localStorage[localStorageKey]) {\n    return localStorage[localStorageKey] === '1';\n  }\n  var openedTestDB = canOpenTestDB();\n  if (hasLS) {\n    localStorage[localStorageKey] = openedTestDB ? '1' : '0';\n  }\n  return openedTestDB;\n}\n\nfunction valid() {\n  if (typeof openDatabase !== 'function') {\n    return false;\n  }\n  return isValidWebSQL();\n}\n\nfunction openDB(name, version, description, size) {\n  // Traditional WebSQL API\n  return openDatabase(name, version, description, size);\n}\n\nfunction WebSQLPouch(opts, callback) {\n  var _opts = jsExtend.extend({\n    websql: openDB\n  }, opts);\n\n  WebSqlPouch$1.call(this, _opts, callback);\n}\n\nWebSQLPouch.valid = valid;\n\nWebSQLPouch.use_prefix = true;\n\nfunction WebSqlPouch (PouchDB) {\n  PouchDB.adapter('websql', WebSQLPouch, true);\n}\n\n/* global fetch */\n/* global Headers */\nfunction wrappedFetch() {\n  var wrappedPromise = {};\n\n  var promise = new PouchPromise(function (resolve, reject) {\n    wrappedPromise.resolve = resolve;\n    wrappedPromise.reject = reject;\n  });\n\n  var args = new Array(arguments.length);\n\n  for (var i = 0; i < args.length; i++) {\n    args[i] = arguments[i];\n  }\n\n  wrappedPromise.promise = promise;\n\n  PouchPromise.resolve().then(function () {\n    return fetch.apply(null, args);\n  }).then(function (response) {\n    wrappedPromise.resolve(response);\n  }).catch(function (error) {\n    wrappedPromise.reject(error);\n  });\n\n  return wrappedPromise;\n}\n\nfunction fetchRequest(options, callback) {\n  var wrappedPromise, timer, response;\n\n  var headers = new Headers();\n\n  var fetchOptions = {\n    method: options.method,\n    credentials: 'include',\n    headers: headers\n  };\n\n  if (options.json) {\n    headers.set('Accept', 'application/json');\n    headers.set('Content-Type', options.headers['Content-Type'] ||\n      'application/json');\n  }\n\n  if (options.body && (options.body instanceof Blob)) {\n    readAsArrayBuffer(options.body, function (arrayBuffer) {\n      fetchOptions.body = arrayBuffer;\n    });\n  } else if (options.body &&\n             options.processData &&\n             typeof options.body !== 'string') {\n    fetchOptions.body = JSON.stringify(options.body);\n  } else if ('body' in options) {\n    fetchOptions.body = options.body;\n  } else {\n    fetchOptions.body = null;\n  }\n\n  Object.keys(options.headers).forEach(function (key) {\n    if (options.headers.hasOwnProperty(key)) {\n      headers.set(key, options.headers[key]);\n    }\n  });\n\n  wrappedPromise = wrappedFetch(options.url, fetchOptions);\n\n  if (options.timeout > 0) {\n    timer = setTimeout(function () {\n      wrappedPromise.reject(new Error('Load timeout for resource: ' +\n        options.url));\n    }, options.timeout);\n  }\n\n  wrappedPromise.promise.then(function (fetchResponse) {\n    response = {\n      statusCode: fetchResponse.status\n    };\n\n    if (options.timeout > 0) {\n      clearTimeout(timer);\n    }\n\n    if (response.statusCode >= 200 && response.statusCode < 300) {\n      return options.binary ? fetchResponse.blob() : fetchResponse.text();\n    }\n\n    return fetchResponse.json();\n  }).then(function (result) {\n    if (response.statusCode >= 200 && response.statusCode < 300) {\n      callback(null, response, result);\n    } else {\n      callback(result, response);\n    }\n  }).catch(function (error) {\n    callback(error, response);\n  });\n\n  return {abort: wrappedPromise.reject};\n}\n\nfunction xhRequest(options, callback) {\n\n  var xhr, timer;\n  var timedout = false;\n\n  var abortReq = function () {\n    xhr.abort();\n    cleanUp();\n  };\n\n  var timeoutReq = function () {\n    timedout = true;\n    xhr.abort();\n    cleanUp();\n  };\n\n  var ret = {abort: abortReq};\n\n  var cleanUp = function () {\n    clearTimeout(timer);\n    ret.abort = function () {};\n    if (xhr) {\n      xhr.onprogress = undefined;\n      if (xhr.upload) {\n        xhr.upload.onprogress = undefined;\n      }\n      xhr.onreadystatechange = undefined;\n      xhr = undefined;\n    }\n  };\n\n  if (options.xhr) {\n    xhr = new options.xhr();\n  } else {\n    xhr = new XMLHttpRequest();\n  }\n\n  try {\n    xhr.open(options.method, options.url);\n  } catch (exception) {\n    return callback(new Error(exception.name || 'Url is invalid'));\n  }\n\n  xhr.withCredentials = ('withCredentials' in options) ?\n    options.withCredentials : true;\n\n  if (options.method === 'GET') {\n    delete options.headers['Content-Type'];\n  } else if (options.json) {\n    options.headers.Accept = 'application/json';\n    options.headers['Content-Type'] = options.headers['Content-Type'] ||\n      'application/json';\n    if (options.body &&\n        options.processData &&\n        typeof options.body !== \"string\") {\n      options.body = JSON.stringify(options.body);\n    }\n  }\n\n  if (options.binary) {\n    xhr.responseType = 'arraybuffer';\n  }\n\n  if (!('body' in options)) {\n    options.body = null;\n  }\n\n  for (var key in options.headers) {\n    if (options.headers.hasOwnProperty(key)) {\n      xhr.setRequestHeader(key, options.headers[key]);\n    }\n  }\n\n  if (options.timeout > 0) {\n    timer = setTimeout(timeoutReq, options.timeout);\n    xhr.onprogress = function () {\n      clearTimeout(timer);\n      if(xhr.readyState !== 4) {\n        timer = setTimeout(timeoutReq, options.timeout);\n      }\n    };\n    if (typeof xhr.upload !== 'undefined') { // does not exist in ie9\n      xhr.upload.onprogress = xhr.onprogress;\n    }\n  }\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState !== 4) {\n      return;\n    }\n\n    var response = {\n      statusCode: xhr.status\n    };\n\n    if (xhr.status >= 200 && xhr.status < 300) {\n      var data;\n      if (options.binary) {\n        data = createBlob([xhr.response || ''], {\n          type: xhr.getResponseHeader('Content-Type')\n        });\n      } else {\n        data = xhr.responseText;\n      }\n      callback(null, response, data);\n    } else {\n      var err = {};\n      if (timedout) {\n        err = new Error('ETIMEDOUT');\n        err.code = 'ETIMEDOUT';\n      } else if (typeof xhr.response === 'string') {\n        try {\n          err = JSON.parse(xhr.response);\n        } catch(e) {}\n      }\n      err.status = xhr.status;\n      callback(err);\n    }\n    cleanUp();\n  };\n\n  if (options.body && (options.body instanceof Blob)) {\n    readAsArrayBuffer(options.body, function (arrayBuffer) {\n      xhr.send(arrayBuffer);\n    });\n  } else {\n    xhr.send(options.body);\n  }\n\n  return ret;\n}\n\nfunction testXhr() {\n  try {\n    new XMLHttpRequest();\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\nvar hasXhr = testXhr();\n\nfunction ajax$1(options, callback) {\n  if (hasXhr || options.xhr) {\n    return xhRequest(options, callback);\n  } else {\n    return fetchRequest(options, callback);\n  }\n}\n\n// the blob already has a type; do nothing\nvar res$2 = function () {};\n\nfunction defaultBody() {\n  return '';\n}\n\nfunction ajaxCore(options, callback) {\n\n  options = clone(options);\n\n  var defaultOptions = {\n    method : \"GET\",\n    headers: {},\n    json: true,\n    processData: true,\n    timeout: 10000,\n    cache: false\n  };\n\n  options = jsExtend.extend(defaultOptions, options);\n\n  function onSuccess(obj, resp, cb) {\n    if (!options.binary && options.json && typeof obj === 'string') {\n      /* istanbul ignore next */\n      try {\n        obj = JSON.parse(obj);\n      } catch (e) {\n        // Probably a malformed JSON from server\n        return cb(e);\n      }\n    }\n    if (Array.isArray(obj)) {\n      obj = obj.map(function (v) {\n        if (v.error || v.missing) {\n          return generateErrorFromResponse(v);\n        } else {\n          return v;\n        }\n      });\n    }\n    if (options.binary) {\n      res$2(obj, resp);\n    }\n    cb(null, obj, resp);\n  }\n\n  if (options.json) {\n    if (!options.binary) {\n      options.headers.Accept = 'application/json';\n    }\n    options.headers['Content-Type'] = options.headers['Content-Type'] ||\n      'application/json';\n  }\n\n  if (options.binary) {\n    options.encoding = null;\n    options.json = false;\n  }\n\n  if (!options.processData) {\n    options.json = false;\n  }\n\n  return ajax$1(options, function (err, response, body) {\n\n    if (err) {\n      return callback(generateErrorFromResponse(err));\n    }\n\n    var error;\n    var content_type = response.headers && response.headers['content-type'];\n    var data = body || defaultBody();\n\n    // CouchDB doesn't always return the right content-type for JSON data, so\n    // we check for ^{ and }$ (ignoring leading/trailing whitespace)\n    if (!options.binary && (options.json || !options.processData) &&\n        typeof data !== 'object' &&\n        (/json/.test(content_type) ||\n         (/^[\\s]*\\{/.test(data) && /\\}[\\s]*$/.test(data)))) {\n      try {\n        data = JSON.parse(data.toString());\n      } catch (e) {}\n    }\n\n    if (response.statusCode >= 200 && response.statusCode < 300) {\n      onSuccess(data, response, callback);\n    } else {\n      error = generateErrorFromResponse(data);\n      error.status = response.statusCode;\n      callback(error);\n    }\n  });\n}\n\nfunction ajax(opts, callback) {\n\n  // cache-buster, specifically designed to work around IE's aggressive caching\n  // see http://www.dashbay.com/2011/05/internet-explorer-caches-ajax/\n  // Also Safari caches POSTs, so we need to cache-bust those too.\n  var ua = (navigator && navigator.userAgent) ?\n    navigator.userAgent.toLowerCase() : '';\n\n  var isSafari = ua.indexOf('safari') !== -1 && ua.indexOf('chrome') === -1;\n  var isIE = ua.indexOf('msie') !== -1;\n  var isEdge = ua.indexOf('edge') !== -1;\n\n  // it appears the new version of safari also caches GETs,\n  // see https://github.com/pouchdb/pouchdb/issues/5010\n  var shouldCacheBust = (isSafari ||\n    ((isIE || isEdge) && opts.method === 'GET'));\n\n  var cache = 'cache' in opts ? opts.cache : true;\n\n  var isBlobUrl = /^blob:/.test(opts.url); // don't append nonces for blob URLs\n\n  if (!isBlobUrl && (shouldCacheBust || !cache)) {\n    var hasArgs = opts.url.indexOf('?') !== -1;\n    opts.url += (hasArgs ? '&' : '?') + '_nonce=' + Date.now();\n  }\n\n  return ajaxCore(opts, callback);\n}\n\nvar CHANGES_BATCH_SIZE = 25;\nvar MAX_SIMULTANEOUS_REVS = 50;\n\nvar supportsBulkGetMap = {};\n\nvar log$1 = debug('pouchdb:http');\n\nfunction readAttachmentsAsBlobOrBuffer(row) {\n  var atts = row.doc && row.doc._attachments;\n  if (!atts) {\n    return;\n  }\n  Object.keys(atts).forEach(function (filename) {\n    var att = atts[filename];\n    att.data = b64ToBluffer(att.data, att.content_type);\n  });\n}\n\nfunction encodeDocId(id) {\n  if (/^_design/.test(id)) {\n    return '_design/' + encodeURIComponent(id.slice(8));\n  }\n  if (/^_local/.test(id)) {\n    return '_local/' + encodeURIComponent(id.slice(7));\n  }\n  return encodeURIComponent(id);\n}\n\nfunction preprocessAttachments$1(doc) {\n  if (!doc._attachments || !Object.keys(doc._attachments)) {\n    return PouchPromise.resolve();\n  }\n\n  return PouchPromise.all(Object.keys(doc._attachments).map(function (key) {\n    var attachment = doc._attachments[key];\n    if (attachment.data && typeof attachment.data !== 'string') {\n      return new PouchPromise(function (resolve) {\n        blobToBase64(attachment.data, resolve);\n      }).then(function (b64) {\n        attachment.data = b64;\n      });\n    }\n  }));\n}\n\nfunction hasUrlPrefix(opts) {\n  if (!opts.prefix) {\n    return false;\n  }\n\n  var protocol = parseUri(opts.prefix).protocol;\n\n  return protocol === 'http' || protocol === 'https';\n}\n\n// Get all the information you possibly can about the URI given by name and\n// return it as a suitable object.\nfunction getHost(name, opts) {\n\n  // encode db name if opts.prefix is a url (#5574)\n  if (hasUrlPrefix(opts)) {\n    var dbName = opts.name.substr(opts.prefix.length);\n    name = opts.prefix + encodeURIComponent(dbName);\n  }\n\n  // Prase the URI into all its little bits\n  var uri = parseUri(name);\n\n  // Store the user and password as a separate auth object\n  if (uri.user || uri.password) {\n    uri.auth = {username: uri.user, password: uri.password};\n  }\n\n  // Split the path part of the URI into parts using '/' as the delimiter\n  // after removing any leading '/' and any trailing '/'\n  var parts = uri.path.replace(/(^\\/|\\/$)/g, '').split('/');\n\n  // Store the first part as the database name and remove it from the parts\n  // array\n  uri.db = parts.pop();\n  // Prevent double encoding of URI component\n  if (uri.db.indexOf('%') === -1) {\n    uri.db = encodeURIComponent(uri.db);\n  }\n\n  // Restore the path by joining all the remaining parts (all the parts\n  // except for the database name) with '/'s\n  uri.path = parts.join('/');\n\n  return uri;\n}\n\n// Generate a URL with the host data given by opts and the given path\nfunction genDBUrl(opts, path) {\n  return genUrl(opts, opts.db + '/' + path);\n}\n\n// Generate a URL with the host data given by opts and the given path\nfunction genUrl(opts, path) {\n  // If the host already has a path, then we need to have a path delimiter\n  // Otherwise, the path delimiter is the empty string\n  var pathDel = !opts.path ? '' : '/';\n\n  // If the host already has a path, then we need to have a path delimiter\n  // Otherwise, the path delimiter is the empty string\n  return opts.protocol + '://' + opts.host +\n         (opts.port ? (':' + opts.port) : '') +\n         '/' + opts.path + pathDel + path;\n}\n\nfunction paramsToStr(params) {\n  return '?' + Object.keys(params).map(function (k) {\n    return k + '=' + encodeURIComponent(params[k]);\n  }).join('&');\n}\n\n// Implements the PouchDB API for dealing with CouchDB instances over HTTP\nfunction HttpPouch(opts, callback) {\n\n  // The functions that will be publicly available for HttpPouch\n  var api = this;\n\n  var host = getHost(opts.name, opts);\n  var dbUrl = genDBUrl(host, '');\n\n  opts = clone(opts);\n  var ajaxOpts = opts.ajax || {};\n\n  if (opts.auth || host.auth) {\n    var nAuth = opts.auth || host.auth;\n    var str = nAuth.username + ':' + nAuth.password;\n    var token = btoa$1(unescape(encodeURIComponent(str)));\n    ajaxOpts.headers = ajaxOpts.headers || {};\n    ajaxOpts.headers.Authorization = 'Basic ' + token;\n  }\n\n  // Not strictly necessary, but we do this because numerous tests\n  // rely on swapping ajax in and out.\n  api._ajax = ajax;\n\n  function ajax$$(userOpts, options, callback) {\n    var reqAjax = userOpts.ajax || {};\n    var reqOpts = jsExtend.extend(clone(ajaxOpts), reqAjax, options);\n    log$1(reqOpts.method + ' ' + reqOpts.url);\n    return api._ajax(reqOpts, callback);\n  }\n\n  function ajaxPromise(userOpts, opts) {\n    return new PouchPromise(function (resolve, reject) {\n      ajax$$(userOpts, opts, function (err, res) {\n        /* istanbul ignore if */\n        if (err) {\n          return reject(err);\n        }\n        resolve(res);\n      });\n    });\n  }\n\n  function adapterFun$$(name, fun) {\n    return adapterFun(name, getArguments(function (args) {\n      setup().then(function () {\n        return fun.apply(this, args);\n      }).catch(function (e) {\n        var callback = args.pop();\n        callback(e);\n      });\n    }));\n  }\n\n  var setupPromise;\n\n  function setup() {\n    // TODO: Remove `skipSetup` in favor of `skip_setup` in a future release\n    if (opts.skipSetup || opts.skip_setup) {\n      return PouchPromise.resolve();\n    }\n\n    // If there is a setup in process or previous successful setup\n    // done then we will use that\n    // If previous setups have been rejected we will try again\n    if (setupPromise) {\n      return setupPromise;\n    }\n\n    var checkExists = {method: 'GET', url: dbUrl};\n    setupPromise = ajaxPromise({}, checkExists).catch(function (err) {\n      if (err && err.status && err.status === 404) {\n        // Doesnt exist, create it\n        explainError(404, 'PouchDB is just detecting if the remote exists.');\n        return ajaxPromise({}, {method: 'PUT', url: dbUrl});\n      } else {\n        return PouchPromise.reject(err);\n      }\n    }).catch(function (err) {\n      // If we try to create a database that already exists, skipped in\n      // istanbul since its catching a race condition.\n      /* istanbul ignore if */\n      if (err && err.status && err.status === 412) {\n        return true;\n      }\n      return PouchPromise.reject(err);\n    });\n\n    setupPromise.catch(function () {\n      setupPromise = null;\n    });\n\n    return setupPromise;\n  }\n\n  setTimeout(function () {\n    callback(null, api);\n  });\n\n  api.type = function () {\n    return 'http';\n  };\n\n  api.id = adapterFun$$('id', function (callback) {\n    ajax$$({}, {method: 'GET', url: genUrl(host, '')}, function (err, result) {\n      var uuid = (result && result.uuid) ?\n        (result.uuid + host.db) : genDBUrl(host, '');\n      callback(null, uuid);\n    });\n  });\n\n  api.request = adapterFun$$('request', function (options, callback) {\n    options.url = genDBUrl(host, options.url);\n    ajax$$({}, options, callback);\n  });\n\n  // Sends a POST request to the host calling the couchdb _compact function\n  //    version: The version of CouchDB it is running\n  api.compact = adapterFun$$('compact', function (opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    opts = clone(opts);\n    ajax$$(opts, {\n      url: genDBUrl(host, '_compact'),\n      method: 'POST'\n    }, function () {\n      function ping() {\n        api.info(function (err, res) {\n          if (res && !res.compact_running) {\n            callback(null, {ok: true});\n          } else {\n            setTimeout(ping, opts.interval || 200);\n          }\n        });\n      }\n      // Ping the http if it's finished compaction\n      ping();\n    });\n  });\n\n  api.bulkGet = adapterFun('bulkGet', function (opts, callback) {\n    var self = this;\n\n    function doBulkGet(cb) {\n      var params = {};\n      if (opts.revs) {\n        params.revs = true;\n      }\n      if (opts.attachments) {\n        /* istanbul ignore next */\n        params.attachments = true;\n      }\n      ajax$$({}, {\n        url: genDBUrl(host, '_bulk_get' + paramsToStr(params)),\n        method: 'POST',\n        body: { docs: opts.docs}\n      }, cb);\n    }\n\n    function doBulkGetShim() {\n      // avoid \"url too long error\" by splitting up into multiple requests\n      var batchSize = MAX_SIMULTANEOUS_REVS;\n      var numBatches = Math.ceil(opts.docs.length / batchSize);\n      var numDone = 0;\n      var results = new Array(numBatches);\n\n      function onResult(batchNum) {\n        return function (err, res) {\n          // err is impossible because shim returns a list of errs in that case\n          results[batchNum] = res.results;\n          if (++numDone === numBatches) {\n            callback(null, {results: flatten(results)});\n          }\n        };\n      }\n\n      for (var i = 0; i < numBatches; i++) {\n        var subOpts = pick(opts, ['revs', 'attachments']);\n        subOpts.ajax = ajaxOpts;\n        subOpts.docs = opts.docs.slice(i * batchSize,\n          Math.min(opts.docs.length, (i + 1) * batchSize));\n        bulkGet(self, subOpts, onResult(i));\n      }\n    }\n\n    // mark the whole database as either supporting or not supporting _bulk_get\n    var dbUrl = genUrl(host, '');\n    var supportsBulkGet = supportsBulkGetMap[dbUrl];\n\n    if (typeof supportsBulkGet !== 'boolean') {\n      // check if this database supports _bulk_get\n      doBulkGet(function (err, res) {\n        /* istanbul ignore else */\n        if (err) {\n          var status = Math.floor(err.status / 100);\n          /* istanbul ignore else */\n          if (status === 4 || status === 5) { // 40x or 50x\n            supportsBulkGetMap[dbUrl] = false;\n            explainError(\n              err.status,\n              'PouchDB is just detecting if the remote ' +\n              'supports the _bulk_get API.'\n            );\n            doBulkGetShim();\n          } else {\n            callback(err);\n          }\n        } else {\n          supportsBulkGetMap[dbUrl] = true;\n          callback(null, res);\n        }\n      });\n    } else if (supportsBulkGet) {\n      /* istanbul ignore next */\n      doBulkGet(callback);\n    } else {\n      doBulkGetShim();\n    }\n  });\n\n  // Calls GET on the host, which gets back a JSON string containing\n  //    couchdb: A welcome string\n  //    version: The version of CouchDB it is running\n  api._info = function (callback) {\n    setup().then(function () {\n      ajax$$({}, {\n        method: 'GET',\n        url: genDBUrl(host, '')\n      }, function (err, res) {\n        /* istanbul ignore next */\n        if (err) {\n        return callback(err);\n        }\n        res.host = genDBUrl(host, '');\n        callback(null, res);\n      });\n    }).catch(callback);\n  };\n\n  // Get the document with the given id from the database given by host.\n  // The id could be solely the _id in the database, or it may be a\n  // _design/ID or _local/ID path\n  api.get = adapterFun$$('get', function (id, opts, callback) {\n    // If no options were given, set the callback to the second parameter\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    opts = clone(opts);\n\n    // List of parameters to add to the GET request\n    var params = {};\n\n    if (opts.revs) {\n      params.revs = true;\n    }\n\n    if (opts.revs_info) {\n      params.revs_info = true;\n    }\n\n    if (opts.open_revs) {\n      if (opts.open_revs !== \"all\") {\n        opts.open_revs = JSON.stringify(opts.open_revs);\n      }\n      params.open_revs = opts.open_revs;\n    }\n\n    if (opts.rev) {\n      params.rev = opts.rev;\n    }\n\n    if (opts.conflicts) {\n      params.conflicts = opts.conflicts;\n    }\n\n    id = encodeDocId(id);\n\n    // Set the options for the ajax call\n    var options = {\n      method: 'GET',\n      url: genDBUrl(host, id + paramsToStr(params))\n    };\n\n    function fetchAttachments(doc) {\n      var atts = doc._attachments;\n      var filenames = atts && Object.keys(atts);\n      if (!atts || !filenames.length) {\n        return;\n      }\n      // we fetch these manually in separate XHRs, because\n      // Sync Gateway would normally send it back as multipart/mixed,\n      // which we cannot parse. Also, this is more efficient than\n      // receiving attachments as base64-encoded strings.\n      function fetch() {\n\n        if (!filenames.length) {\n          return null;\n        }\n\n        var filename = filenames.pop();\n        var att = atts[filename];\n        var path = encodeDocId(doc._id) + '/' + encodeAttachmentId(filename) +\n          '?rev=' + doc._rev;\n        return ajaxPromise(opts, {\n          method: 'GET',\n          url: genDBUrl(host, path),\n          binary: true\n        }).then(function (blob) {\n          if (opts.binary) {\n            return blob;\n          }\n          return new PouchPromise(function (resolve) {\n            blobToBase64(blob, resolve);\n          });\n        }).then(function (data) {\n          delete att.stub;\n          delete att.length;\n          att.data = data;\n        });\n      }\n\n      // This limits the number of parallel xhr requests to 5 any time\n      // to avoid issues with maximum browser request limits\n      return new PromisePool(fetch, 5, {promise: PouchPromise}).start();\n    }\n\n    function fetchAllAttachments(docOrDocs) {\n      if (Array.isArray(docOrDocs)) {\n        return PouchPromise.all(docOrDocs.map(function (doc) {\n          if (doc.ok) {\n            return fetchAttachments(doc.ok);\n          }\n        }));\n      }\n      return fetchAttachments(docOrDocs);\n    }\n\n    ajaxPromise(opts, options).then(function (res) {\n      return PouchPromise.resolve().then(function () {\n        if (opts.attachments) {\n          return fetchAllAttachments(res);\n        }\n      }).then(function () {\n        callback(null, res);\n      });\n    }).catch(callback);\n  });\n\n  // Delete the document given by doc from the database given by host.\n  api.remove = adapterFun$$('remove',\n      function (docOrId, optsOrRev, opts, callback) {\n    var doc;\n    if (typeof optsOrRev === 'string') {\n      // id, rev, opts, callback style\n      doc = {\n        _id: docOrId,\n        _rev: optsOrRev\n      };\n      if (typeof opts === 'function') {\n        callback = opts;\n        opts = {};\n      }\n    } else {\n      // doc, opts, callback style\n      doc = docOrId;\n      if (typeof optsOrRev === 'function') {\n        callback = optsOrRev;\n        opts = {};\n      } else {\n        callback = opts;\n        opts = optsOrRev;\n      }\n    }\n\n    var rev = (doc._rev || opts.rev);\n\n    // Delete the document\n    ajax$$(opts, {\n      method: 'DELETE',\n      url: genDBUrl(host, encodeDocId(doc._id)) + '?rev=' + rev\n    }, callback);\n  });\n\n  function encodeAttachmentId(attachmentId) {\n    return attachmentId.split(\"/\").map(encodeURIComponent).join(\"/\");\n  }\n\n  // Get the attachment\n  api.getAttachment =\n    adapterFun$$('getAttachment', function (docId, attachmentId, opts,\n                                                callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    var params = opts.rev ? ('?rev=' + opts.rev) : '';\n    var url = genDBUrl(host, encodeDocId(docId)) + '/' +\n      encodeAttachmentId(attachmentId) + params;\n    ajax$$(opts, {\n      method: 'GET',\n      url: url,\n      binary: true\n    }, callback);\n  });\n\n  // Remove the attachment given by the id and rev\n  api.removeAttachment =\n    adapterFun$$('removeAttachment', function (docId, attachmentId, rev,\n                                                   callback) {\n\n    var url = genDBUrl(host, encodeDocId(docId) + '/' +\n      encodeAttachmentId(attachmentId)) + '?rev=' + rev;\n\n    ajax$$({}, {\n      method: 'DELETE',\n      url: url\n    }, callback);\n  });\n\n  // Add the attachment given by blob and its contentType property\n  // to the document with the given id, the revision given by rev, and\n  // add it to the database given by host.\n  api.putAttachment =\n    adapterFun$$('putAttachment', function (docId, attachmentId, rev, blob,\n                                                type, callback) {\n    if (typeof type === 'function') {\n      callback = type;\n      type = blob;\n      blob = rev;\n      rev = null;\n    }\n    var id = encodeDocId(docId) + '/' + encodeAttachmentId(attachmentId);\n    var url = genDBUrl(host, id);\n    if (rev) {\n      url += '?rev=' + rev;\n    }\n\n    if (typeof blob === 'string') {\n      // input is assumed to be a base64 string\n      var binary;\n      try {\n        binary = atob$1(blob);\n      } catch (err) {\n        return callback(createError(BAD_ARG,\n                        'Attachment is not a valid base64 string'));\n      }\n      blob = binary ? binStringToBluffer(binary, type) : '';\n    }\n\n    var opts = {\n      headers: {'Content-Type': type},\n      method: 'PUT',\n      url: url,\n      processData: false,\n      body: blob,\n      timeout: ajaxOpts.timeout || 60000\n    };\n    // Add the attachment\n    ajax$$({}, opts, callback);\n  });\n\n  // Update/create multiple documents given by req in the database\n  // given by host.\n  api._bulkDocs = function (req, opts, callback) {\n    // If new_edits=false then it prevents the database from creating\n    // new revision numbers for the documents. Instead it just uses\n    // the old ones. This is used in database replication.\n    req.new_edits = opts.new_edits;\n\n    setup().then(function () {\n      return PouchPromise.all(req.docs.map(preprocessAttachments$1));\n    }).then(function () {\n      // Update/create the documents\n      ajax$$(opts, {\n        method: 'POST',\n        url: genDBUrl(host, '_bulk_docs'),\n        timeout: opts.timeout,\n        body: req\n      }, function (err, results) {\n        if (err) {\n          return callback(err);\n        }\n        results.forEach(function (result) {\n          result.ok = true; // smooths out cloudant not adding this\n        });\n        callback(null, results);\n      });\n    }).catch(callback);\n  };\n\n\n  // Update/create document\n  api._put = function (doc, opts, callback) {\n    setup().then(function () {\n      return preprocessAttachments$1(doc);\n    }).then(function () {\n      // Update/create the document\n      ajax$$(opts, {\n        method: 'PUT',\n        url: genDBUrl(host, encodeDocId(doc._id)),\n        body: doc\n      }, function (err, result) {\n        if (err) {\n          return callback(err);\n        }\n        callback(null, result);\n      });\n    }).catch(callback);\n  };\n\n\n  // Get a listing of the documents in the database given\n  // by host and ordered by increasing id.\n  api.allDocs = adapterFun$$('allDocs', function (opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    opts = clone(opts);\n\n    // List of parameters to add to the GET request\n    var params = {};\n    var body;\n    var method = 'GET';\n\n    if (opts.conflicts) {\n      params.conflicts = true;\n    }\n\n    if (opts.descending) {\n      params.descending = true;\n    }\n\n    if (opts.include_docs) {\n      params.include_docs = true;\n    }\n\n    // added in CouchDB 1.6.0\n    if (opts.attachments) {\n      params.attachments = true;\n    }\n\n    if (opts.key) {\n      params.key = JSON.stringify(opts.key);\n    }\n\n    if (opts.start_key) {\n      opts.startkey = opts.start_key;\n    }\n\n    if (opts.startkey) {\n      params.startkey = JSON.stringify(opts.startkey);\n    }\n\n    if (opts.end_key) {\n      opts.endkey = opts.end_key;\n    }\n\n    if (opts.endkey) {\n      params.endkey = JSON.stringify(opts.endkey);\n    }\n\n    if (typeof opts.inclusive_end !== 'undefined') {\n      params.inclusive_end = !!opts.inclusive_end;\n    }\n\n    if (typeof opts.limit !== 'undefined') {\n      params.limit = opts.limit;\n    }\n\n    if (typeof opts.skip !== 'undefined') {\n      params.skip = opts.skip;\n    }\n\n    var paramStr = paramsToStr(params);\n\n    if (typeof opts.keys !== 'undefined') {\n      method = 'POST';\n      body = {keys: opts.keys};\n    }\n\n    // Get the document listing\n    ajaxPromise(opts, {\n      method: method,\n      url: genDBUrl(host, '_all_docs' + paramStr),\n      body: body\n    }).then(function (res) {\n      if (opts.include_docs && opts.attachments && opts.binary) {\n        res.rows.forEach(readAttachmentsAsBlobOrBuffer);\n      }\n      callback(null, res);\n    }).catch(callback);\n  });\n\n  // Get a list of changes made to documents in the database given by host.\n  // TODO According to the README, there should be two other methods here,\n  // api.changes.addListener and api.changes.removeListener.\n  api._changes = function (opts) {\n\n    // We internally page the results of a changes request, this means\n    // if there is a large set of changes to be returned we can start\n    // processing them quicker instead of waiting on the entire\n    // set of changes to return and attempting to process them at once\n    var batchSize = 'batch_size' in opts ? opts.batch_size : CHANGES_BATCH_SIZE;\n\n    opts = clone(opts);\n    opts.timeout = ('timeout' in opts) ? opts.timeout :\n      ('timeout' in ajaxOpts) ? ajaxOpts.timeout :\n      30 * 1000;\n\n    // We give a 5 second buffer for CouchDB changes to respond with\n    // an ok timeout (if a timeout it set)\n    var params = opts.timeout ? {timeout: opts.timeout - (5 * 1000)} : {};\n    var limit = (typeof opts.limit !== 'undefined') ? opts.limit : false;\n    var returnDocs;\n    if ('return_docs' in opts) {\n      returnDocs = opts.return_docs;\n    } else if ('returnDocs' in opts) {\n      // TODO: Remove 'returnDocs' in favor of 'return_docs' in a future release\n      returnDocs = opts.returnDocs;\n    } else {\n      returnDocs = true;\n    }\n    //\n    var leftToFetch = limit;\n\n    if (opts.style) {\n      params.style = opts.style;\n    }\n\n    if (opts.include_docs || opts.filter && typeof opts.filter === 'function') {\n      params.include_docs = true;\n    }\n\n    if (opts.attachments) {\n      params.attachments = true;\n    }\n\n    if (opts.continuous) {\n      params.feed = 'longpoll';\n    }\n\n    if (opts.conflicts) {\n      params.conflicts = true;\n    }\n\n    if (opts.descending) {\n      params.descending = true;\n    }\n\n    if ('heartbeat' in opts) {\n      // If the heartbeat value is false, it disables the default heartbeat\n      if (opts.heartbeat) {\n        params.heartbeat = opts.heartbeat;\n      }\n    } else {\n      // Default heartbeat to 10 seconds\n      params.heartbeat = 10000;\n    }\n\n    if (opts.filter && typeof opts.filter === 'string') {\n      params.filter = opts.filter;\n    }\n\n    if (opts.view && typeof opts.view === 'string') {\n      params.filter = '_view';\n      params.view = opts.view;\n    }\n\n    // If opts.query_params exists, pass it through to the changes request.\n    // These parameters may be used by the filter on the source database.\n    if (opts.query_params && typeof opts.query_params === 'object') {\n      for (var param_name in opts.query_params) {\n        /* istanbul ignore else */\n        if (opts.query_params.hasOwnProperty(param_name)) {\n          params[param_name] = opts.query_params[param_name];\n        }\n      }\n    }\n\n    var method = 'GET';\n    var body;\n\n    if (opts.doc_ids) {\n      // set this automagically for the user; it's annoying that couchdb\n      // requires both a \"filter\" and a \"doc_ids\" param.\n      params.filter = '_doc_ids';\n      method = 'POST';\n      body = {doc_ids: opts.doc_ids };\n    }\n\n    var xhr;\n    var lastFetchedSeq;\n\n    // Get all the changes starting wtih the one immediately after the\n    // sequence number given by since.\n    var fetch = function (since, callback) {\n      if (opts.aborted) {\n        return;\n      }\n      params.since = since;\n      // \"since\" can be any kind of json object in Coudant/CouchDB 2.x\n      /* istanbul ignore next */\n      if (typeof params.since === \"object\") {\n        params.since = JSON.stringify(params.since);\n      }\n\n      if (opts.descending) {\n        if (limit) {\n          params.limit = leftToFetch;\n        }\n      } else {\n        params.limit = (!limit || leftToFetch > batchSize) ?\n          batchSize : leftToFetch;\n      }\n\n      // Set the options for the ajax call\n      var xhrOpts = {\n        method: method,\n        url: genDBUrl(host, '_changes' + paramsToStr(params)),\n        timeout: opts.timeout,\n        body: body\n      };\n      lastFetchedSeq = since;\n\n      /* istanbul ignore if */\n      if (opts.aborted) {\n        return;\n      }\n\n      // Get the changes\n      setup().then(function () {\n        xhr = ajax$$(opts, xhrOpts, callback);\n      }).catch(callback);\n    };\n\n    // If opts.since exists, get all the changes from the sequence\n    // number given by opts.since. Otherwise, get all the changes\n    // from the sequence number 0.\n    var results = {results: []};\n\n    var fetched = function (err, res) {\n      if (opts.aborted) {\n        return;\n      }\n      var raw_results_length = 0;\n      // If the result of the ajax call (res) contains changes (res.results)\n      if (res && res.results) {\n        raw_results_length = res.results.length;\n        results.last_seq = res.last_seq;\n        // For each change\n        var req = {};\n        req.query = opts.query_params;\n        res.results = res.results.filter(function (c) {\n          leftToFetch--;\n          var ret = filterChange(opts)(c);\n          if (ret) {\n            if (opts.include_docs && opts.attachments && opts.binary) {\n              readAttachmentsAsBlobOrBuffer(c);\n            }\n            if (returnDocs) {\n              results.results.push(c);\n            }\n            opts.onChange(c);\n          }\n          return ret;\n        });\n      } else if (err) {\n        // In case of an error, stop listening for changes and call\n        // opts.complete\n        opts.aborted = true;\n        opts.complete(err);\n        return;\n      }\n\n      // The changes feed may have timed out with no results\n      // if so reuse last update sequence\n      if (res && res.last_seq) {\n        lastFetchedSeq = res.last_seq;\n      }\n\n      var finished = (limit && leftToFetch <= 0) ||\n        (res && raw_results_length < batchSize) ||\n        (opts.descending);\n\n      if ((opts.continuous && !(limit && leftToFetch <= 0)) || !finished) {\n        // Queue a call to fetch again with the newest sequence number\n        setTimeout(function () { fetch(lastFetchedSeq, fetched); }, 0);\n      } else {\n        // We're done, call the callback\n        opts.complete(null, results);\n      }\n    };\n\n    fetch(opts.since || 0, fetched);\n\n    // Return a method to cancel this method from processing any more\n    return {\n      cancel: function () {\n        opts.aborted = true;\n        if (xhr) {\n          xhr.abort();\n        }\n      }\n    };\n  };\n\n  // Given a set of document/revision IDs (given by req), tets the subset of\n  // those that do NOT correspond to revisions stored in the database.\n  // See http://wiki.apache.org/couchdb/HttpPostRevsDiff\n  api.revsDiff = adapterFun$$('revsDiff', function (req, opts, callback) {\n    // If no options were given, set the callback to be the second parameter\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    // Get the missing document/revision IDs\n    ajax$$(opts, {\n      method: 'POST',\n      url: genDBUrl(host, '_revs_diff'),\n      body: req\n    }, callback);\n  });\n\n  api._close = function (callback) {\n    callback();\n  };\n\n  api._destroy = function (options, callback) {\n    ajax$$(options, {\n      url: genDBUrl(host, ''),\n      method: 'DELETE'\n    }, function (err, resp) {\n      if (err && err.status && err.status !== 404) {\n        return callback(err);\n      }\n      callback(null, resp);\n    });\n  };\n}\n\n// HttpPouch is a valid adapter.\nHttpPouch.valid = function () {\n  return true;\n};\n\nfunction HttpPouch$1 (PouchDB) {\n  PouchDB.adapter('http', HttpPouch, false);\n  PouchDB.adapter('https', HttpPouch, false);\n}\n\nfunction pad(str, padWith, upToLength) {\n  var padding = '';\n  var targetLength = upToLength - str.length;\n  /* istanbul ignore next */\n  while (padding.length < targetLength) {\n    padding += padWith;\n  }\n  return padding;\n}\n\nfunction padLeft(str, padWith, upToLength) {\n  var padding = pad(str, padWith, upToLength);\n  return padding + str;\n}\n\nvar MIN_MAGNITUDE = -324; // verified by -Number.MIN_VALUE\nvar MAGNITUDE_DIGITS = 3; // ditto\nvar SEP = ''; // set to '_' for easier debugging \n\nfunction collate(a, b) {\n\n  if (a === b) {\n    return 0;\n  }\n\n  a = normalizeKey(a);\n  b = normalizeKey(b);\n\n  var ai = collationIndex(a);\n  var bi = collationIndex(b);\n  if ((ai - bi) !== 0) {\n    return ai - bi;\n  }\n  if (a === null) {\n    return 0;\n  }\n  switch (typeof a) {\n    case 'number':\n      return a - b;\n    case 'boolean':\n      return a === b ? 0 : (a < b ? -1 : 1);\n    case 'string':\n      return stringCollate(a, b);\n  }\n  return Array.isArray(a) ? arrayCollate(a, b) : objectCollate(a, b);\n}\n\n// couch considers null/NaN/Infinity/-Infinity === undefined,\n// for the purposes of mapreduce indexes. also, dates get stringified.\nfunction normalizeKey(key) {\n  switch (typeof key) {\n    case 'undefined':\n      return null;\n    case 'number':\n      if (key === Infinity || key === -Infinity || isNaN(key)) {\n        return null;\n      }\n      return key;\n    case 'object':\n      var origKey = key;\n      if (Array.isArray(key)) {\n        var len = key.length;\n        key = new Array(len);\n        for (var i = 0; i < len; i++) {\n          key[i] = normalizeKey(origKey[i]);\n        }\n      /* istanbul ignore next */\n      } else if (key instanceof Date) {\n        return key.toJSON();\n      } else if (key !== null) { // generic object\n        key = {};\n        for (var k in origKey) {\n          if (origKey.hasOwnProperty(k)) {\n            var val = origKey[k];\n            if (typeof val !== 'undefined') {\n              key[k] = normalizeKey(val);\n            }\n          }\n        }\n      }\n  }\n  return key;\n}\n\nfunction indexify(key) {\n  if (key !== null) {\n    switch (typeof key) {\n      case 'boolean':\n        return key ? 1 : 0;\n      case 'number':\n        return numToIndexableString(key);\n      case 'string':\n        // We've to be sure that key does not contain \\u0000\n        // Do order-preserving replacements:\n        // 0 -> 1, 1\n        // 1 -> 1, 2\n        // 2 -> 2, 2\n        return key\n          .replace(/\\u0002/g, '\\u0002\\u0002')\n          .replace(/\\u0001/g, '\\u0001\\u0002')\n          .replace(/\\u0000/g, '\\u0001\\u0001');\n      case 'object':\n        var isArray = Array.isArray(key);\n        var arr = isArray ? key : Object.keys(key);\n        var i = -1;\n        var len = arr.length;\n        var result = '';\n        if (isArray) {\n          while (++i < len) {\n            result += toIndexableString(arr[i]);\n          }\n        } else {\n          while (++i < len) {\n            var objKey = arr[i];\n            result += toIndexableString(objKey) +\n                toIndexableString(key[objKey]);\n          }\n        }\n        return result;\n    }\n  }\n  return '';\n}\n\n// convert the given key to a string that would be appropriate\n// for lexical sorting, e.g. within a database, where the\n// sorting is the same given by the collate() function.\nfunction toIndexableString(key) {\n  var zero = '\\u0000';\n  key = normalizeKey(key);\n  return collationIndex(key) + SEP + indexify(key) + zero;\n}\n\nfunction parseNumber(str, i) {\n  var originalIdx = i;\n  var num;\n  var zero = str[i] === '1';\n  if (zero) {\n    num = 0;\n    i++;\n  } else {\n    var neg = str[i] === '0';\n    i++;\n    var numAsString = '';\n    var magAsString = str.substring(i, i + MAGNITUDE_DIGITS);\n    var magnitude = parseInt(magAsString, 10) + MIN_MAGNITUDE;\n    /* istanbul ignore next */\n    if (neg) {\n      magnitude = -magnitude;\n    }\n    i += MAGNITUDE_DIGITS;\n    while (true) {\n      var ch = str[i];\n      if (ch === '\\u0000') {\n        break;\n      } else {\n        numAsString += ch;\n      }\n      i++;\n    }\n    numAsString = numAsString.split('.');\n    if (numAsString.length === 1) {\n      num = parseInt(numAsString, 10);\n    } else {\n      /* istanbul ignore next */\n      num = parseFloat(numAsString[0] + '.' + numAsString[1]);\n    }\n    /* istanbul ignore next */\n    if (neg) {\n      num = num - 10;\n    }\n    /* istanbul ignore next */\n    if (magnitude !== 0) {\n      // parseFloat is more reliable than pow due to rounding errors\n      // e.g. Number.MAX_VALUE would return Infinity if we did\n      // num * Math.pow(10, magnitude);\n      num = parseFloat(num + 'e' + magnitude);\n    }\n  }\n  return {num: num, length : i - originalIdx};\n}\n\n// move up the stack while parsing\n// this function moved outside of parseIndexableString for performance\nfunction pop(stack, metaStack) {\n  var obj = stack.pop();\n\n  if (metaStack.length) {\n    var lastMetaElement = metaStack[metaStack.length - 1];\n    if (obj === lastMetaElement.element) {\n      // popping a meta-element, e.g. an object whose value is another object\n      metaStack.pop();\n      lastMetaElement = metaStack[metaStack.length - 1];\n    }\n    var element = lastMetaElement.element;\n    var lastElementIndex = lastMetaElement.index;\n    if (Array.isArray(element)) {\n      element.push(obj);\n    } else if (lastElementIndex === stack.length - 2) { // obj with key+value\n      var key = stack.pop();\n      element[key] = obj;\n    } else {\n      stack.push(obj); // obj with key only\n    }\n  }\n}\n\nfunction parseIndexableString(str) {\n  var stack = [];\n  var metaStack = []; // stack for arrays and objects\n  var i = 0;\n\n  /*eslint no-constant-condition: [\"error\", { \"checkLoops\": false }]*/\n  while (true) {\n    var collationIndex = str[i++];\n    if (collationIndex === '\\u0000') {\n      if (stack.length === 1) {\n        return stack.pop();\n      } else {\n        pop(stack, metaStack);\n        continue;\n      }\n    }\n    switch (collationIndex) {\n      case '1':\n        stack.push(null);\n        break;\n      case '2':\n        stack.push(str[i] === '1');\n        i++;\n        break;\n      case '3':\n        var parsedNum = parseNumber(str, i);\n        stack.push(parsedNum.num);\n        i += parsedNum.length;\n        break;\n      case '4':\n        var parsedStr = '';\n        /*eslint no-constant-condition: [\"error\", { \"checkLoops\": false }]*/\n        while (true) {\n          var ch = str[i];\n          if (ch === '\\u0000') {\n            break;\n          }\n          parsedStr += ch;\n          i++;\n        }\n        // perform the reverse of the order-preserving replacement\n        // algorithm (see above)\n        parsedStr = parsedStr.replace(/\\u0001\\u0001/g, '\\u0000')\n          .replace(/\\u0001\\u0002/g, '\\u0001')\n          .replace(/\\u0002\\u0002/g, '\\u0002');\n        stack.push(parsedStr);\n        break;\n      case '5':\n        var arrayElement = { element: [], index: stack.length };\n        stack.push(arrayElement.element);\n        metaStack.push(arrayElement);\n        break;\n      case '6':\n        var objElement = { element: {}, index: stack.length };\n        stack.push(objElement.element);\n        metaStack.push(objElement);\n        break;\n      /* istanbul ignore next */\n      default:\n        throw new Error(\n          'bad collationIndex or unexpectedly reached end of input: ' +\n            collationIndex);\n    }\n  }\n}\n\nfunction arrayCollate(a, b) {\n  var len = Math.min(a.length, b.length);\n  for (var i = 0; i < len; i++) {\n    var sort = collate(a[i], b[i]);\n    if (sort !== 0) {\n      return sort;\n    }\n  }\n  return (a.length === b.length) ? 0 :\n    (a.length > b.length) ? 1 : -1;\n}\nfunction stringCollate(a, b) {\n  // See: https://github.com/daleharvey/pouchdb/issues/40\n  // This is incompatible with the CouchDB implementation, but its the\n  // best we can do for now\n  return (a === b) ? 0 : ((a > b) ? 1 : -1);\n}\nfunction objectCollate(a, b) {\n  var ak = Object.keys(a), bk = Object.keys(b);\n  var len = Math.min(ak.length, bk.length);\n  for (var i = 0; i < len; i++) {\n    // First sort the keys\n    var sort = collate(ak[i], bk[i]);\n    if (sort !== 0) {\n      return sort;\n    }\n    // if the keys are equal sort the values\n    sort = collate(a[ak[i]], b[bk[i]]);\n    if (sort !== 0) {\n      return sort;\n    }\n\n  }\n  return (ak.length === bk.length) ? 0 :\n    (ak.length > bk.length) ? 1 : -1;\n}\n// The collation is defined by erlangs ordered terms\n// the atoms null, true, false come first, then numbers, strings,\n// arrays, then objects\n// null/undefined/NaN/Infinity/-Infinity are all considered null\nfunction collationIndex(x) {\n  var id = ['boolean', 'number', 'string', 'object'];\n  var idx = id.indexOf(typeof x);\n  //false if -1 otherwise true, but fast!!!!1\n  if (~idx) {\n    if (x === null) {\n      return 1;\n    }\n    if (Array.isArray(x)) {\n      return 5;\n    }\n    return idx < 3 ? (idx + 2) : (idx + 3);\n  }\n  /* istanbul ignore next */\n  if (Array.isArray(x)) {\n    return 5;\n  }\n}\n\n// conversion:\n// x yyy zz...zz\n// x = 0 for negative, 1 for 0, 2 for positive\n// y = exponent (for negative numbers negated) moved so that it's >= 0\n// z = mantisse\nfunction numToIndexableString(num) {\n\n  if (num === 0) {\n    return '1';\n  }\n\n  // convert number to exponential format for easier and\n  // more succinct string sorting\n  var expFormat = num.toExponential().split(/e\\+?/);\n  var magnitude = parseInt(expFormat[1], 10);\n\n  var neg = num < 0;\n\n  var result = neg ? '0' : '2';\n\n  // first sort by magnitude\n  // it's easier if all magnitudes are positive\n  var magForComparison = ((neg ? -magnitude : magnitude) - MIN_MAGNITUDE);\n  var magString = padLeft((magForComparison).toString(), '0', MAGNITUDE_DIGITS);\n\n  result += SEP + magString;\n\n  // then sort by the factor\n  var factor = Math.abs(parseFloat(expFormat[0])); // [1..10)\n  /* istanbul ignore next */\n  if (neg) { // for negative reverse ordering\n    factor = 10 - factor;\n  }\n\n  var factorStr = factor.toFixed(20);\n\n  // strip zeros from the end\n  factorStr = factorStr.replace(/\\.?0+$/, '');\n\n  result += SEP + factorStr;\n\n  return result;\n}\n\n/*\n * Simple task queue to sequentialize actions. Assumes\n * callbacks will eventually fire (once).\n */\n\nfunction TaskQueue$1() {\n  this.promise = new PouchPromise(function (fulfill) {fulfill(); });\n}\nTaskQueue$1.prototype.add = function (promiseFactory) {\n  this.promise = this.promise.catch(function () {\n    // just recover\n  }).then(function () {\n    return promiseFactory();\n  });\n  return this.promise;\n};\nTaskQueue$1.prototype.finish = function () {\n  return this.promise;\n};\n\nfunction createView(opts) {\n  var sourceDB = opts.db;\n  var viewName = opts.viewName;\n  var mapFun = opts.map;\n  var reduceFun = opts.reduce;\n  var temporary = opts.temporary;\n\n  // the \"undefined\" part is for backwards compatibility\n  var viewSignature = mapFun.toString() + (reduceFun && reduceFun.toString()) +\n    'undefined';\n\n  var cachedViews;\n  if (!temporary) {\n    // cache this to ensure we don't try to update the same view twice\n    cachedViews = sourceDB._cachedViews = sourceDB._cachedViews || {};\n    if (cachedViews[viewSignature]) {\n      return cachedViews[viewSignature];\n    }\n  }\n\n  var promiseForView = sourceDB.info().then(function (info) {\n\n    var depDbName = info.db_name + '-mrview-' +\n      (temporary ? 'temp' : stringMd5(viewSignature));\n\n    // save the view name in the source db so it can be cleaned up if necessary\n    // (e.g. when the _design doc is deleted, remove all associated view data)\n    function diffFunction(doc) {\n      doc.views = doc.views || {};\n      var fullViewName = viewName;\n      if (fullViewName.indexOf('/') === -1) {\n        fullViewName = viewName + '/' + viewName;\n      }\n      var depDbs = doc.views[fullViewName] = doc.views[fullViewName] || {};\n      /* istanbul ignore if */\n      if (depDbs[depDbName]) {\n        return; // no update necessary\n      }\n      depDbs[depDbName] = true;\n      return doc;\n    }\n    return upsert(sourceDB, '_local/mrviews', diffFunction).then(function () {\n      return sourceDB.registerDependentDatabase(depDbName).then(function (res) {\n        var db = res.db;\n        db.auto_compaction = true;\n        var view = {\n          name: depDbName,\n          db: db,\n          sourceDB: sourceDB,\n          adapter: sourceDB.adapter,\n          mapFun: mapFun,\n          reduceFun: reduceFun\n        };\n        return view.db.get('_local/lastSeq').catch(function (err) {\n          /* istanbul ignore if */\n          if (err.status !== 404) {\n            throw err;\n          }\n        }).then(function (lastSeqDoc) {\n          view.seq = lastSeqDoc ? lastSeqDoc.seq : 0;\n          if (cachedViews) {\n            view.db.once('destroyed', function () {\n              delete cachedViews[viewSignature];\n            });\n          }\n          return view;\n        });\n      });\n    });\n  });\n\n  if (cachedViews) {\n    cachedViews[viewSignature] = promiseForView;\n  }\n  return promiseForView;\n}\n\nfunction QueryParseError(message) {\n  this.status = 400;\n  this.name = 'query_parse_error';\n  this.message = message;\n  this.error = true;\n  try {\n    Error.captureStackTrace(this, QueryParseError);\n  } catch (e) {}\n}\n\ninherits(QueryParseError, Error);\n\nfunction NotFoundError(message) {\n  this.status = 404;\n  this.name = 'not_found';\n  this.message = message;\n  this.error = true;\n  try {\n    Error.captureStackTrace(this, NotFoundError);\n  } catch (e) {}\n}\n\ninherits(NotFoundError, Error);\n\nfunction BuiltInError(message) {\n  this.status = 500;\n  this.name = 'invalid_value';\n  this.message = message;\n  this.error = true;\n  try {\n    Error.captureStackTrace(this, BuiltInError);\n  } catch (e) {}\n}\n\ninherits(BuiltInError, Error);\n\nfunction createBuiltInError(name) {\n  var message = 'builtin ' + name +\n    ' function requires map values to be numbers' +\n    ' or number arrays';\n  return new BuiltInError(message);\n}\n\nfunction sum(values) {\n  var result = 0;\n  for (var i = 0, len = values.length; i < len; i++) {\n    var num = values[i];\n    if (typeof num !== 'number') {\n      if (Array.isArray(num)) {\n        // lists of numbers are also allowed, sum them separately\n        result = typeof result === 'number' ? [result] : result;\n        for (var j = 0, jLen = num.length; j < jLen; j++) {\n          var jNum = num[j];\n          if (typeof jNum !== 'number') {\n            throw createBuiltInError('_sum');\n          } else if (typeof result[j] === 'undefined') {\n            result.push(jNum);\n          } else {\n            result[j] += jNum;\n          }\n        }\n      } else { // not array/number\n        throw createBuiltInError('_sum');\n      }\n    } else if (typeof result === 'number') {\n      result += num;\n    } else { // add number to array\n      result[0] += num;\n    }\n  }\n  return result;\n}\n\nvar log$2 = guardedConsole.bind(null, 'log');\nvar isArray = Array.isArray;\nvar toJSON = JSON.parse;\n\nfunction evalFunctionWithEval(func, emit) {\n  return scopedEval(\n    \"return (\" + func.replace(/;\\s*$/, \"\") + \");\",\n    {\n      emit: emit,\n      sum: sum,\n      log: log$2,\n      isArray: isArray,\n      toJSON: toJSON\n    }\n  );\n}\n\nvar promisedCallback = function (promise, callback) {\n  if (callback) {\n    promise.then(function (res) {\n      process.nextTick(function () {\n        callback(null, res);\n      });\n    }, function (reason) {\n      process.nextTick(function () {\n        callback(reason);\n      });\n    });\n  }\n  return promise;\n};\n\nvar callbackify = function (fun) {\n  return getArguments(function (args) {\n    var cb = args.pop();\n    var promise = fun.apply(this, args);\n    if (typeof cb === 'function') {\n      promisedCallback(promise, cb);\n    }\n    return promise;\n  });\n};\n\n// Promise finally util similar to Q.finally\nvar fin = function (promise, finalPromiseFactory) {\n  return promise.then(function (res) {\n    return finalPromiseFactory().then(function () {\n      return res;\n    });\n  }, function (reason) {\n    return finalPromiseFactory().then(function () {\n      throw reason;\n    });\n  });\n};\n\nvar sequentialize = function (queue, promiseFactory) {\n  return function () {\n    var args = arguments;\n    var that = this;\n    return queue.add(function () {\n      return promiseFactory.apply(that, args);\n    });\n  };\n};\n\n// uniq an array of strings, order not guaranteed\n// similar to underscore/lodash _.uniq\nvar uniq = function (arr) {\n  var map = {};\n\n  for (var i = 0, len = arr.length; i < len; i++) {\n    map['$' + arr[i]] = true;\n  }\n\n  var keys = Object.keys(map);\n  var output = new Array(keys.length);\n\n  for (i = 0, len = keys.length; i < len; i++) {\n    output[i] = keys[i].substring(1);\n  }\n  return output;\n};\n\nvar persistentQueues = {};\nvar tempViewQueue = new TaskQueue$1();\nvar CHANGES_BATCH_SIZE$1 = 50;\n\nfunction parseViewName(name) {\n  // can be either 'ddocname/viewname' or just 'viewname'\n  // (where the ddoc name is the same)\n  return name.indexOf('/') === -1 ? [name, name] : name.split('/');\n}\n\nfunction isGenOne(changes) {\n  // only return true if the current change is 1-\n  // and there are no other leafs\n  return changes.length === 1 && /^1-/.test(changes[0].rev);\n}\n\nfunction emitError(db, e) {\n  try {\n    db.emit('error', e);\n  } catch (err) {\n    guardedConsole('error',\n      'The user\\'s map/reduce function threw an uncaught error.\\n' +\n      'You can debug this error by doing:\\n' +\n      'myDatabase.on(\\'error\\', function (err) { debugger; });\\n' +\n      'Please double-check your map/reduce function.');\n    guardedConsole('error', e);\n  }\n}\n\nfunction tryCode$1(db, fun, args) {\n  // emit an event if there was an error thrown by a map/reduce function.\n  // putting try/catches in a single function also avoids deoptimizations.\n  try {\n    return {\n      output : fun.apply(null, args)\n    };\n  } catch (e) {\n    emitError(db, e);\n    return {error: e};\n  }\n}\n\nfunction sortByKeyThenValue(x, y) {\n  var keyCompare = collate(x.key, y.key);\n  return keyCompare !== 0 ? keyCompare : collate(x.value, y.value);\n}\n\nfunction sliceResults(results, limit, skip) {\n  skip = skip || 0;\n  if (typeof limit === 'number') {\n    return results.slice(skip, limit + skip);\n  } else if (skip > 0) {\n    return results.slice(skip);\n  }\n  return results;\n}\n\nfunction rowToDocId(row) {\n  var val = row.value;\n  // Users can explicitly specify a joined doc _id, or it\n  // defaults to the doc _id that emitted the key/value.\n  var docId = (val && typeof val === 'object' && val._id) || row.id;\n  return docId;\n}\n\nfunction readAttachmentsAsBlobOrBuffer$1(res) {\n  res.rows.forEach(function (row) {\n    var atts = row.doc && row.doc._attachments;\n    if (!atts) {\n      return;\n    }\n    Object.keys(atts).forEach(function (filename) {\n      var att = atts[filename];\n      atts[filename].data = b64ToBluffer(att.data, att.content_type);\n    });\n  });\n}\n\nfunction postprocessAttachments(opts) {\n  return function (res) {\n    if (opts.include_docs && opts.attachments && opts.binary) {\n      readAttachmentsAsBlobOrBuffer$1(res);\n    }\n    return res;\n  };\n}\n\nvar builtInReduce = {\n  _sum: function (keys, values) {\n    return sum(values);\n  },\n\n  _count: function (keys, values) {\n    return values.length;\n  },\n\n  _stats: function (keys, values) {\n    // no need to implement rereduce=true, because Pouch\n    // will never call it\n    function sumsqr(values) {\n      var _sumsqr = 0;\n      for (var i = 0, len = values.length; i < len; i++) {\n        var num = values[i];\n        _sumsqr += (num * num);\n      }\n      return _sumsqr;\n    }\n    return {\n      sum     : sum(values),\n      min     : Math.min.apply(null, values),\n      max     : Math.max.apply(null, values),\n      count   : values.length,\n      sumsqr : sumsqr(values)\n    };\n  }\n};\n\nfunction addHttpParam(paramName, opts, params, asJson) {\n  // add an http param from opts to params, optionally json-encoded\n  var val = opts[paramName];\n  if (typeof val !== 'undefined') {\n    if (asJson) {\n      val = encodeURIComponent(JSON.stringify(val));\n    }\n    params.push(paramName + '=' + val);\n  }\n}\n\nfunction coerceInteger(integerCandidate) {\n  if (typeof integerCandidate !== 'undefined') {\n    var asNumber = Number(integerCandidate);\n    // prevents e.g. '1foo' or '1.1' being coerced to 1\n    if (!isNaN(asNumber) && asNumber === parseInt(integerCandidate, 10)) {\n      return asNumber;\n    } else {\n      return integerCandidate;\n    }\n  }\n}\n\nfunction coerceOptions(opts) {\n  opts.group_level = coerceInteger(opts.group_level);\n  opts.limit = coerceInteger(opts.limit);\n  opts.skip = coerceInteger(opts.skip);\n  return opts;\n}\n\nfunction checkPositiveInteger(number) {\n  if (number) {\n    if (typeof number !== 'number') {\n      return  new QueryParseError('Invalid value for integer: \"' +\n      number + '\"');\n    }\n    if (number < 0) {\n      return new QueryParseError('Invalid value for positive integer: ' +\n        '\"' + number + '\"');\n    }\n  }\n}\n\nfunction checkQueryParseError(options, fun) {\n  var startkeyName = options.descending ? 'endkey' : 'startkey';\n  var endkeyName = options.descending ? 'startkey' : 'endkey';\n\n  if (typeof options[startkeyName] !== 'undefined' &&\n    typeof options[endkeyName] !== 'undefined' &&\n    collate(options[startkeyName], options[endkeyName]) > 0) {\n    throw new QueryParseError('No rows can match your key range, ' +\n    'reverse your start_key and end_key or set {descending : true}');\n  } else if (fun.reduce && options.reduce !== false) {\n    if (options.include_docs) {\n      throw new QueryParseError('{include_docs:true} is invalid for reduce');\n    } else if (options.keys && options.keys.length > 1 &&\n        !options.group && !options.group_level) {\n      throw new QueryParseError('Multi-key fetches for reduce views must use ' +\n      '{group: true}');\n    }\n  }\n  ['group_level', 'limit', 'skip'].forEach(function (optionName) {\n    var error = checkPositiveInteger(options[optionName]);\n    if (error) {\n      throw error;\n    }\n  });\n}\n\nfunction httpQuery(db, fun, opts) {\n  // List of parameters to add to the PUT request\n  var params = [];\n  var body;\n  var method = 'GET';\n\n  // If opts.reduce exists and is defined, then add it to the list\n  // of parameters.\n  // If reduce=false then the results are that of only the map function\n  // not the final result of map and reduce.\n  addHttpParam('reduce', opts, params);\n  addHttpParam('include_docs', opts, params);\n  addHttpParam('attachments', opts, params);\n  addHttpParam('limit', opts, params);\n  addHttpParam('descending', opts, params);\n  addHttpParam('group', opts, params);\n  addHttpParam('group_level', opts, params);\n  addHttpParam('skip', opts, params);\n  addHttpParam('stale', opts, params);\n  addHttpParam('conflicts', opts, params);\n  addHttpParam('startkey', opts, params, true);\n  addHttpParam('start_key', opts, params, true);\n  addHttpParam('endkey', opts, params, true);\n  addHttpParam('end_key', opts, params, true);\n  addHttpParam('inclusive_end', opts, params);\n  addHttpParam('key', opts, params, true);\n\n  // Format the list of parameters into a valid URI query string\n  params = params.join('&');\n  params = params === '' ? '' : '?' + params;\n\n  // If keys are supplied, issue a POST to circumvent GET query string limits\n  // see http://wiki.apache.org/couchdb/HTTP_view_API#Querying_Options\n  if (typeof opts.keys !== 'undefined') {\n    var MAX_URL_LENGTH = 2000;\n    // according to http://stackoverflow.com/a/417184/680742,\n    // the de facto URL length limit is 2000 characters\n\n    var keysAsString =\n      'keys=' + encodeURIComponent(JSON.stringify(opts.keys));\n    if (keysAsString.length + params.length + 1 <= MAX_URL_LENGTH) {\n      // If the keys are short enough, do a GET. we do this to work around\n      // Safari not understanding 304s on POSTs (see pouchdb/pouchdb#1239)\n      params += (params[0] === '?' ? '&' : '?') + keysAsString;\n    } else {\n      method = 'POST';\n      if (typeof fun === 'string') {\n        body = {keys: opts.keys};\n      } else { // fun is {map : mapfun}, so append to this\n        fun.keys = opts.keys;\n      }\n    }\n  }\n\n  // We are referencing a query defined in the design doc\n  if (typeof fun === 'string') {\n    var parts = parseViewName(fun);\n    return db.request({\n      method: method,\n      url: '_design/' + parts[0] + '/_view/' + parts[1] + params,\n      body: body\n    }).then(postprocessAttachments(opts));\n  }\n\n  // We are using a temporary view, terrible for performance, good for testing\n  body = body || {};\n  Object.keys(fun).forEach(function (key) {\n    if (Array.isArray(fun[key])) {\n      body[key] = fun[key];\n    } else {\n      body[key] = fun[key].toString();\n    }\n  });\n  return db.request({\n    method: 'POST',\n    url: '_temp_view' + params,\n    body: body\n  }).then(postprocessAttachments(opts));\n}\n\n// custom adapters can define their own api._query\n// and override the default behavior\n/* istanbul ignore next */\nfunction customQuery(db, fun, opts) {\n  return new PouchPromise(function (resolve, reject) {\n    db._query(fun, opts, function (err, res) {\n      if (err) {\n        return reject(err);\n      }\n      resolve(res);\n    });\n  });\n}\n\n// custom adapters can define their own api._viewCleanup\n// and override the default behavior\n/* istanbul ignore next */\nfunction customViewCleanup(db) {\n  return new PouchPromise(function (resolve, reject) {\n    db._viewCleanup(function (err, res) {\n      if (err) {\n        return reject(err);\n      }\n      resolve(res);\n    });\n  });\n}\n\nfunction defaultsTo(value) {\n  return function (reason) {\n    /* istanbul ignore else */\n    if (reason.status === 404) {\n      return value;\n    } else {\n      throw reason;\n    }\n  };\n}\n\n// returns a promise for a list of docs to update, based on the input docId.\n// the order doesn't matter, because post-3.2.0, bulkDocs\n// is an atomic operation in all three adapters.\nfunction getDocsToPersist(docId, view, docIdsToChangesAndEmits) {\n  var metaDocId = '_local/doc_' + docId;\n  var defaultMetaDoc = {_id: metaDocId, keys: []};\n  var docData = docIdsToChangesAndEmits[docId];\n  var indexableKeysToKeyValues = docData.indexableKeysToKeyValues;\n  var changes = docData.changes;\n\n  function getMetaDoc() {\n    if (isGenOne(changes)) {\n      // generation 1, so we can safely assume initial state\n      // for performance reasons (avoids unnecessary GETs)\n      return PouchPromise.resolve(defaultMetaDoc);\n    }\n    return view.db.get(metaDocId).catch(defaultsTo(defaultMetaDoc));\n  }\n\n  function getKeyValueDocs(metaDoc) {\n    if (!metaDoc.keys.length) {\n      // no keys, no need for a lookup\n      return PouchPromise.resolve({rows: []});\n    }\n    return view.db.allDocs({\n      keys: metaDoc.keys,\n      include_docs: true\n    });\n  }\n\n  function processKvDocs(metaDoc, kvDocsRes) {\n    var kvDocs = [];\n    var oldKeysMap = {};\n\n    for (var i = 0, len = kvDocsRes.rows.length; i < len; i++) {\n      var row = kvDocsRes.rows[i];\n      var doc = row.doc;\n      if (!doc) { // deleted\n        continue;\n      }\n      kvDocs.push(doc);\n      oldKeysMap[doc._id] = true;\n      doc._deleted = !indexableKeysToKeyValues[doc._id];\n      if (!doc._deleted) {\n        var keyValue = indexableKeysToKeyValues[doc._id];\n        if ('value' in keyValue) {\n          doc.value = keyValue.value;\n        }\n      }\n    }\n\n    var newKeys = Object.keys(indexableKeysToKeyValues);\n    newKeys.forEach(function (key) {\n      if (!oldKeysMap[key]) {\n        // new doc\n        var kvDoc = {\n          _id: key\n        };\n        var keyValue = indexableKeysToKeyValues[key];\n        if ('value' in keyValue) {\n          kvDoc.value = keyValue.value;\n        }\n        kvDocs.push(kvDoc);\n      }\n    });\n    metaDoc.keys = uniq(newKeys.concat(metaDoc.keys));\n    kvDocs.push(metaDoc);\n\n    return kvDocs;\n  }\n\n  return getMetaDoc().then(function (metaDoc) {\n    return getKeyValueDocs(metaDoc).then(function (kvDocsRes) {\n      return processKvDocs(metaDoc, kvDocsRes);\n    });\n  });\n}\n\n// updates all emitted key/value docs and metaDocs in the mrview database\n// for the given batch of documents from the source database\nfunction saveKeyValues(view, docIdsToChangesAndEmits, seq) {\n  var seqDocId = '_local/lastSeq';\n  return view.db.get(seqDocId)\n  .catch(defaultsTo({_id: seqDocId, seq: 0}))\n  .then(function (lastSeqDoc) {\n    var docIds = Object.keys(docIdsToChangesAndEmits);\n    return PouchPromise.all(docIds.map(function (docId) {\n      return getDocsToPersist(docId, view, docIdsToChangesAndEmits);\n    })).then(function (listOfDocsToPersist) {\n      var docsToPersist = flatten(listOfDocsToPersist);\n      lastSeqDoc.seq = seq;\n      docsToPersist.push(lastSeqDoc);\n      // write all docs in a single operation, update the seq once\n      return view.db.bulkDocs({docs : docsToPersist});\n    });\n  });\n}\n\nfunction getQueue(view) {\n  var viewName = typeof view === 'string' ? view : view.name;\n  var queue = persistentQueues[viewName];\n  if (!queue) {\n    queue = persistentQueues[viewName] = new TaskQueue$1();\n  }\n  return queue;\n}\n\nfunction updateView(view) {\n  return sequentialize(getQueue(view), function () {\n    return updateViewInQueue(view);\n  })();\n}\n\nfunction updateViewInQueue(view) {\n  // bind the emit function once\n  var mapResults;\n  var doc;\n\n  function emit(key, value) {\n    var output = {id: doc._id, key: normalizeKey(key)};\n    // Don't explicitly store the value unless it's defined and non-null.\n    // This saves on storage space, because often people don't use it.\n    if (typeof value !== 'undefined' && value !== null) {\n      output.value = normalizeKey(value);\n    }\n    mapResults.push(output);\n  }\n\n  var mapFun;\n  // for temp_views one can use emit(doc, emit), see #38\n  if (typeof view.mapFun === \"function\" && view.mapFun.length === 2) {\n    var origMap = view.mapFun;\n    mapFun = function (doc) {\n      return origMap(doc, emit);\n    };\n  } else {\n    mapFun = evalFunctionWithEval(view.mapFun.toString(), emit);\n  }\n\n  var currentSeq = view.seq || 0;\n\n  function processChange(docIdsToChangesAndEmits, seq) {\n    return function () {\n      return saveKeyValues(view, docIdsToChangesAndEmits, seq);\n    };\n  }\n\n  var queue = new TaskQueue$1();\n  // TODO(neojski): https://github.com/daleharvey/pouchdb/issues/1521\n\n  return new PouchPromise(function (resolve, reject) {\n\n    function complete() {\n      queue.finish().then(function () {\n        view.seq = currentSeq;\n        resolve();\n      });\n    }\n\n    function processNextBatch() {\n      view.sourceDB.changes({\n        conflicts: true,\n        include_docs: true,\n        style: 'all_docs',\n        since: currentSeq,\n        limit: CHANGES_BATCH_SIZE$1\n      }).on('complete', function (response) {\n        var results = response.results;\n        if (!results.length) {\n          return complete();\n        }\n        var docIdsToChangesAndEmits = {};\n        for (var i = 0, l = results.length; i < l; i++) {\n          var change = results[i];\n          if (change.doc._id[0] !== '_') {\n            mapResults = [];\n            doc = change.doc;\n\n            if (!doc._deleted) {\n              tryCode$1(view.sourceDB, mapFun, [doc]);\n            }\n            mapResults.sort(sortByKeyThenValue);\n\n            var indexableKeysToKeyValues = {};\n            var lastKey;\n            for (var j = 0, jl = mapResults.length; j < jl; j++) {\n              var obj = mapResults[j];\n              var complexKey = [obj.key, obj.id];\n              if (collate(obj.key, lastKey) === 0) {\n                complexKey.push(j); // dup key+id, so make it unique\n              }\n              var indexableKey = toIndexableString(complexKey);\n              indexableKeysToKeyValues[indexableKey] = obj;\n              lastKey = obj.key;\n            }\n            docIdsToChangesAndEmits[change.doc._id] = {\n              indexableKeysToKeyValues: indexableKeysToKeyValues,\n              changes: change.changes\n            };\n          }\n          currentSeq = change.seq;\n        }\n        queue.add(processChange(docIdsToChangesAndEmits, currentSeq));\n        if (results.length < CHANGES_BATCH_SIZE$1) {\n          return complete();\n        }\n        return processNextBatch();\n      }).on('error', onError);\n      /* istanbul ignore next */\n      function onError(err) {\n        reject(err);\n      }\n    }\n\n    processNextBatch();\n  });\n}\n\nfunction reduceView(view, results, options) {\n  if (options.group_level === 0) {\n    delete options.group_level;\n  }\n\n  var shouldGroup = options.group || options.group_level;\n\n  var reduceFun;\n  if (builtInReduce[view.reduceFun]) {\n    reduceFun = builtInReduce[view.reduceFun];\n  } else {\n    reduceFun = evalFunctionWithEval(view.reduceFun.toString());\n  }\n\n  var groups = [];\n  var lvl = isNaN(options.group_level) ? Number.POSITIVE_INFINITY :\n    options.group_level;\n  results.forEach(function (e) {\n    var last = groups[groups.length - 1];\n    var groupKey = shouldGroup ? e.key : null;\n\n    // only set group_level for array keys\n    if (shouldGroup && Array.isArray(groupKey)) {\n      groupKey = groupKey.slice(0, lvl);\n    }\n\n    if (last && collate(last.groupKey, groupKey) === 0) {\n      last.keys.push([e.key, e.id]);\n      last.values.push(e.value);\n      return;\n    }\n    groups.push({\n      keys: [[e.key, e.id]],\n      values: [e.value],\n      groupKey: groupKey\n    });\n  });\n  results = [];\n  for (var i = 0, len = groups.length; i < len; i++) {\n    var e = groups[i];\n    var reduceTry = tryCode$1(view.sourceDB, reduceFun,\n      [e.keys, e.values, false]);\n    if (reduceTry.error && reduceTry.error instanceof BuiltInError) {\n      // CouchDB returns an error if a built-in errors out\n      throw reduceTry.error;\n    }\n    results.push({\n      // CouchDB just sets the value to null if a non-built-in errors out\n      value: reduceTry.error ? null : reduceTry.output,\n      key: e.groupKey\n    });\n  }\n  // no total_rows/offset when reducing\n  return {rows: sliceResults(results, options.limit, options.skip)};\n}\n\nfunction queryView(view, opts) {\n  return sequentialize(getQueue(view), function () {\n    return queryViewInQueue(view, opts);\n  })();\n}\n\nfunction queryViewInQueue(view, opts) {\n  var totalRows;\n  var shouldReduce = view.reduceFun && opts.reduce !== false;\n  var skip = opts.skip || 0;\n  if (typeof opts.keys !== 'undefined' && !opts.keys.length) {\n    // equivalent query\n    opts.limit = 0;\n    delete opts.keys;\n  }\n\n  function fetchFromView(viewOpts) {\n    viewOpts.include_docs = true;\n    return view.db.allDocs(viewOpts).then(function (res) {\n      totalRows = res.total_rows;\n      return res.rows.map(function (result) {\n\n        // implicit migration - in older versions of PouchDB,\n        // we explicitly stored the doc as {id: ..., key: ..., value: ...}\n        // this is tested in a migration test\n        /* istanbul ignore next */\n        if ('value' in result.doc && typeof result.doc.value === 'object' &&\n            result.doc.value !== null) {\n          var keys = Object.keys(result.doc.value).sort();\n          // this detection method is not perfect, but it's unlikely the user\n          // emitted a value which was an object with these 3 exact keys\n          var expectedKeys = ['id', 'key', 'value'];\n          if (!(keys < expectedKeys || keys > expectedKeys)) {\n            return result.doc.value;\n          }\n        }\n\n        var parsedKeyAndDocId = parseIndexableString(result.doc._id);\n        return {\n          key: parsedKeyAndDocId[0],\n          id: parsedKeyAndDocId[1],\n          value: ('value' in result.doc ? result.doc.value : null)\n        };\n      });\n    });\n  }\n\n  function onMapResultsReady(rows) {\n    var finalResults;\n    if (shouldReduce) {\n      finalResults = reduceView(view, rows, opts);\n    } else {\n      finalResults = {\n        total_rows: totalRows,\n        offset: skip,\n        rows: rows\n      };\n    }\n    if (opts.include_docs) {\n      var docIds = uniq(rows.map(rowToDocId));\n\n      return view.sourceDB.allDocs({\n        keys: docIds,\n        include_docs: true,\n        conflicts: opts.conflicts,\n        attachments: opts.attachments,\n        binary: opts.binary\n      }).then(function (allDocsRes) {\n        var docIdsToDocs = {};\n        allDocsRes.rows.forEach(function (row) {\n          if (row.doc) {\n            docIdsToDocs['$' + row.id] = row.doc;\n          }\n        });\n        rows.forEach(function (row) {\n          var docId = rowToDocId(row);\n          var doc = docIdsToDocs['$' + docId];\n          if (doc) {\n            row.doc = doc;\n          }\n        });\n        return finalResults;\n      });\n    } else {\n      return finalResults;\n    }\n  }\n\n  if (typeof opts.keys !== 'undefined') {\n    var keys = opts.keys;\n    var fetchPromises = keys.map(function (key) {\n      var viewOpts = {\n        startkey : toIndexableString([key]),\n        endkey   : toIndexableString([key, {}])\n      };\n      return fetchFromView(viewOpts);\n    });\n    return PouchPromise.all(fetchPromises).then(flatten).then(onMapResultsReady);\n  } else { // normal query, no 'keys'\n    var viewOpts = {\n      descending : opts.descending\n    };\n    if (opts.start_key) {\n        opts.startkey = opts.start_key;\n    }\n    if (opts.end_key) {\n        opts.endkey = opts.end_key;\n    }\n    if (typeof opts.startkey !== 'undefined') {\n      viewOpts.startkey = opts.descending ?\n        toIndexableString([opts.startkey, {}]) :\n        toIndexableString([opts.startkey]);\n    }\n    if (typeof opts.endkey !== 'undefined') {\n      var inclusiveEnd = opts.inclusive_end !== false;\n      if (opts.descending) {\n        inclusiveEnd = !inclusiveEnd;\n      }\n\n      viewOpts.endkey = toIndexableString(\n        inclusiveEnd ? [opts.endkey, {}] : [opts.endkey]);\n    }\n    if (typeof opts.key !== 'undefined') {\n      var keyStart = toIndexableString([opts.key]);\n      var keyEnd = toIndexableString([opts.key, {}]);\n      if (viewOpts.descending) {\n        viewOpts.endkey = keyStart;\n        viewOpts.startkey = keyEnd;\n      } else {\n        viewOpts.startkey = keyStart;\n        viewOpts.endkey = keyEnd;\n      }\n    }\n    if (!shouldReduce) {\n      if (typeof opts.limit === 'number') {\n        viewOpts.limit = opts.limit;\n      }\n      viewOpts.skip = skip;\n    }\n    return fetchFromView(viewOpts).then(onMapResultsReady);\n  }\n}\n\nfunction httpViewCleanup(db) {\n  return db.request({\n    method: 'POST',\n    url: '_view_cleanup'\n  });\n}\n\nfunction localViewCleanup(db) {\n  return db.get('_local/mrviews').then(function (metaDoc) {\n    var docsToViews = {};\n    Object.keys(metaDoc.views).forEach(function (fullViewName) {\n      var parts = parseViewName(fullViewName);\n      var designDocName = '_design/' + parts[0];\n      var viewName = parts[1];\n      docsToViews[designDocName] = docsToViews[designDocName] || {};\n      docsToViews[designDocName][viewName] = true;\n    });\n    var opts = {\n      keys : Object.keys(docsToViews),\n      include_docs : true\n    };\n    return db.allDocs(opts).then(function (res) {\n      var viewsToStatus = {};\n      res.rows.forEach(function (row) {\n        var ddocName = row.key.substring(8);\n        Object.keys(docsToViews[row.key]).forEach(function (viewName) {\n          var fullViewName = ddocName + '/' + viewName;\n          /* istanbul ignore if */\n          if (!metaDoc.views[fullViewName]) {\n            // new format, without slashes, to support PouchDB 2.2.0\n            // migration test in pouchdb's browser.migration.js verifies this\n            fullViewName = viewName;\n          }\n          var viewDBNames = Object.keys(metaDoc.views[fullViewName]);\n          // design doc deleted, or view function nonexistent\n          var statusIsGood = row.doc && row.doc.views &&\n            row.doc.views[viewName];\n          viewDBNames.forEach(function (viewDBName) {\n            viewsToStatus[viewDBName] =\n              viewsToStatus[viewDBName] || statusIsGood;\n          });\n        });\n      });\n      var dbsToDelete = Object.keys(viewsToStatus).filter(\n        function (viewDBName) { return !viewsToStatus[viewDBName]; });\n      var destroyPromises = dbsToDelete.map(function (viewDBName) {\n        return sequentialize(getQueue(viewDBName), function () {\n          return new db.constructor(viewDBName, db.__opts).destroy();\n        })();\n      });\n      return PouchPromise.all(destroyPromises).then(function () {\n        return {ok: true};\n      });\n    });\n  }, defaultsTo({ok: true}));\n}\n\nvar viewCleanup = callbackify(function () {\n  var db = this;\n  if (db.type() === 'http') {\n    return httpViewCleanup(db);\n  }\n  /* istanbul ignore next */\n  if (typeof db._viewCleanup === 'function') {\n    return customViewCleanup(db);\n  }\n  return localViewCleanup(db);\n});\n\nfunction queryPromised(db, fun, opts) {\n  if (db.type() === 'http') {\n    return httpQuery(db, fun, opts);\n  }\n\n  /* istanbul ignore next */\n  if (typeof db._query === 'function') {\n    return customQuery(db, fun, opts);\n  }\n\n  if (typeof fun !== 'string') {\n    // temp_view\n    checkQueryParseError(opts, fun);\n\n    var createViewOpts = {\n      db : db,\n      viewName : 'temp_view/temp_view',\n      map : fun.map,\n      reduce : fun.reduce,\n      temporary : true\n    };\n    tempViewQueue.add(function () {\n      return createView(createViewOpts).then(function (view) {\n        function cleanup() {\n          return view.db.destroy();\n        }\n        return fin(updateView(view).then(function () {\n          return queryView(view, opts);\n        }), cleanup);\n      });\n    });\n    return tempViewQueue.finish();\n  } else {\n    // persistent view\n    var fullViewName = fun;\n    var parts = parseViewName(fullViewName);\n    var designDocName = parts[0];\n    var viewName = parts[1];\n    return db.get('_design/' + designDocName).then(function (doc) {\n      var fun = doc.views && doc.views[viewName];\n\n      if (!fun || typeof fun.map !== 'string') {\n        throw new NotFoundError('ddoc ' + designDocName +\n        ' has no view named ' + viewName);\n      }\n      checkQueryParseError(opts, fun);\n\n      var createViewOpts = {\n        db : db,\n        viewName : fullViewName,\n        map : fun.map,\n        reduce : fun.reduce\n      };\n      return createView(createViewOpts).then(function (view) {\n        if (opts.stale === 'ok' || opts.stale === 'update_after') {\n          if (opts.stale === 'update_after') {\n            process.nextTick(function () {\n              updateView(view);\n            });\n          }\n          return queryView(view, opts);\n        } else { // stale not ok\n          return updateView(view).then(function () {\n            return queryView(view, opts);\n          });\n        }\n      });\n    });\n  }\n}\n\nvar query = function (fun, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts ? coerceOptions(opts) : {};\n\n  if (typeof fun === 'function') {\n    fun = {map : fun};\n  }\n\n  var db = this;\n  var promise = PouchPromise.resolve().then(function () {\n    return queryPromised(db, fun, opts);\n  });\n  promisedCallback(promise, callback);\n  return promise;\n};\n\n\nvar mapreduce = {\n  query: query,\n  viewCleanup: viewCleanup\n};\n\nfunction isGenOne$1(rev) {\n  return /^1-/.test(rev);\n}\n\nfunction fileHasChanged(localDoc, remoteDoc, filename) {\n  return !localDoc._attachments ||\n         !localDoc._attachments[filename] ||\n         localDoc._attachments[filename].digest !== remoteDoc._attachments[filename].digest;\n}\n\nfunction getDocAttachments(db, doc) {\n  var filenames = Object.keys(doc._attachments);\n  return PouchPromise.all(filenames.map(function (filename) {\n    return db.getAttachment(doc._id, filename, {rev: doc._rev});\n  }));\n}\n\nfunction getDocAttachmentsFromTargetOrSource(target, src, doc) {\n  var doCheckForLocalAttachments = src.type() === 'http' && target.type() !== 'http';\n  var filenames = Object.keys(doc._attachments);\n\n  if (!doCheckForLocalAttachments) {\n    return getDocAttachments(src, doc);\n  }\n\n  return target.get(doc._id).then(function (localDoc) {\n    return PouchPromise.all(filenames.map(function (filename) {\n      if (fileHasChanged(localDoc, doc, filename)) {\n        return src.getAttachment(doc._id, filename);\n      }\n\n      return target.getAttachment(localDoc._id, filename);\n    }));\n  }).catch(function (error) {\n    /* istanbul ignore if */\n    if (error.status !== 404) {\n      throw error;\n    }\n\n    return getDocAttachments(src, doc);\n  });\n}\n\nfunction createBulkGetOpts(diffs) {\n  var requests = [];\n  Object.keys(diffs).forEach(function (id) {\n    var missingRevs = diffs[id].missing;\n    missingRevs.forEach(function (missingRev) {\n      requests.push({\n        id: id,\n        rev: missingRev\n      });\n    });\n  });\n\n  return {\n    docs: requests,\n    revs: true\n  };\n}\n\n//\n// Fetch all the documents from the src as described in the \"diffs\",\n// which is a mapping of docs IDs to revisions. If the state ever\n// changes to \"cancelled\", then the returned promise will be rejected.\n// Else it will be resolved with a list of fetched documents.\n//\nfunction getDocs(src, target, diffs, state) {\n  diffs = clone(diffs); // we do not need to modify this\n\n  var resultDocs = [],\n      ok = true;\n\n  function getAllDocs() {\n\n    var bulkGetOpts = createBulkGetOpts(diffs);\n\n    if (!bulkGetOpts.docs.length) { // optimization: skip empty requests\n      return;\n    }\n\n    return src.bulkGet(bulkGetOpts).then(function (bulkGetResponse) {\n      /* istanbul ignore if */\n      if (state.cancelled) {\n        throw new Error('cancelled');\n      }\n      return PouchPromise.all(bulkGetResponse.results.map(function (bulkGetInfo) {\n        return PouchPromise.all(bulkGetInfo.docs.map(function (doc) {\n          var remoteDoc = doc.ok;\n\n          if (doc.error) {\n            // when AUTO_COMPACTION is set, docs can be returned which look\n            // like this: {\"missing\":\"1-7c3ac256b693c462af8442f992b83696\"}\n            ok = false;\n          }\n\n          if (!remoteDoc || !remoteDoc._attachments) {\n            return remoteDoc;\n          }\n\n          return getDocAttachmentsFromTargetOrSource(target, src, remoteDoc).then(function (attachments) {\n            var filenames = Object.keys(remoteDoc._attachments);\n            attachments.forEach(function (attachment, i) {\n              var att = remoteDoc._attachments[filenames[i]];\n              delete att.stub;\n              delete att.length;\n              att.data = attachment;\n            });\n\n            return remoteDoc;\n          });\n        }));\n      }))\n\n      .then(function (results) {\n        resultDocs = resultDocs.concat(flatten(results).filter(Boolean));\n      });\n    });\n  }\n\n  function hasAttachments(doc) {\n    return doc._attachments && Object.keys(doc._attachments).length > 0;\n  }\n\n  function fetchRevisionOneDocs(ids) {\n    // Optimization: fetch gen-1 docs and attachments in\n    // a single request using _all_docs\n    return src.allDocs({\n      keys: ids,\n      include_docs: true\n    }).then(function (res) {\n      if (state.cancelled) {\n        throw new Error('cancelled');\n      }\n      res.rows.forEach(function (row) {\n        if (row.deleted || !row.doc || !isGenOne$1(row.value.rev) ||\n            hasAttachments(row.doc)) {\n          // if any of these conditions apply, we need to fetch using get()\n          return;\n        }\n\n        // the doc we got back from allDocs() is sufficient\n        resultDocs.push(row.doc);\n        delete diffs[row.id];\n      });\n    });\n  }\n\n  function getRevisionOneDocs() {\n    // filter out the generation 1 docs and get them\n    // leaving the non-generation one docs to be got otherwise\n    var ids = Object.keys(diffs).filter(function (id) {\n      var missing = diffs[id].missing;\n      return missing.length === 1 && isGenOne$1(missing[0]);\n    });\n    if (ids.length > 0) {\n      return fetchRevisionOneDocs(ids);\n    }\n  }\n\n  function returnResult() {\n    return { ok:ok, docs:resultDocs };\n  }\n\n  return PouchPromise.resolve()\n    .then(getRevisionOneDocs)\n    .then(getAllDocs)\n    .then(returnResult);\n}\n\nvar CHECKPOINT_VERSION = 1;\nvar REPLICATOR = \"pouchdb\";\n// This is an arbitrary number to limit the\n// amount of replication history we save in the checkpoint.\n// If we save too much, the checkpoing docs will become very big,\n// if we save fewer, we'll run a greater risk of having to\n// read all the changes from 0 when checkpoint PUTs fail\n// CouchDB 2.0 has a more involved history pruning,\n// but let's go for the simple version for now.\nvar CHECKPOINT_HISTORY_SIZE = 5;\nvar LOWEST_SEQ = 0;\n\nfunction updateCheckpoint(db, id, checkpoint, session, returnValue) {\n  return db.get(id).catch(function (err) {\n    if (err.status === 404) {\n      if (db.type() === 'http') {\n        explainError(\n          404, 'PouchDB is just checking if a remote checkpoint exists.'\n        );\n      }\n      return {\n        session_id: session,\n        _id: id,\n        history: [],\n        replicator: REPLICATOR,\n        version: CHECKPOINT_VERSION\n      };\n    }\n    throw err;\n  }).then(function (doc) {\n    if (returnValue.cancelled) {\n      return;\n    }\n\n    // if the checkpoint has not changed, do not update\n    if (doc.last_seq === checkpoint) {\n      return;\n    }\n\n    // Filter out current entry for this replication\n    doc.history = (doc.history || []).filter(function (item) {\n      return item.session_id !== session;\n    });\n\n    // Add the latest checkpoint to history\n    doc.history.unshift({\n      last_seq: checkpoint,\n      session_id: session\n    });\n\n    // Just take the last pieces in history, to\n    // avoid really big checkpoint docs.\n    // see comment on history size above\n    doc.history = doc.history.slice(0, CHECKPOINT_HISTORY_SIZE);\n\n    doc.version = CHECKPOINT_VERSION;\n    doc.replicator = REPLICATOR;\n\n    doc.session_id = session;\n    doc.last_seq = checkpoint;\n\n    return db.put(doc).catch(function (err) {\n      if (err.status === 409) {\n        // retry; someone is trying to write a checkpoint simultaneously\n        return updateCheckpoint(db, id, checkpoint, session, returnValue);\n      }\n      throw err;\n    });\n  });\n}\n\nfunction Checkpointer(src, target, id, returnValue) {\n  this.src = src;\n  this.target = target;\n  this.id = id;\n  this.returnValue = returnValue;\n}\n\nCheckpointer.prototype.writeCheckpoint = function (checkpoint, session) {\n  var self = this;\n  return this.updateTarget(checkpoint, session).then(function () {\n    return self.updateSource(checkpoint, session);\n  });\n};\n\nCheckpointer.prototype.updateTarget = function (checkpoint, session) {\n  return updateCheckpoint(this.target, this.id, checkpoint,\n    session, this.returnValue);\n};\n\nCheckpointer.prototype.updateSource = function (checkpoint, session) {\n  var self = this;\n  if (this.readOnlySource) {\n    return PouchPromise.resolve(true);\n  }\n  return updateCheckpoint(this.src, this.id, checkpoint,\n    session, this.returnValue)\n    .catch(function (err) {\n      if (isForbiddenError(err)) {\n        self.readOnlySource = true;\n        return true;\n      }\n      throw err;\n    });\n};\n\nvar comparisons = {\n  \"undefined\": function (targetDoc, sourceDoc) {\n    // This is the previous comparison function\n    if (collate(targetDoc.last_seq, sourceDoc.last_seq) === 0) {\n      return sourceDoc.last_seq;\n    }\n    /* istanbul ignore next */\n    return 0;\n  },\n  \"1\": function (targetDoc, sourceDoc) {\n    // This is the comparison function ported from CouchDB\n    return compareReplicationLogs(sourceDoc, targetDoc).last_seq;\n  }\n};\n\nCheckpointer.prototype.getCheckpoint = function () {\n  var self = this;\n  return self.target.get(self.id).then(function (targetDoc) {\n    if (self.readOnlySource) {\n      return PouchPromise.resolve(targetDoc.last_seq);\n    }\n\n    return self.src.get(self.id).then(function (sourceDoc) {\n      // Since we can't migrate an old version doc to a new one\n      // (no session id), we just go with the lowest seq in this case\n      /* istanbul ignore if */\n      if (targetDoc.version !== sourceDoc.version) {\n        return LOWEST_SEQ;\n      }\n\n      var version;\n      if (targetDoc.version) {\n        version = targetDoc.version.toString();\n      } else {\n        version = \"undefined\";\n      }\n\n      if (version in comparisons) {\n        return comparisons[version](targetDoc, sourceDoc);\n      }\n      /* istanbul ignore next */\n      return LOWEST_SEQ;\n    }, function (err) {\n      if (err.status === 404 && targetDoc.last_seq) {\n        return self.src.put({\n          _id: self.id,\n          last_seq: LOWEST_SEQ\n        }).then(function () {\n          return LOWEST_SEQ;\n        }, function (err) {\n          if (isForbiddenError(err)) {\n            self.readOnlySource = true;\n            return targetDoc.last_seq;\n          }\n          /* istanbul ignore next */\n          return LOWEST_SEQ;\n        });\n      }\n      throw err;\n    });\n  }).catch(function (err) {\n    if (err.status !== 404) {\n      throw err;\n    }\n    return LOWEST_SEQ;\n  });\n};\n// This checkpoint comparison is ported from CouchDBs source\n// they come from here:\n// https://github.com/apache/couchdb-couch-replicator/blob/master/src/couch_replicator.erl#L863-L906\n\nfunction compareReplicationLogs(srcDoc, tgtDoc) {\n  if (srcDoc.session_id === tgtDoc.session_id) {\n    return {\n      last_seq: srcDoc.last_seq,\n      history: srcDoc.history\n    };\n  }\n\n  return compareReplicationHistory(srcDoc.history, tgtDoc.history);\n}\n\nfunction compareReplicationHistory(sourceHistory, targetHistory) {\n  // the erlang loop via function arguments is not so easy to repeat in JS\n  // therefore, doing this as recursion\n  var S = sourceHistory[0];\n  var sourceRest = sourceHistory.slice(1);\n  var T = targetHistory[0];\n  var targetRest = targetHistory.slice(1);\n\n  if (!S || targetHistory.length === 0) {\n    return {\n      last_seq: LOWEST_SEQ,\n      history: []\n    };\n  }\n\n  var sourceId = S.session_id;\n  /* istanbul ignore if */\n  if (hasSessionId(sourceId, targetHistory)) {\n    return {\n      last_seq: S.last_seq,\n      history: sourceHistory\n    };\n  }\n\n  var targetId = T.session_id;\n  if (hasSessionId(targetId, sourceRest)) {\n    return {\n      last_seq: T.last_seq,\n      history: targetRest\n    };\n  }\n\n  return compareReplicationHistory(sourceRest, targetRest);\n}\n\nfunction hasSessionId(sessionId, history) {\n  var props = history[0];\n  var rest = history.slice(1);\n\n  if (!sessionId || history.length === 0) {\n    return false;\n  }\n\n  if (sessionId === props.session_id) {\n    return true;\n  }\n\n  return hasSessionId(sessionId, rest);\n}\n\nfunction isForbiddenError(err) {\n  return typeof err.status === 'number' && Math.floor(err.status / 100) === 4;\n}\n\nvar STARTING_BACK_OFF = 0;\n\nfunction backOff(opts, returnValue, error, callback) {\n  if (opts.retry === false) {\n    returnValue.emit('error', error);\n    returnValue.removeAllListeners();\n    return;\n  }\n  if (typeof opts.back_off_function !== 'function') {\n    opts.back_off_function = defaultBackOff;\n  }\n  returnValue.emit('requestError', error);\n  if (returnValue.state === 'active' || returnValue.state === 'pending') {\n    returnValue.emit('paused', error);\n    returnValue.state = 'stopped';\n    var backOffSet = function backoffTimeSet() {\n      opts.current_back_off = STARTING_BACK_OFF;\n    };\n    var removeBackOffSetter = function removeBackOffTimeSet() {\n      returnValue.removeListener('active', backOffSet);\n    };\n    returnValue.once('paused', removeBackOffSetter);\n    returnValue.once('active', backOffSet);\n  }\n\n  opts.current_back_off = opts.current_back_off || STARTING_BACK_OFF;\n  opts.current_back_off = opts.back_off_function(opts.current_back_off);\n  setTimeout(callback, opts.current_back_off);\n}\n\nfunction sortObjectPropertiesByKey(queryParams) {\n  return Object.keys(queryParams).sort(collate).reduce(function (result, key) {\n    result[key] = queryParams[key];\n    return result;\n  }, {});\n}\n\n// Generate a unique id particular to this replication.\n// Not guaranteed to align perfectly with CouchDB's rep ids.\nfunction generateReplicationId(src, target, opts) {\n  var docIds = opts.doc_ids ? opts.doc_ids.sort(collate) : '';\n  var filterFun = opts.filter ? opts.filter.toString() : '';\n  var queryParams = '';\n  var filterViewName =  '';\n\n  if (opts.filter && opts.query_params) {\n    queryParams = JSON.stringify(sortObjectPropertiesByKey(opts.query_params));\n  }\n\n  if (opts.filter && opts.filter === '_view') {\n    filterViewName = opts.view.toString();\n  }\n\n  return PouchPromise.all([src.id(), target.id()]).then(function (res) {\n    var queryData = res[0] + res[1] + filterFun + filterViewName +\n      queryParams + docIds;\n    return new PouchPromise(function (resolve) {\n      binaryMd5(queryData, resolve);\n    });\n  }).then(function (md5sum) {\n    // can't use straight-up md5 alphabet, because\n    // the char '/' is interpreted as being for attachments,\n    // and + is also not url-safe\n    md5sum = md5sum.replace(/\\//g, '.').replace(/\\+/g, '_');\n    return '_local/' + md5sum;\n  });\n}\n\nfunction replicate$1(src, target, opts, returnValue, result) {\n  var batches = [];               // list of batches to be processed\n  var currentBatch;               // the batch currently being processed\n  var pendingBatch = {\n    seq: 0,\n    changes: [],\n    docs: []\n  }; // next batch, not yet ready to be processed\n  var writingCheckpoint = false;  // true while checkpoint is being written\n  var changesCompleted = false;   // true when all changes received\n  var replicationCompleted = false; // true when replication has completed\n  var last_seq = 0;\n  var continuous = opts.continuous || opts.live || false;\n  var batch_size = opts.batch_size || 100;\n  var batches_limit = opts.batches_limit || 10;\n  var changesPending = false;     // true while src.changes is running\n  var doc_ids = opts.doc_ids;\n  var repId;\n  var checkpointer;\n  var changedDocs = [];\n  // Like couchdb, every replication gets a unique session id\n  var session = uuid();\n\n  result = result || {\n    ok: true,\n    start_time: new Date(),\n    docs_read: 0,\n    docs_written: 0,\n    doc_write_failures: 0,\n    errors: []\n  };\n\n  var changesOpts = {};\n  returnValue.ready(src, target);\n\n  function initCheckpointer() {\n    if (checkpointer) {\n      return PouchPromise.resolve();\n    }\n    return generateReplicationId(src, target, opts).then(function (res) {\n      repId = res;\n      checkpointer = new Checkpointer(src, target, repId, returnValue);\n    });\n  }\n\n  function writeDocs() {\n    changedDocs = [];\n\n    if (currentBatch.docs.length === 0) {\n      return;\n    }\n    var docs = currentBatch.docs;\n    var bulkOpts = {timeout: opts.timeout};\n    return target.bulkDocs({docs: docs, new_edits: false}, bulkOpts).then(function (res) {\n      /* istanbul ignore if */\n      if (returnValue.cancelled) {\n        completeReplication();\n        throw new Error('cancelled');\n      }\n\n      // `res` doesn't include full documents (which live in `docs`), so we create a map of \n      // (id -> error), and check for errors while iterating over `docs`\n      var errorsById = Object.create(null);\n      res.forEach(function (res) {\n        if (res.error) {\n          errorsById[res.id] = res;\n        }\n      });\n\n      var errorsNo = Object.keys(errorsById).length;\n      result.doc_write_failures += errorsNo;\n      result.docs_written += docs.length - errorsNo;\n\n      docs.forEach(function (doc) {\n        var error = errorsById[doc._id];\n        if (error) {\n          result.errors.push(error);\n          if (error.name === 'unauthorized' || error.name === 'forbidden') {\n            returnValue.emit('denied', clone(error));\n          } else {\n            throw error;\n          }\n        } else {\n          changedDocs.push(doc);\n        }\n      });\n\n    }, function (err) {\n      result.doc_write_failures += docs.length;\n      throw err;\n    });\n  }\n\n  function finishBatch() {\n    if (currentBatch.error) {\n      throw new Error('There was a problem getting docs.');\n    }\n    result.last_seq = last_seq = currentBatch.seq;\n    var outResult = clone(result);\n    if (changedDocs.length) {\n      outResult.docs = changedDocs;\n      returnValue.emit('change', outResult);\n    }\n    writingCheckpoint = true;\n    return checkpointer.writeCheckpoint(currentBatch.seq,\n        session).then(function () {\n      writingCheckpoint = false;\n      /* istanbul ignore if */\n      if (returnValue.cancelled) {\n        completeReplication();\n        throw new Error('cancelled');\n      }\n      currentBatch = undefined;\n      getChanges();\n    }).catch(function (err) {\n      onCheckpointError(err);\n      throw err;\n    });\n  }\n\n  function getDiffs() {\n    var diff = {};\n    currentBatch.changes.forEach(function (change) {\n      // Couchbase Sync Gateway emits these, but we can ignore them\n      /* istanbul ignore if */\n      if (change.id === \"_user/\") {\n        return;\n      }\n      diff[change.id] = change.changes.map(function (x) {\n        return x.rev;\n      });\n    });\n    return target.revsDiff(diff).then(function (diffs) {\n      /* istanbul ignore if */\n      if (returnValue.cancelled) {\n        completeReplication();\n        throw new Error('cancelled');\n      }\n      // currentBatch.diffs elements are deleted as the documents are written\n      currentBatch.diffs = diffs;\n    });\n  }\n\n  function getBatchDocs() {\n    return getDocs(src, target, currentBatch.diffs, returnValue).then(function (got) {\n      currentBatch.error = !got.ok;\n      got.docs.forEach(function (doc) {\n        delete currentBatch.diffs[doc._id];\n        result.docs_read++;\n        currentBatch.docs.push(doc);\n      });\n    });\n  }\n\n  function startNextBatch() {\n    if (returnValue.cancelled || currentBatch) {\n      return;\n    }\n    if (batches.length === 0) {\n      processPendingBatch(true);\n      return;\n    }\n    currentBatch = batches.shift();\n    getDiffs()\n      .then(getBatchDocs)\n      .then(writeDocs)\n      .then(finishBatch)\n      .then(startNextBatch)\n      .catch(function (err) {\n        abortReplication('batch processing terminated with error', err);\n      });\n  }\n\n\n  function processPendingBatch(immediate) {\n    if (pendingBatch.changes.length === 0) {\n      if (batches.length === 0 && !currentBatch) {\n        if ((continuous && changesOpts.live) || changesCompleted) {\n          returnValue.state = 'pending';\n          returnValue.emit('paused');\n        }\n        if (changesCompleted) {\n          completeReplication();\n        }\n      }\n      return;\n    }\n    if (\n      immediate ||\n      changesCompleted ||\n      pendingBatch.changes.length >= batch_size\n    ) {\n      batches.push(pendingBatch);\n      pendingBatch = {\n        seq: 0,\n        changes: [],\n        docs: []\n      };\n      if (returnValue.state === 'pending' || returnValue.state === 'stopped') {\n        returnValue.state = 'active';\n        returnValue.emit('active');\n      }\n      startNextBatch();\n    }\n  }\n\n\n  function abortReplication(reason, err) {\n    if (replicationCompleted) {\n      return;\n    }\n    if (!err.message) {\n      err.message = reason;\n    }\n    result.ok = false;\n    result.status = 'aborting';\n    batches = [];\n    pendingBatch = {\n      seq: 0,\n      changes: [],\n      docs: []\n    };\n    completeReplication(err);\n  }\n\n\n  function completeReplication(fatalError) {\n    if (replicationCompleted) {\n      return;\n    }\n    /* istanbul ignore if */\n    if (returnValue.cancelled) {\n      result.status = 'cancelled';\n      if (writingCheckpoint) {\n        return;\n      }\n    }\n    result.status = result.status || 'complete';\n    result.end_time = new Date();\n    result.last_seq = last_seq;\n    replicationCompleted = true;\n\n    if (fatalError) {\n      fatalError.result = result;\n\n      if (fatalError.name === 'unauthorized' || fatalError.name === 'forbidden') {\n        returnValue.emit('error', fatalError);\n        returnValue.removeAllListeners();\n      } else {\n        backOff(opts, returnValue, fatalError, function () {\n          replicate$1(src, target, opts, returnValue);\n        });\n      }\n    } else {\n      returnValue.emit('complete', result);\n      returnValue.removeAllListeners();\n    }\n  }\n\n\n  function onChange(change) {\n    /* istanbul ignore if */\n    if (returnValue.cancelled) {\n      return completeReplication();\n    }\n    var filter = filterChange(opts)(change);\n    if (!filter) {\n      return;\n    }\n    pendingBatch.seq = change.seq;\n    pendingBatch.changes.push(change);\n    processPendingBatch(batches.length === 0 && changesOpts.live);\n  }\n\n\n  function onChangesComplete(changes) {\n    changesPending = false;\n    /* istanbul ignore if */\n    if (returnValue.cancelled) {\n      return completeReplication();\n    }\n\n    // if no results were returned then we're done,\n    // else fetch more\n    if (changes.results.length > 0) {\n      changesOpts.since = changes.last_seq;\n      getChanges();\n      processPendingBatch(true);\n    } else {\n\n      var complete = function () {\n        if (continuous) {\n          changesOpts.live = true;\n          getChanges();\n        } else {\n          changesCompleted = true;\n        }\n        processPendingBatch(true);\n      };\n\n      // update the checkpoint so we start from the right seq next time\n      if (!currentBatch && changes.results.length === 0) {\n        writingCheckpoint = true;\n        checkpointer.writeCheckpoint(changes.last_seq,\n            session).then(function () {\n          writingCheckpoint = false;\n          result.last_seq = last_seq = changes.last_seq;\n          complete();\n        })\n        .catch(onCheckpointError);\n      } else {\n        complete();\n      }\n    }\n  }\n\n\n  function onChangesError(err) {\n    changesPending = false;\n    /* istanbul ignore if */\n    if (returnValue.cancelled) {\n      return completeReplication();\n    }\n    abortReplication('changes rejected', err);\n  }\n\n\n  function getChanges() {\n    if (!(\n      !changesPending &&\n      !changesCompleted &&\n      batches.length < batches_limit\n      )) {\n      return;\n    }\n    changesPending = true;\n    function abortChanges() {\n      changes.cancel();\n    }\n    function removeListener() {\n      returnValue.removeListener('cancel', abortChanges);\n    }\n\n    if (returnValue._changes) { // remove old changes() and listeners\n      returnValue.removeListener('cancel', returnValue._abortChanges);\n      returnValue._changes.cancel();\n    }\n    returnValue.once('cancel', abortChanges);\n\n    var changes = src.changes(changesOpts)\n      .on('change', onChange);\n    changes.then(removeListener, removeListener);\n    changes.then(onChangesComplete)\n      .catch(onChangesError);\n\n    if (opts.retry) {\n      // save for later so we can cancel if necessary\n      returnValue._changes = changes;\n      returnValue._abortChanges = abortChanges;\n    }\n  }\n\n\n  function startChanges() {\n    initCheckpointer().then(function () {\n      /* istanbul ignore if */\n      if (returnValue.cancelled) {\n        completeReplication();\n        return;\n      }\n      return checkpointer.getCheckpoint().then(function (checkpoint) {\n        last_seq = checkpoint;\n        changesOpts = {\n          since: last_seq,\n          limit: batch_size,\n          batch_size: batch_size,\n          style: 'all_docs',\n          doc_ids: doc_ids,\n          return_docs: true // required so we know when we're done\n        };\n        if (opts.filter) {\n          if (typeof opts.filter !== 'string') {\n            // required for the client-side filter in onChange\n            changesOpts.include_docs = true;\n          } else { // ddoc filter\n            changesOpts.filter = opts.filter;\n          }\n        }\n        if ('heartbeat' in opts) {\n          changesOpts.heartbeat = opts.heartbeat;\n        }\n        if ('timeout' in opts) {\n          changesOpts.timeout = opts.timeout;\n        }\n        if (opts.query_params) {\n          changesOpts.query_params = opts.query_params;\n        }\n        if (opts.view) {\n          changesOpts.view = opts.view;\n        }\n        getChanges();\n      });\n    }).catch(function (err) {\n      abortReplication('getCheckpoint rejected with ', err);\n    });\n  }\n\n  /* istanbul ignore next */\n  function onCheckpointError(err) {\n    writingCheckpoint = false;\n    abortReplication('writeCheckpoint completed with error', err);\n  }\n\n  /* istanbul ignore if */\n  if (returnValue.cancelled) { // cancelled immediately\n    completeReplication();\n    return;\n  }\n\n  if (!returnValue._addedListeners) {\n    returnValue.once('cancel', completeReplication);\n\n    if (typeof opts.complete === 'function') {\n      returnValue.once('error', opts.complete);\n      returnValue.once('complete', function (result) {\n        opts.complete(null, result);\n      });\n    }\n    returnValue._addedListeners = true;\n  }\n\n  if (typeof opts.since === 'undefined') {\n    startChanges();\n  } else {\n    initCheckpointer().then(function () {\n      writingCheckpoint = true;\n      return checkpointer.writeCheckpoint(opts.since, session);\n    }).then(function () {\n      writingCheckpoint = false;\n      /* istanbul ignore if */\n      if (returnValue.cancelled) {\n        completeReplication();\n        return;\n      }\n      last_seq = opts.since;\n      startChanges();\n    }).catch(onCheckpointError);\n  }\n}\n\n// We create a basic promise so the caller can cancel the replication possibly\n// before we have actually started listening to changes etc\ninherits(Replication, events.EventEmitter);\nfunction Replication() {\n  events.EventEmitter.call(this);\n  this.cancelled = false;\n  this.state = 'pending';\n  var self = this;\n  var promise = new PouchPromise(function (fulfill, reject) {\n    self.once('complete', fulfill);\n    self.once('error', reject);\n  });\n  self.then = function (resolve, reject) {\n    return promise.then(resolve, reject);\n  };\n  self.catch = function (reject) {\n    return promise.catch(reject);\n  };\n  // As we allow error handling via \"error\" event as well,\n  // put a stub in here so that rejecting never throws UnhandledError.\n  self.catch(function () {});\n}\n\nReplication.prototype.cancel = function () {\n  this.cancelled = true;\n  this.state = 'cancelled';\n  this.emit('cancel');\n};\n\nReplication.prototype.ready = function (src, target) {\n  var self = this;\n  if (self._readyCalled) {\n    return;\n  }\n  self._readyCalled = true;\n\n  function onDestroy() {\n    self.cancel();\n  }\n  src.once('destroyed', onDestroy);\n  target.once('destroyed', onDestroy);\n  function cleanup() {\n    src.removeListener('destroyed', onDestroy);\n    target.removeListener('destroyed', onDestroy);\n  }\n  self.once('complete', cleanup);\n};\n\nfunction toPouch(db, opts) {\n  var PouchConstructor = opts.PouchConstructor;\n  if (typeof db === 'string') {\n    return new PouchConstructor(db, opts);\n  } else {\n    return db;\n  }\n}\n\nfunction replicate(src, target, opts, callback) {\n\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  if (typeof opts === 'undefined') {\n    opts = {};\n  }\n\n  if (opts.doc_ids && !Array.isArray(opts.doc_ids)) {\n    throw createError(BAD_REQUEST,\n                       \"`doc_ids` filter parameter is not a list.\");\n  }\n\n  opts.complete = callback;\n  opts = clone(opts);\n  opts.continuous = opts.continuous || opts.live;\n  opts.retry = ('retry' in opts) ? opts.retry : false;\n  /*jshint validthis:true */\n  opts.PouchConstructor = opts.PouchConstructor || this;\n  var replicateRet = new Replication(opts);\n  var srcPouch = toPouch(src, opts);\n  var targetPouch = toPouch(target, opts);\n  replicate$1(srcPouch, targetPouch, opts, replicateRet);\n  return replicateRet;\n}\n\ninherits(Sync, events.EventEmitter);\nfunction sync(src, target, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  if (typeof opts === 'undefined') {\n    opts = {};\n  }\n  opts = clone(opts);\n  /*jshint validthis:true */\n  opts.PouchConstructor = opts.PouchConstructor || this;\n  src = toPouch(src, opts);\n  target = toPouch(target, opts);\n  return new Sync(src, target, opts, callback);\n}\n\nfunction Sync(src, target, opts, callback) {\n  var self = this;\n  this.canceled = false;\n\n  var optsPush = opts.push ? jsExtend.extend({}, opts, opts.push) : opts;\n  var optsPull = opts.pull ? jsExtend.extend({}, opts, opts.pull) : opts;\n\n  this.push = replicate(src, target, optsPush);\n  this.pull = replicate(target, src, optsPull);\n\n  this.pushPaused = true;\n  this.pullPaused = true;\n\n  function pullChange(change) {\n    self.emit('change', {\n      direction: 'pull',\n      change: change\n    });\n  }\n  function pushChange(change) {\n    self.emit('change', {\n      direction: 'push',\n      change: change\n    });\n  }\n  function pushDenied(doc) {\n    self.emit('denied', {\n      direction: 'push',\n      doc: doc\n    });\n  }\n  function pullDenied(doc) {\n    self.emit('denied', {\n      direction: 'pull',\n      doc: doc\n    });\n  }\n  function pushPaused() {\n    self.pushPaused = true;\n    /* istanbul ignore if */\n    if (self.pullPaused) {\n      self.emit('paused');\n    }\n  }\n  function pullPaused() {\n    self.pullPaused = true;\n    /* istanbul ignore if */\n    if (self.pushPaused) {\n      self.emit('paused');\n    }\n  }\n  function pushActive() {\n    self.pushPaused = false;\n    /* istanbul ignore if */\n    if (self.pullPaused) {\n      self.emit('active', {\n        direction: 'push'\n      });\n    }\n  }\n  function pullActive() {\n    self.pullPaused = false;\n    /* istanbul ignore if */\n    if (self.pushPaused) {\n      self.emit('active', {\n        direction: 'pull'\n      });\n    }\n  }\n\n  var removed = {};\n\n  function removeAll(type) { // type is 'push' or 'pull'\n    return function (event, func) {\n      var isChange = event === 'change' &&\n        (func === pullChange || func === pushChange);\n      var isDenied = event === 'denied' &&\n        (func === pullDenied || func === pushDenied);\n      var isPaused = event === 'paused' &&\n        (func === pullPaused || func === pushPaused);\n      var isActive = event === 'active' &&\n        (func === pullActive || func === pushActive);\n\n      if (isChange || isDenied || isPaused || isActive) {\n        if (!(event in removed)) {\n          removed[event] = {};\n        }\n        removed[event][type] = true;\n        if (Object.keys(removed[event]).length === 2) {\n          // both push and pull have asked to be removed\n          self.removeAllListeners(event);\n        }\n      }\n    };\n  }\n\n  if (opts.live) {\n    this.push.on('complete', self.pull.cancel.bind(self.pull));\n    this.pull.on('complete', self.push.cancel.bind(self.push));\n  }\n\n  this.on('newListener', function (event) {\n    if (event === 'change') {\n      self.pull.on('change', pullChange);\n      self.push.on('change', pushChange);\n    } else if (event === 'denied') {\n      self.pull.on('denied', pullDenied);\n      self.push.on('denied', pushDenied);\n    } else if (event === 'active') {\n      self.pull.on('active', pullActive);\n      self.push.on('active', pushActive);\n    } else if (event === 'paused') {\n      self.pull.on('paused', pullPaused);\n      self.push.on('paused', pushPaused);\n    }\n  });\n\n  this.on('removeListener', function (event) {\n    if (event === 'change') {\n      self.pull.removeListener('change', pullChange);\n      self.push.removeListener('change', pushChange);\n    } else if (event === 'denied') {\n      self.pull.removeListener('denied', pullDenied);\n      self.push.removeListener('denied', pushDenied);\n    } else if (event === 'active') {\n      self.pull.removeListener('active', pullActive);\n      self.push.removeListener('active', pushActive);\n    } else if (event === 'paused') {\n      self.pull.removeListener('paused', pullPaused);\n      self.push.removeListener('paused', pushPaused);\n    }\n  });\n\n  this.pull.on('removeListener', removeAll('pull'));\n  this.push.on('removeListener', removeAll('push'));\n\n  var promise = PouchPromise.all([\n    this.push,\n    this.pull\n  ]).then(function (resp) {\n    var out = {\n      push: resp[0],\n      pull: resp[1]\n    };\n    self.emit('complete', out);\n    if (callback) {\n      callback(null, out);\n    }\n    self.removeAllListeners();\n    return out;\n  }, function (err) {\n    self.cancel();\n    if (callback) {\n      // if there's a callback, then the callback can receive\n      // the error event\n      callback(err);\n    } else {\n      // if there's no callback, then we're safe to emit an error\n      // event, which would otherwise throw an unhandled error\n      // due to 'error' being a special event in EventEmitters\n      self.emit('error', err);\n    }\n    self.removeAllListeners();\n    if (callback) {\n      // no sense throwing if we're already emitting an 'error' event\n      throw err;\n    }\n  });\n\n  this.then = function (success, err) {\n    return promise.then(success, err);\n  };\n\n  this.catch = function (err) {\n    return promise.catch(err);\n  };\n}\n\nSync.prototype.cancel = function () {\n  if (!this.canceled) {\n    this.canceled = true;\n    this.push.cancel();\n    this.pull.cancel();\n  }\n};\n\nfunction replication(PouchDB) {\n  PouchDB.replicate = replicate;\n  PouchDB.sync = sync;\n\n  Object.defineProperty(PouchDB.prototype, 'replicate', {\n    get: function () {\n      var self = this;\n      return {\n        from: function (other, opts, callback) {\n          return self.constructor.replicate(other, self, opts, callback);\n        },\n        to: function (other, opts, callback) {\n          return self.constructor.replicate(self, other, opts, callback);\n        }\n      };\n    }\n  });\n\n  PouchDB.prototype.sync = function (dbName, opts, callback) {\n    return this.constructor.sync(this, dbName, opts, callback);\n  };\n}\n\nPouchDB.plugin(IDBPouch)\n  .plugin(WebSqlPouch)\n  .plugin(HttpPouch$1)\n  .plugin(mapreduce)\n  .plugin(replication);\n\n// Pull from src because pouchdb-node/pouchdb-browser themselves\n// are aggressively optimized and jsnext:main would normally give us this\n// aggressive bundle.\n\nmodule.exports = PouchDB;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0)))\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g =\n  typeof global === \"object\" ? global :\n  typeof window === \"object\" ? window :\n  typeof self === \"object\" ? self : this;\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = __webpack_require__(16);\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global, process) {/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var hasOwn = Object.prototype.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided, then outerFn.prototype instanceof Generator.\n    var generator = Object.create((outerFn || Generator).prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `value instanceof AwaitArgument` to determine if the yielded value is\n  // meant to be awaited. Some may consider the name of this method too\n  // cutesy, but they are curmudgeons.\n  runtime.awrap = function(arg) {\n    return new AwaitArgument(arg);\n  };\n\n  function AwaitArgument(arg) {\n    this.arg = arg;\n  }\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value instanceof AwaitArgument) {\n          return Promise.resolve(value.arg).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    if (typeof process === \"object\" && process.domain) {\n      invoke = process.domain.bind(invoke);\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          if (method === \"return\" ||\n              (method === \"throw\" && delegate.iterator[method] === undefined)) {\n            // A return or throw (when the delegate iterator has no throw\n            // method) always terminates the yield* loop.\n            context.delegate = null;\n\n            // If the delegate iterator has a return method, give it a\n            // chance to clean up.\n            var returnMethod = delegate.iterator[\"return\"];\n            if (returnMethod) {\n              var record = tryCatch(returnMethod, delegate.iterator, arg);\n              if (record.type === \"throw\") {\n                // If the return method threw an exception, let that\n                // exception prevail over the original return or throw.\n                method = \"throw\";\n                arg = record.arg;\n                continue;\n              }\n            }\n\n            if (method === \"return\") {\n              // Continue with the outer return, now that the delegate\n              // iterator has been terminated.\n              continue;\n            }\n          }\n\n          var record = tryCatch(\n            delegate.iterator[method],\n            delegate.iterator,\n            arg\n          );\n\n          if (record.type === \"throw\") {\n            context.delegate = null;\n\n            // Like returning generator.throw(uncaught), but without the\n            // overhead of an extra function call.\n            method = \"throw\";\n            arg = record.arg;\n            continue;\n          }\n\n          // Delegate generator ran and handled its own exceptions so\n          // regardless of what the method was, we continue as if it is\n          // \"next\" with an undefined arg.\n          method = \"next\";\n          arg = undefined;\n\n          var info = record.arg;\n          if (info.done) {\n            context[delegate.resultName] = info.value;\n            context.next = delegate.nextLoc;\n          } else {\n            state = GenStateSuspendedYield;\n            return info;\n          }\n\n          context.delegate = null;\n        }\n\n        if (method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = arg;\n\n        } else if (method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw arg;\n          }\n\n          if (context.dispatchException(arg)) {\n            // If the dispatched exception was caught by a catch block,\n            // then let that catch block handle the exception normally.\n            method = \"next\";\n            arg = undefined;\n          }\n\n        } else if (method === \"return\") {\n          context.abrupt(\"return\", arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          var info = {\n            value: record.arg,\n            done: context.done\n          };\n\n          if (record.arg === ContinueSentinel) {\n            if (context.delegate && method === \"next\") {\n              // Deliberately forget the last sent value so that we don't\n              // accidentally pass it on to the delegate.\n              arg = undefined;\n            }\n          } else {\n            return info;\n          }\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(arg) call above.\n          method = \"throw\";\n          arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.next = finallyEntry.finallyLoc;\n      } else {\n        this.complete(record);\n      }\n\n      return ContinueSentinel;\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = record.arg;\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // Among the various tricks for obtaining a reference to the global\n  // object, this seems to be the most reliable technique that does not\n  // use indirect eval (which violates Content Security Policy).\n  typeof global === \"object\" ? global :\n  typeof window === \"object\" ? window :\n  typeof self === \"object\" ? self : this\n);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(1)))\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\n// Generated by CoffeeScript 1.9.2\n(function() {\n  var hasProp = {}.hasOwnProperty,\n    slice = [].slice;\n\n  module.exports = function(source, scope) {\n    var key, keys, value, values;\n    keys = [];\n    values = [];\n    for (key in scope) {\n      if (!hasProp.call(scope, key)) continue;\n      value = scope[key];\n      if (key === 'this') {\n        continue;\n      }\n      keys.push(key);\n      values.push(value);\n    }\n    return Function.apply(null, slice.call(keys).concat([source])).apply(scope[\"this\"], values);\n  };\n\n}).call(this);\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n(function (factory) {\n    if (true) {\n        // Node/CommonJS\n        module.exports = factory();\n    } else if (typeof define === 'function' && define.amd) {\n        // AMD\n        define(factory);\n    } else {\n        // Browser globals (with support for web workers)\n        var glob;\n\n        try {\n            glob = window;\n        } catch (e) {\n            glob = self;\n        }\n\n        glob.SparkMD5 = factory();\n    }\n}(function (undefined) {\n\n    'use strict';\n\n    /*\n     * Fastest md5 implementation around (JKM md5).\n     * Credits: Joseph Myers\n     *\n     * @see http://www.myersdaily.org/joseph/javascript/md5-text.html\n     * @see http://jsperf.com/md5-shootout/7\n     */\n\n    /* this function is much faster,\n      so if possible we use it. Some IEs\n      are the only ones I know of that\n      need the idiotic second function,\n      generated by an if clause.  */\n    var add32 = function (a, b) {\n        return (a + b) & 0xFFFFFFFF;\n    },\n        hex_chr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];\n\n\n    function cmn(q, a, b, x, s, t) {\n        a = add32(add32(a, q), add32(x, t));\n        return add32((a << s) | (a >>> (32 - s)), b);\n    }\n\n    function ff(a, b, c, d, x, s, t) {\n        return cmn((b & c) | ((~b) & d), a, b, x, s, t);\n    }\n\n    function gg(a, b, c, d, x, s, t) {\n        return cmn((b & d) | (c & (~d)), a, b, x, s, t);\n    }\n\n    function hh(a, b, c, d, x, s, t) {\n        return cmn(b ^ c ^ d, a, b, x, s, t);\n    }\n\n    function ii(a, b, c, d, x, s, t) {\n        return cmn(c ^ (b | (~d)), a, b, x, s, t);\n    }\n\n    function md5cycle(x, k) {\n        var a = x[0],\n            b = x[1],\n            c = x[2],\n            d = x[3];\n\n        a = ff(a, b, c, d, k[0], 7, -680876936);\n        d = ff(d, a, b, c, k[1], 12, -389564586);\n        c = ff(c, d, a, b, k[2], 17, 606105819);\n        b = ff(b, c, d, a, k[3], 22, -1044525330);\n        a = ff(a, b, c, d, k[4], 7, -176418897);\n        d = ff(d, a, b, c, k[5], 12, 1200080426);\n        c = ff(c, d, a, b, k[6], 17, -1473231341);\n        b = ff(b, c, d, a, k[7], 22, -45705983);\n        a = ff(a, b, c, d, k[8], 7, 1770035416);\n        d = ff(d, a, b, c, k[9], 12, -1958414417);\n        c = ff(c, d, a, b, k[10], 17, -42063);\n        b = ff(b, c, d, a, k[11], 22, -1990404162);\n        a = ff(a, b, c, d, k[12], 7, 1804603682);\n        d = ff(d, a, b, c, k[13], 12, -40341101);\n        c = ff(c, d, a, b, k[14], 17, -1502002290);\n        b = ff(b, c, d, a, k[15], 22, 1236535329);\n\n        a = gg(a, b, c, d, k[1], 5, -165796510);\n        d = gg(d, a, b, c, k[6], 9, -1069501632);\n        c = gg(c, d, a, b, k[11], 14, 643717713);\n        b = gg(b, c, d, a, k[0], 20, -373897302);\n        a = gg(a, b, c, d, k[5], 5, -701558691);\n        d = gg(d, a, b, c, k[10], 9, 38016083);\n        c = gg(c, d, a, b, k[15], 14, -660478335);\n        b = gg(b, c, d, a, k[4], 20, -405537848);\n        a = gg(a, b, c, d, k[9], 5, 568446438);\n        d = gg(d, a, b, c, k[14], 9, -1019803690);\n        c = gg(c, d, a, b, k[3], 14, -187363961);\n        b = gg(b, c, d, a, k[8], 20, 1163531501);\n        a = gg(a, b, c, d, k[13], 5, -1444681467);\n        d = gg(d, a, b, c, k[2], 9, -51403784);\n        c = gg(c, d, a, b, k[7], 14, 1735328473);\n        b = gg(b, c, d, a, k[12], 20, -1926607734);\n\n        a = hh(a, b, c, d, k[5], 4, -378558);\n        d = hh(d, a, b, c, k[8], 11, -2022574463);\n        c = hh(c, d, a, b, k[11], 16, 1839030562);\n        b = hh(b, c, d, a, k[14], 23, -35309556);\n        a = hh(a, b, c, d, k[1], 4, -1530992060);\n        d = hh(d, a, b, c, k[4], 11, 1272893353);\n        c = hh(c, d, a, b, k[7], 16, -155497632);\n        b = hh(b, c, d, a, k[10], 23, -1094730640);\n        a = hh(a, b, c, d, k[13], 4, 681279174);\n        d = hh(d, a, b, c, k[0], 11, -358537222);\n        c = hh(c, d, a, b, k[3], 16, -722521979);\n        b = hh(b, c, d, a, k[6], 23, 76029189);\n        a = hh(a, b, c, d, k[9], 4, -640364487);\n        d = hh(d, a, b, c, k[12], 11, -421815835);\n        c = hh(c, d, a, b, k[15], 16, 530742520);\n        b = hh(b, c, d, a, k[2], 23, -995338651);\n\n        a = ii(a, b, c, d, k[0], 6, -198630844);\n        d = ii(d, a, b, c, k[7], 10, 1126891415);\n        c = ii(c, d, a, b, k[14], 15, -1416354905);\n        b = ii(b, c, d, a, k[5], 21, -57434055);\n        a = ii(a, b, c, d, k[12], 6, 1700485571);\n        d = ii(d, a, b, c, k[3], 10, -1894986606);\n        c = ii(c, d, a, b, k[10], 15, -1051523);\n        b = ii(b, c, d, a, k[1], 21, -2054922799);\n        a = ii(a, b, c, d, k[8], 6, 1873313359);\n        d = ii(d, a, b, c, k[15], 10, -30611744);\n        c = ii(c, d, a, b, k[6], 15, -1560198380);\n        b = ii(b, c, d, a, k[13], 21, 1309151649);\n        a = ii(a, b, c, d, k[4], 6, -145523070);\n        d = ii(d, a, b, c, k[11], 10, -1120210379);\n        c = ii(c, d, a, b, k[2], 15, 718787259);\n        b = ii(b, c, d, a, k[9], 21, -343485551);\n\n        x[0] = add32(a, x[0]);\n        x[1] = add32(b, x[1]);\n        x[2] = add32(c, x[2]);\n        x[3] = add32(d, x[3]);\n    }\n\n    function md5blk(s) {\n        var md5blks = [],\n            i; /* Andy King said do it this way. */\n\n        for (i = 0; i < 64; i += 4) {\n            md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);\n        }\n        return md5blks;\n    }\n\n    function md5blk_array(a) {\n        var md5blks = [],\n            i; /* Andy King said do it this way. */\n\n        for (i = 0; i < 64; i += 4) {\n            md5blks[i >> 2] = a[i] + (a[i + 1] << 8) + (a[i + 2] << 16) + (a[i + 3] << 24);\n        }\n        return md5blks;\n    }\n\n    function md51(s) {\n        var n = s.length,\n            state = [1732584193, -271733879, -1732584194, 271733878],\n            i,\n            length,\n            tail,\n            tmp,\n            lo,\n            hi;\n\n        for (i = 64; i <= n; i += 64) {\n            md5cycle(state, md5blk(s.substring(i - 64, i)));\n        }\n        s = s.substring(i - 64);\n        length = s.length;\n        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        for (i = 0; i < length; i += 1) {\n            tail[i >> 2] |= s.charCodeAt(i) << ((i % 4) << 3);\n        }\n        tail[i >> 2] |= 0x80 << ((i % 4) << 3);\n        if (i > 55) {\n            md5cycle(state, tail);\n            for (i = 0; i < 16; i += 1) {\n                tail[i] = 0;\n            }\n        }\n\n        // Beware that the final length might not fit in 32 bits so we take care of that\n        tmp = n * 8;\n        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\n        lo = parseInt(tmp[2], 16);\n        hi = parseInt(tmp[1], 16) || 0;\n\n        tail[14] = lo;\n        tail[15] = hi;\n\n        md5cycle(state, tail);\n        return state;\n    }\n\n    function md51_array(a) {\n        var n = a.length,\n            state = [1732584193, -271733879, -1732584194, 271733878],\n            i,\n            length,\n            tail,\n            tmp,\n            lo,\n            hi;\n\n        for (i = 64; i <= n; i += 64) {\n            md5cycle(state, md5blk_array(a.subarray(i - 64, i)));\n        }\n\n        // Not sure if it is a bug, however IE10 will always produce a sub array of length 1\n        // containing the last element of the parent array if the sub array specified starts\n        // beyond the length of the parent array - weird.\n        // https://connect.microsoft.com/IE/feedback/details/771452/typed-array-subarray-issue\n        a = (i - 64) < n ? a.subarray(i - 64) : new Uint8Array(0);\n\n        length = a.length;\n        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        for (i = 0; i < length; i += 1) {\n            tail[i >> 2] |= a[i] << ((i % 4) << 3);\n        }\n\n        tail[i >> 2] |= 0x80 << ((i % 4) << 3);\n        if (i > 55) {\n            md5cycle(state, tail);\n            for (i = 0; i < 16; i += 1) {\n                tail[i] = 0;\n            }\n        }\n\n        // Beware that the final length might not fit in 32 bits so we take care of that\n        tmp = n * 8;\n        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\n        lo = parseInt(tmp[2], 16);\n        hi = parseInt(tmp[1], 16) || 0;\n\n        tail[14] = lo;\n        tail[15] = hi;\n\n        md5cycle(state, tail);\n\n        return state;\n    }\n\n    function rhex(n) {\n        var s = '',\n            j;\n        for (j = 0; j < 4; j += 1) {\n            s += hex_chr[(n >> (j * 8 + 4)) & 0x0F] + hex_chr[(n >> (j * 8)) & 0x0F];\n        }\n        return s;\n    }\n\n    function hex(x) {\n        var i;\n        for (i = 0; i < x.length; i += 1) {\n            x[i] = rhex(x[i]);\n        }\n        return x.join('');\n    }\n\n    // In some cases the fast add32 function cannot be used..\n    if (hex(md51('hello')) !== '5d41402abc4b2a76b9719d911017c592') {\n        add32 = function (x, y) {\n            var lsw = (x & 0xFFFF) + (y & 0xFFFF),\n                msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n            return (msw << 16) | (lsw & 0xFFFF);\n        };\n    }\n\n    // ---------------------------------------------------\n\n    /**\n     * ArrayBuffer slice polyfill.\n     *\n     * @see https://github.com/ttaubert/node-arraybuffer-slice\n     */\n\n    if (typeof ArrayBuffer !== 'undefined' && !ArrayBuffer.prototype.slice) {\n        (function () {\n            function clamp(val, length) {\n                val = (val | 0) || 0;\n\n                if (val < 0) {\n                    return Math.max(val + length, 0);\n                }\n\n                return Math.min(val, length);\n            }\n\n            ArrayBuffer.prototype.slice = function (from, to) {\n                var length = this.byteLength,\n                    begin = clamp(from, length),\n                    end = length,\n                    num,\n                    target,\n                    targetArray,\n                    sourceArray;\n\n                if (to !== undefined) {\n                    end = clamp(to, length);\n                }\n\n                if (begin > end) {\n                    return new ArrayBuffer(0);\n                }\n\n                num = end - begin;\n                target = new ArrayBuffer(num);\n                targetArray = new Uint8Array(target);\n\n                sourceArray = new Uint8Array(this, begin, num);\n                targetArray.set(sourceArray);\n\n                return target;\n            };\n        })();\n    }\n\n    // ---------------------------------------------------\n\n    /**\n     * Helpers.\n     */\n\n    function toUtf8(str) {\n        if (/[\\u0080-\\uFFFF]/.test(str)) {\n            str = unescape(encodeURIComponent(str));\n        }\n\n        return str;\n    }\n\n    function utf8Str2ArrayBuffer(str, returnUInt8Array) {\n        var length = str.length,\n           buff = new ArrayBuffer(length),\n           arr = new Uint8Array(buff),\n           i;\n\n        for (i = 0; i < length; i += 1) {\n            arr[i] = str.charCodeAt(i);\n        }\n\n        return returnUInt8Array ? arr : buff;\n    }\n\n    function arrayBuffer2Utf8Str(buff) {\n        return String.fromCharCode.apply(null, new Uint8Array(buff));\n    }\n\n    function concatenateArrayBuffers(first, second, returnUInt8Array) {\n        var result = new Uint8Array(first.byteLength + second.byteLength);\n\n        result.set(new Uint8Array(first));\n        result.set(new Uint8Array(second), first.byteLength);\n\n        return returnUInt8Array ? result : result.buffer;\n    }\n\n    function hexToBinaryString(hex) {\n        var bytes = [],\n            length = hex.length,\n            x;\n\n        for (x = 0; x < length - 1; x += 2) {\n            bytes.push(parseInt(hex.substr(x, 2), 16));\n        }\n\n        return String.fromCharCode.apply(String, bytes);\n    }\n\n    // ---------------------------------------------------\n\n    /**\n     * SparkMD5 OOP implementation.\n     *\n     * Use this class to perform an incremental md5, otherwise use the\n     * static methods instead.\n     */\n\n    function SparkMD5() {\n        // call reset to init the instance\n        this.reset();\n    }\n\n    /**\n     * Appends a string.\n     * A conversion will be applied if an utf8 string is detected.\n     *\n     * @param {String} str The string to be appended\n     *\n     * @return {SparkMD5} The instance itself\n     */\n    SparkMD5.prototype.append = function (str) {\n        // Converts the string to utf8 bytes if necessary\n        // Then append as binary\n        this.appendBinary(toUtf8(str));\n\n        return this;\n    };\n\n    /**\n     * Appends a binary string.\n     *\n     * @param {String} contents The binary string to be appended\n     *\n     * @return {SparkMD5} The instance itself\n     */\n    SparkMD5.prototype.appendBinary = function (contents) {\n        this._buff += contents;\n        this._length += contents.length;\n\n        var length = this._buff.length,\n            i;\n\n        for (i = 64; i <= length; i += 64) {\n            md5cycle(this._hash, md5blk(this._buff.substring(i - 64, i)));\n        }\n\n        this._buff = this._buff.substring(i - 64);\n\n        return this;\n    };\n\n    /**\n     * Finishes the incremental computation, reseting the internal state and\n     * returning the result.\n     *\n     * @param {Boolean} raw True to get the raw string, false to get the hex string\n     *\n     * @return {String} The result\n     */\n    SparkMD5.prototype.end = function (raw) {\n        var buff = this._buff,\n            length = buff.length,\n            i,\n            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            ret;\n\n        for (i = 0; i < length; i += 1) {\n            tail[i >> 2] |= buff.charCodeAt(i) << ((i % 4) << 3);\n        }\n\n        this._finish(tail, length);\n        ret = hex(this._hash);\n\n        if (raw) {\n            ret = hexToBinaryString(ret);\n        }\n\n        this.reset();\n\n        return ret;\n    };\n\n    /**\n     * Resets the internal state of the computation.\n     *\n     * @return {SparkMD5} The instance itself\n     */\n    SparkMD5.prototype.reset = function () {\n        this._buff = '';\n        this._length = 0;\n        this._hash = [1732584193, -271733879, -1732584194, 271733878];\n\n        return this;\n    };\n\n    /**\n     * Gets the internal state of the computation.\n     *\n     * @return {Object} The state\n     */\n    SparkMD5.prototype.getState = function () {\n        return {\n            buff: this._buff,\n            length: this._length,\n            hash: this._hash\n        };\n    };\n\n    /**\n     * Gets the internal state of the computation.\n     *\n     * @param {Object} state The state\n     *\n     * @return {SparkMD5} The instance itself\n     */\n    SparkMD5.prototype.setState = function (state) {\n        this._buff = state.buff;\n        this._length = state.length;\n        this._hash = state.hash;\n\n        return this;\n    };\n\n    /**\n     * Releases memory used by the incremental buffer and other additional\n     * resources. If you plan to use the instance again, use reset instead.\n     */\n    SparkMD5.prototype.destroy = function () {\n        delete this._hash;\n        delete this._buff;\n        delete this._length;\n    };\n\n    /**\n     * Finish the final calculation based on the tail.\n     *\n     * @param {Array}  tail   The tail (will be modified)\n     * @param {Number} length The length of the remaining buffer\n     */\n    SparkMD5.prototype._finish = function (tail, length) {\n        var i = length,\n            tmp,\n            lo,\n            hi;\n\n        tail[i >> 2] |= 0x80 << ((i % 4) << 3);\n        if (i > 55) {\n            md5cycle(this._hash, tail);\n            for (i = 0; i < 16; i += 1) {\n                tail[i] = 0;\n            }\n        }\n\n        // Do the final computation based on the tail and length\n        // Beware that the final length may not fit in 32 bits so we take care of that\n        tmp = this._length * 8;\n        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\n        lo = parseInt(tmp[2], 16);\n        hi = parseInt(tmp[1], 16) || 0;\n\n        tail[14] = lo;\n        tail[15] = hi;\n        md5cycle(this._hash, tail);\n    };\n\n    /**\n     * Performs the md5 hash on a string.\n     * A conversion will be applied if utf8 string is detected.\n     *\n     * @param {String}  str The string\n     * @param {Boolean} raw True to get the raw string, false to get the hex string\n     *\n     * @return {String} The result\n     */\n    SparkMD5.hash = function (str, raw) {\n        // Converts the string to utf8 bytes if necessary\n        // Then compute it using the binary function\n        return SparkMD5.hashBinary(toUtf8(str), raw);\n    };\n\n    /**\n     * Performs the md5 hash on a binary string.\n     *\n     * @param {String}  content The binary string\n     * @param {Boolean} raw     True to get the raw string, false to get the hex string\n     *\n     * @return {String} The result\n     */\n    SparkMD5.hashBinary = function (content, raw) {\n        var hash = md51(content),\n            ret = hex(hash);\n\n        return raw ? hexToBinaryString(ret) : ret;\n    };\n\n    // ---------------------------------------------------\n\n    /**\n     * SparkMD5 OOP implementation for array buffers.\n     *\n     * Use this class to perform an incremental md5 ONLY for array buffers.\n     */\n    SparkMD5.ArrayBuffer = function () {\n        // call reset to init the instance\n        this.reset();\n    };\n\n    /**\n     * Appends an array buffer.\n     *\n     * @param {ArrayBuffer} arr The array to be appended\n     *\n     * @return {SparkMD5.ArrayBuffer} The instance itself\n     */\n    SparkMD5.ArrayBuffer.prototype.append = function (arr) {\n        var buff = concatenateArrayBuffers(this._buff.buffer, arr, true),\n            length = buff.length,\n            i;\n\n        this._length += arr.byteLength;\n\n        for (i = 64; i <= length; i += 64) {\n            md5cycle(this._hash, md5blk_array(buff.subarray(i - 64, i)));\n        }\n\n        this._buff = (i - 64) < length ? new Uint8Array(buff.buffer.slice(i - 64)) : new Uint8Array(0);\n\n        return this;\n    };\n\n    /**\n     * Finishes the incremental computation, reseting the internal state and\n     * returning the result.\n     *\n     * @param {Boolean} raw True to get the raw string, false to get the hex string\n     *\n     * @return {String} The result\n     */\n    SparkMD5.ArrayBuffer.prototype.end = function (raw) {\n        var buff = this._buff,\n            length = buff.length,\n            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            i,\n            ret;\n\n        for (i = 0; i < length; i += 1) {\n            tail[i >> 2] |= buff[i] << ((i % 4) << 3);\n        }\n\n        this._finish(tail, length);\n        ret = hex(this._hash);\n\n        if (raw) {\n            ret = hexToBinaryString(ret);\n        }\n\n        this.reset();\n\n        return ret;\n    };\n\n    /**\n     * Resets the internal state of the computation.\n     *\n     * @return {SparkMD5.ArrayBuffer} The instance itself\n     */\n    SparkMD5.ArrayBuffer.prototype.reset = function () {\n        this._buff = new Uint8Array(0);\n        this._length = 0;\n        this._hash = [1732584193, -271733879, -1732584194, 271733878];\n\n        return this;\n    };\n\n    /**\n     * Gets the internal state of the computation.\n     *\n     * @return {Object} The state\n     */\n    SparkMD5.ArrayBuffer.prototype.getState = function () {\n        var state = SparkMD5.prototype.getState.call(this);\n\n        // Convert buffer to a string\n        state.buff = arrayBuffer2Utf8Str(state.buff);\n\n        return state;\n    };\n\n    /**\n     * Gets the internal state of the computation.\n     *\n     * @param {Object} state The state\n     *\n     * @return {SparkMD5.ArrayBuffer} The instance itself\n     */\n    SparkMD5.ArrayBuffer.prototype.setState = function (state) {\n        // Convert string to buffer\n        state.buff = utf8Str2ArrayBuffer(state.buff, true);\n\n        return SparkMD5.prototype.setState.call(this, state);\n    };\n\n    SparkMD5.ArrayBuffer.prototype.destroy = SparkMD5.prototype.destroy;\n\n    SparkMD5.ArrayBuffer.prototype._finish = SparkMD5.prototype._finish;\n\n    /**\n     * Performs the md5 hash on an array buffer.\n     *\n     * @param {ArrayBuffer} arr The array buffer\n     * @param {Boolean}     raw True to get the raw string, false to get the hex one\n     *\n     * @return {String} The result\n     */\n    SparkMD5.ArrayBuffer.hash = function (arr, raw) {\n        var hash = md51_array(new Uint8Array(arr)),\n            ret = hex(hash);\n\n        return raw ? hexToBinaryString(ret) : ret;\n    };\n\n    return SparkMD5;\n}));\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\"use strict\";\n'use strict';\n\n/**\n * Stringify/parse functions that don't operate\n * recursively, so they avoid call stack exceeded\n * errors.\n */\nexports.stringify = function stringify(input) {\n  var queue = [];\n  queue.push({obj: input});\n\n  var res = '';\n  var next, obj, prefix, val, i, arrayPrefix, keys, k, key, value, objPrefix;\n  while ((next = queue.pop())) {\n    obj = next.obj;\n    prefix = next.prefix || '';\n    val = next.val || '';\n    res += prefix;\n    if (val) {\n      res += val;\n    } else if (typeof obj !== 'object') {\n      res += typeof obj === 'undefined' ? null : JSON.stringify(obj);\n    } else if (obj === null) {\n      res += 'null';\n    } else if (Array.isArray(obj)) {\n      queue.push({val: ']'});\n      for (i = obj.length - 1; i >= 0; i--) {\n        arrayPrefix = i === 0 ? '' : ',';\n        queue.push({obj: obj[i], prefix: arrayPrefix});\n      }\n      queue.push({val: '['});\n    } else { // object\n      keys = [];\n      for (k in obj) {\n        if (obj.hasOwnProperty(k)) {\n          keys.push(k);\n        }\n      }\n      queue.push({val: '}'});\n      for (i = keys.length - 1; i >= 0; i--) {\n        key = keys[i];\n        value = obj[key];\n        objPrefix = (i > 0 ? ',' : '');\n        objPrefix += JSON.stringify(key) + ':';\n        queue.push({obj: value, prefix: objPrefix});\n      }\n      queue.push({val: '{'});\n    }\n  }\n  return res;\n};\n\n// Convenience function for the parse function.\n// This pop function is basically copied from\n// pouchCollate.parseIndexableString\nfunction pop(obj, stack, metaStack) {\n  var lastMetaElement = metaStack[metaStack.length - 1];\n  if (obj === lastMetaElement.element) {\n    // popping a meta-element, e.g. an object whose value is another object\n    metaStack.pop();\n    lastMetaElement = metaStack[metaStack.length - 1];\n  }\n  var element = lastMetaElement.element;\n  var lastElementIndex = lastMetaElement.index;\n  if (Array.isArray(element)) {\n    element.push(obj);\n  } else if (lastElementIndex === stack.length - 2) { // obj with key+value\n    var key = stack.pop();\n    element[key] = obj;\n  } else {\n    stack.push(obj); // obj with key only\n  }\n}\n\nexports.parse = function (str) {\n  var stack = [];\n  var metaStack = []; // stack for arrays and objects\n  var i = 0;\n  var collationIndex,parsedNum,numChar;\n  var parsedString,lastCh,numConsecutiveSlashes,ch;\n  var arrayElement, objElement;\n  while (true) {\n    collationIndex = str[i++];\n    if (collationIndex === '}' ||\n        collationIndex === ']' ||\n        typeof collationIndex === 'undefined') {\n      if (stack.length === 1) {\n        return stack.pop();\n      } else {\n        pop(stack.pop(), stack, metaStack);\n        continue;\n      }\n    }\n    switch (collationIndex) {\n      case ' ':\n      case '\\t':\n      case '\\n':\n      case ':':\n      case ',':\n        break;\n      case 'n':\n        i += 3; // 'ull'\n        pop(null, stack, metaStack);\n        break;\n      case 't':\n        i += 3; // 'rue'\n        pop(true, stack, metaStack);\n        break;\n      case 'f':\n        i += 4; // 'alse'\n        pop(false, stack, metaStack);\n        break;\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n      case '-':\n        parsedNum = '';\n        i--;\n        while (true) {\n          numChar = str[i++];\n          if (/[\\d\\.\\-e\\+]/.test(numChar)) {\n            parsedNum += numChar;\n          } else {\n            i--;\n            break;\n          }\n        }\n        pop(parseFloat(parsedNum), stack, metaStack);\n        break;\n      case '\"':\n        parsedString = '';\n        lastCh = void 0;\n        numConsecutiveSlashes = 0;\n        while (true) {\n          ch = str[i++];\n          if (ch !== '\"' || (lastCh === '\\\\' &&\n              numConsecutiveSlashes % 2 === 1)) {\n            parsedString += ch;\n            lastCh = ch;\n            if (lastCh === '\\\\') {\n              numConsecutiveSlashes++;\n            } else {\n              numConsecutiveSlashes = 0;\n            }\n          } else {\n            break;\n          }\n        }\n        pop(JSON.parse('\"' + parsedString + '\"'), stack, metaStack);\n        break;\n      case '[':\n        arrayElement = { element: [], index: stack.length };\n        stack.push(arrayElement.element);\n        metaStack.push(arrayElement);\n        break;\n      case '{':\n        objElement = { element: {}, index: stack.length };\n        stack.push(objElement.element);\n        metaStack.push(objElement);\n        break;\n      default:\n        throw new Error(\n          'unexpectedly reached end of input: ' + collationIndex);\n    }\n  }\n};\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(2);\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// PersistentMap.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmory imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmory exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tObject.defineProperty(exports, name, {\n \t\t\tconfigurable: false,\n \t\t\tenumerable: true,\n \t\t\tget: getter\n \t\t});\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 20);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 7e9dc948843b561370e8","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() { return this; })();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 0\n// module chunks = 0","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/process/browser.js\n// module id = 1\n// module chunks = 0","/**\n*\n* @module PersistentMap\n*/\n\nimport PouchDB from 'pouchdb';\n\nconst PersistentMap = async (name) => {\n  const lazyMap = new Map();\n  const db = new PouchDB(name);\n  const docs = await db.allDocs({include_docs: true});\n  const persistentMap = {\n    set: (key, value) => _set(db, lazyMap, key, value),\n    getSync: (key) => _getSync(db, key),\n    delete: (key) => _delete(db, lazyMap, key)\n  };\n\n  // if the db already exists, we inject its value to the lazy map.\n  docs.rows.forEach((row) => {\n    lazyMap.set(row.doc._id, row.doc.value);\n  });\n\n  Object.getOwnPropertyNames(Map.prototype).forEach((prop) => {\n    if (typeof persistentMap[prop] === 'undefined') {\n      if (typeof lazyMap[prop] === 'function') {\n        persistentMap[prop] = (...args) => lazyMap[prop](...args);\n      } else {\n        persistentMap[prop] = lazyMap[prop];\n      }\n    }\n  });\n\n  return persistentMap;\n};\n\nconst _set = async (db, lazyMap, key, value) => {\n  await db.put({\n    _id: key,\n    value: value\n  });\n  lazyMap.set(key, value);\n};\n\nconst _getSync = async (db, key) => {\n  const entry = await db.get(key);\n  return entry.value;\n};\n\nconst _delete = async (db, lazyMap, key) => {\n  const entry = await db.get(key);\n  await db.remove(entry);\n  lazyMap.delete(key);\n};\n\nexport default PersistentMap;\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","'use strict';\n\nmodule.exports = argsArray;\n\nfunction argsArray(fun) {\n  return function () {\n    var len = arguments.length;\n    if (len) {\n      var args = [];\n      var i = -1;\n      while (++i < len) {\n        args[i] = arguments[i];\n      }\n      return fun.call(this, args);\n    } else {\n      return fun.call(this, []);\n    }\n  };\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/argsarray/index.js\n// module id = 3\n// module chunks = 0","module.exports = require(\"regenerator-runtime\");\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/babel-runtime/regenerator/index.js\n// module id = 4\n// module chunks = 0","\n/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  'lightseagreen',\n  'forestgreen',\n  'goldenrod',\n  'dodgerblue',\n  'darkorchid',\n  'crimson'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  return ('WebkitAppearance' in document.documentElement.style) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (window.console && (console.firebug || (console.exception && console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31);\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  return JSON.stringify(v);\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs() {\n  var args = arguments;\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return args;\n\n  var c = 'color: ' + this.color;\n  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n  return args;\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage(){\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/debug/browser.js\n// module id = 5\n// module chunks = 0","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = debug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lowercased letter, i.e. \"n\".\n */\n\nexports.formatters = {};\n\n/**\n * Previously assigned color.\n */\n\nvar prevColor = 0;\n\n/**\n * Previous log timestamp.\n */\n\nvar prevTime;\n\n/**\n * Select a color.\n *\n * @return {Number}\n * @api private\n */\n\nfunction selectColor() {\n  return exports.colors[prevColor++ % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction debug(namespace) {\n\n  // define the `disabled` version\n  function disabled() {\n  }\n  disabled.enabled = false;\n\n  // define the `enabled` version\n  function enabled() {\n\n    var self = enabled;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // add the `color` if not set\n    if (null == self.useColors) self.useColors = exports.useColors();\n    if (null == self.color && self.useColors) self.color = selectColor();\n\n    var args = Array.prototype.slice.call(arguments);\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %o\n      args = ['%o'].concat(args);\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    if ('function' === typeof exports.formatArgs) {\n      args = exports.formatArgs.apply(self, args);\n    }\n    var logFn = enabled.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n  enabled.enabled = true;\n\n  var fn = exports.enabled(namespace) ? enabled : disabled;\n\n  fn.namespace = namespace;\n\n  return fn;\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  var split = (namespaces || '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (var i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/debug/debug.js\n// module id = 6\n// module chunks = 0","(function (root, factory) {\r\n  /* istanbul ignore next */\r\n  if (typeof define === 'function' && define.amd) {\r\n    define([], factory)\r\n  } else if (typeof exports === 'object') {\r\n    module.exports = factory()\r\n  } else {\r\n    root.PromisePool = factory()\r\n    // Legacy API\r\n    root.promisePool = root.PromisePool\r\n  }\r\n})(this, function () {\r\n  'use strict'\r\n\r\n  var EventTarget = function () {\r\n    this._listeners = {}\r\n  }\r\n\r\n  EventTarget.prototype.addEventListener = function (type, listener) {\r\n    this._listeners[type] = this._listeners[type] || []\r\n    if (this._listeners[type].indexOf(listener) < 0) {\r\n      this._listeners[type].push(listener)\r\n    }\r\n  }\r\n\r\n  EventTarget.prototype.removeEventListener = function (type, listener) {\r\n    if (this._listeners[type]) {\r\n      var p = this._listeners[type].indexOf(listener)\r\n      if (p >= 0) {\r\n        this._listeners[type].splice(p, 1)\r\n      }\r\n    }\r\n  }\r\n\r\n  EventTarget.prototype.dispatchEvent = function (evt) {\r\n    if (this._listeners[evt.type] && this._listeners[evt.type].length) {\r\n      var listeners = this._listeners[evt.type].slice()\r\n      for (var i = 0, l = listeners.length; i < l; ++i) {\r\n        listeners[i].call(this, evt)\r\n      }\r\n    }\r\n  }\r\n\r\n  var isGenerator = function (func) {\r\n    return (typeof func.constructor === 'function' &&\r\n      func.constructor.name === 'GeneratorFunction')\r\n  }\r\n\r\n  var functionToIterator = function (func) {\r\n    return {\r\n      next: function () {\r\n        var promise = func()\r\n        return promise ? {value: promise} : {done: true}\r\n      }\r\n    }\r\n  }\r\n\r\n  var promiseToIterator = function (promise) {\r\n    var called = false\r\n    return {\r\n      next: function () {\r\n        if (called) {\r\n          return {done: true}\r\n        }\r\n        called = true\r\n        return {value: promise}\r\n      }\r\n    }\r\n  }\r\n\r\n  var toIterator = function (obj, Promise) {\r\n    var type = typeof obj\r\n    if (type === 'object') {\r\n      if (typeof obj.next === 'function') {\r\n        return obj\r\n      }\r\n      /* istanbul ignore else */\r\n      if (typeof obj.then === 'function') {\r\n        return promiseToIterator(obj)\r\n      }\r\n    }\r\n    if (type === 'function') {\r\n      return isGenerator(obj) ? obj() : functionToIterator(obj)\r\n    }\r\n    return promiseToIterator(Promise.resolve(obj))\r\n  }\r\n\r\n  var PromisePoolEvent = function (target, type, data) {\r\n    this.target = target\r\n    this.type = type\r\n    this.data = data\r\n  }\r\n\r\n  var PromisePool = function (source, concurrency, options) {\r\n    EventTarget.call(this)\r\n    if (typeof concurrency !== 'number' ||\r\n        Math.floor(concurrency) !== concurrency ||\r\n        concurrency < 1) {\r\n      throw new Error('Invalid concurrency')\r\n    }\r\n    this._concurrency = concurrency\r\n    this._options = options || {}\r\n    this._options.promise = this._options.promise || Promise\r\n    this._iterator = toIterator(source, this._options.promise)\r\n    this._done = false\r\n    this._size = 0\r\n    this._promise = null\r\n    this._callbacks = null\r\n  }\r\n  PromisePool.prototype = new EventTarget()\r\n  PromisePool.prototype.constructor = PromisePool\r\n\r\n  PromisePool.prototype.concurrency = function (value) {\r\n    if (typeof value !== 'undefined') {\r\n      this._concurrency = value\r\n      if (this.active()) {\r\n        this._proceed()\r\n      }\r\n    }\r\n    return this._concurrency\r\n  }\r\n\r\n  PromisePool.prototype.size = function () {\r\n    return this._size\r\n  }\r\n\r\n  PromisePool.prototype.active = function () {\r\n    return !!this._promise\r\n  }\r\n\r\n  PromisePool.prototype.promise = function () {\r\n    return this._promise\r\n  }\r\n\r\n  PromisePool.prototype.start = function () {\r\n    var that = this\r\n    var Promise = this._options.promise\r\n    this._promise = new Promise(function (resolve, reject) {\r\n      that._callbacks = {\r\n        reject: reject,\r\n        resolve: resolve\r\n      }\r\n      that._proceed()\r\n    })\r\n    return this._promise\r\n  }\r\n\r\n  PromisePool.prototype._fireEvent = function (type, data) {\r\n    this.dispatchEvent(new PromisePoolEvent(this, type, data))\r\n  }\r\n\r\n  PromisePool.prototype._settle = function (error) {\r\n    if (error) {\r\n      this._callbacks.reject(error)\r\n    } else {\r\n      this._callbacks.resolve()\r\n    }\r\n    this._promise = null\r\n    this._callbacks = null\r\n  }\r\n\r\n  PromisePool.prototype._onPooledPromiseFulfilled = function (promise, result) {\r\n    this._size--\r\n    if (this.active()) {\r\n      this._fireEvent('fulfilled', {\r\n        promise: promise,\r\n        result: result\r\n      })\r\n      this._proceed()\r\n    }\r\n  }\r\n\r\n  PromisePool.prototype._onPooledPromiseRejected = function (promise, error) {\r\n    this._size--\r\n    if (this.active()) {\r\n      this._fireEvent('rejected', {\r\n        promise: promise,\r\n        error: error\r\n      })\r\n      this._settle(error || new Error('Unknown error'))\r\n    }\r\n  }\r\n\r\n  PromisePool.prototype._trackPromise = function (promise) {\r\n    var that = this\r\n    promise\r\n      .then(function (result) {\r\n        that._onPooledPromiseFulfilled(promise, result)\r\n      }, function (error) {\r\n        that._onPooledPromiseRejected(promise, error)\r\n      })['catch'](function (err) {\r\n        that._settle(new Error('Promise processing failed: ' + err))\r\n      })\r\n  }\r\n\r\n  PromisePool.prototype._proceed = function () {\r\n    if (!this._done) {\r\n      var result = null\r\n      while (this._size < this._concurrency &&\r\n          !(result = this._iterator.next()).done) {\r\n        this._size++\r\n        this._trackPromise(result.value)\r\n      }\r\n      this._done = (result === null || !!result.done)\r\n    }\r\n    if (this._done && this._size === 0) {\r\n      this._settle()\r\n    }\r\n  }\r\n\r\n  PromisePool.PromisePoolEvent = PromisePoolEvent\r\n  // Legacy API\r\n  PromisePool.PromisePool = PromisePool\r\n\r\n  return PromisePool\r\n})\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/es6-promise-pool/es6-promise-pool.js\n// module id = 7\n// module chunks = 0","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/events/events.js\n// module id = 8\n// module chunks = 0","'use strict';\nvar Mutation = global.MutationObserver || global.WebKitMutationObserver;\n\nvar scheduleDrain;\n\n{\n  if (Mutation) {\n    var called = 0;\n    var observer = new Mutation(nextTick);\n    var element = global.document.createTextNode('');\n    observer.observe(element, {\n      characterData: true\n    });\n    scheduleDrain = function () {\n      element.data = (called = ++called % 2);\n    };\n  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {\n    var channel = new global.MessageChannel();\n    channel.port1.onmessage = nextTick;\n    scheduleDrain = function () {\n      channel.port2.postMessage(0);\n    };\n  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {\n    scheduleDrain = function () {\n\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      var scriptEl = global.document.createElement('script');\n      scriptEl.onreadystatechange = function () {\n        nextTick();\n\n        scriptEl.onreadystatechange = null;\n        scriptEl.parentNode.removeChild(scriptEl);\n        scriptEl = null;\n      };\n      global.document.documentElement.appendChild(scriptEl);\n    };\n  } else {\n    scheduleDrain = function () {\n      setTimeout(nextTick, 0);\n    };\n  }\n}\n\nvar draining;\nvar queue = [];\n//named nextTick for less confusing stack traces\nfunction nextTick() {\n  draining = true;\n  var i, oldQueue;\n  var len = queue.length;\n  while (len) {\n    oldQueue = queue;\n    queue = [];\n    i = -1;\n    while (++i < len) {\n      oldQueue[i]();\n    }\n    len = queue.length;\n  }\n  draining = false;\n}\n\nmodule.exports = immediate;\nfunction immediate(task) {\n  if (queue.push(task) === 1 && !draining) {\n    scheduleDrain();\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/immediate/lib/browser.js\n// module id = 9\n// module chunks = 0","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/inherits/inherits_browser.js\n// module id = 10\n// module chunks = 0","(function(factory) {\n  if(typeof exports === 'object') {\n    factory(exports);\n  } else {\n    factory(this);\n  }\n}).call(this, function(root) { \n\n  var slice   = Array.prototype.slice,\n      each    = Array.prototype.forEach;\n\n  var extend = function(obj) {\n    if(typeof obj !== 'object') throw obj + ' is not an object' ;\n\n    var sources = slice.call(arguments, 1); \n\n    each.call(sources, function(source) {\n      if(source) {\n        for(var prop in source) {\n          if(typeof source[prop] === 'object' && obj[prop]) {\n            extend.call(obj, obj[prop], source[prop]);\n          } else {\n            obj[prop] = source[prop];\n          }\n        } \n      }\n    });\n\n    return obj;\n  }\n\n  root.extend = extend;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/js-extend/extend.js\n// module id = 11\n// module chunks = 0","'use strict';\nvar immediate = require('immediate');\n\n/* istanbul ignore next */\nfunction INTERNAL() {}\n\nvar handlers = {};\n\nvar REJECTED = ['REJECTED'];\nvar FULFILLED = ['FULFILLED'];\nvar PENDING = ['PENDING'];\n\nmodule.exports = Promise;\n\nfunction Promise(resolver) {\n  if (typeof resolver !== 'function') {\n    throw new TypeError('resolver must be a function');\n  }\n  this.state = PENDING;\n  this.queue = [];\n  this.outcome = void 0;\n  if (resolver !== INTERNAL) {\n    safelyResolveThenable(this, resolver);\n  }\n}\n\nPromise.prototype[\"catch\"] = function (onRejected) {\n  return this.then(null, onRejected);\n};\nPromise.prototype.then = function (onFulfilled, onRejected) {\n  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||\n    typeof onRejected !== 'function' && this.state === REJECTED) {\n    return this;\n  }\n  var promise = new this.constructor(INTERNAL);\n  if (this.state !== PENDING) {\n    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;\n    unwrap(promise, resolver, this.outcome);\n  } else {\n    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));\n  }\n\n  return promise;\n};\nfunction QueueItem(promise, onFulfilled, onRejected) {\n  this.promise = promise;\n  if (typeof onFulfilled === 'function') {\n    this.onFulfilled = onFulfilled;\n    this.callFulfilled = this.otherCallFulfilled;\n  }\n  if (typeof onRejected === 'function') {\n    this.onRejected = onRejected;\n    this.callRejected = this.otherCallRejected;\n  }\n}\nQueueItem.prototype.callFulfilled = function (value) {\n  handlers.resolve(this.promise, value);\n};\nQueueItem.prototype.otherCallFulfilled = function (value) {\n  unwrap(this.promise, this.onFulfilled, value);\n};\nQueueItem.prototype.callRejected = function (value) {\n  handlers.reject(this.promise, value);\n};\nQueueItem.prototype.otherCallRejected = function (value) {\n  unwrap(this.promise, this.onRejected, value);\n};\n\nfunction unwrap(promise, func, value) {\n  immediate(function () {\n    var returnValue;\n    try {\n      returnValue = func(value);\n    } catch (e) {\n      return handlers.reject(promise, e);\n    }\n    if (returnValue === promise) {\n      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));\n    } else {\n      handlers.resolve(promise, returnValue);\n    }\n  });\n}\n\nhandlers.resolve = function (self, value) {\n  var result = tryCatch(getThen, value);\n  if (result.status === 'error') {\n    return handlers.reject(self, result.value);\n  }\n  var thenable = result.value;\n\n  if (thenable) {\n    safelyResolveThenable(self, thenable);\n  } else {\n    self.state = FULFILLED;\n    self.outcome = value;\n    var i = -1;\n    var len = self.queue.length;\n    while (++i < len) {\n      self.queue[i].callFulfilled(value);\n    }\n  }\n  return self;\n};\nhandlers.reject = function (self, error) {\n  self.state = REJECTED;\n  self.outcome = error;\n  var i = -1;\n  var len = self.queue.length;\n  while (++i < len) {\n    self.queue[i].callRejected(error);\n  }\n  return self;\n};\n\nfunction getThen(obj) {\n  // Make sure we only access the accessor once as required by the spec\n  var then = obj && obj.then;\n  if (obj && typeof obj === 'object' && typeof then === 'function') {\n    return function appyThen() {\n      then.apply(obj, arguments);\n    };\n  }\n}\n\nfunction safelyResolveThenable(self, thenable) {\n  // Either fulfill, reject or reject with error\n  var called = false;\n  function onError(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.reject(self, value);\n  }\n\n  function onSuccess(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.resolve(self, value);\n  }\n\n  function tryToUnwrap() {\n    thenable(onSuccess, onError);\n  }\n\n  var result = tryCatch(tryToUnwrap);\n  if (result.status === 'error') {\n    onError(result.value);\n  }\n}\n\nfunction tryCatch(func, value) {\n  var out = {};\n  try {\n    out.value = func(value);\n    out.status = 'success';\n  } catch (e) {\n    out.status = 'error';\n    out.value = e;\n  }\n  return out;\n}\n\nPromise.resolve = resolve;\nfunction resolve(value) {\n  if (value instanceof this) {\n    return value;\n  }\n  return handlers.resolve(new this(INTERNAL), value);\n}\n\nPromise.reject = reject;\nfunction reject(reason) {\n  var promise = new this(INTERNAL);\n  return handlers.reject(promise, reason);\n}\n\nPromise.all = all;\nfunction all(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var values = new Array(len);\n  var resolved = 0;\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    allResolver(iterable[i], i);\n  }\n  return promise;\n  function allResolver(value, i) {\n    self.resolve(value).then(resolveFromAll, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n    function resolveFromAll(outValue) {\n      values[i] = outValue;\n      if (++resolved === len && !called) {\n        called = true;\n        handlers.resolve(promise, values);\n      }\n    }\n  }\n}\n\nPromise.race = race;\nfunction race(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    resolver(iterable[i]);\n  }\n  return promise;\n  function resolver(value) {\n    self.resolve(value).then(function (response) {\n      if (!called) {\n        called = true;\n        handlers.resolve(promise, response);\n      }\n    }, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lie/lib/browser.js\n// module id = 12\n// module chunks = 0","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} options\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options){\n  options = options || {};\n  if ('string' == typeof val) return parse(val);\n  return options.long\n    ? long(val)\n    : short(val);\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = '' + str;\n  if (str.length > 10000) return;\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);\n  if (!match) return;\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction short(ms) {\n  if (ms >= d) return Math.round(ms / d) + 'd';\n  if (ms >= h) return Math.round(ms / h) + 'h';\n  if (ms >= m) return Math.round(ms / m) + 'm';\n  if (ms >= s) return Math.round(ms / s) + 's';\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction long(ms) {\n  return plural(ms, d, 'day')\n    || plural(ms, h, 'hour')\n    || plural(ms, m, 'minute')\n    || plural(ms, s, 'second')\n    || ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) return;\n  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ms/index.js\n// module id = 13\n// module chunks = 0","'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar jsExtend = require('js-extend');\nvar debug = _interopDefault(require('debug'));\nvar inherits = _interopDefault(require('inherits'));\nvar lie = _interopDefault(require('lie'));\nvar events = require('events');\nvar getArguments = _interopDefault(require('argsarray'));\nvar scopedEval = _interopDefault(require('scope-eval'));\nvar Md5 = _interopDefault(require('spark-md5'));\nvar vuvuzela = _interopDefault(require('vuvuzela'));\nvar PromisePool = _interopDefault(require('es6-promise-pool'));\n\n/* istanbul ignore next */\nvar PouchPromise = typeof Promise === 'function' ? Promise : lie;\n\n// based on https://github.com/montagejs/collections\nfunction mangle(key) {\n  return '$' + key;\n}\nfunction unmangle(key) {\n  return key.substring(1);\n}\nfunction _Map() {\n  this.store = {};\n}\n_Map.prototype.get = function (key) {\n  var mangled = mangle(key);\n  return this.store[mangled];\n};\n_Map.prototype.set = function (key, value) {\n  var mangled = mangle(key);\n  this.store[mangled] = value;\n  return true;\n};\n_Map.prototype.has = function (key) {\n  var mangled = mangle(key);\n  return mangled in this.store;\n};\n_Map.prototype.delete = function (key) {\n  var mangled = mangle(key);\n  var res = mangled in this.store;\n  delete this.store[mangled];\n  return res;\n};\n_Map.prototype.forEach = function (cb) {\n  var keys = Object.keys(this.store);\n  for (var i = 0, len = keys.length; i < len; i++) {\n    var key = keys[i];\n    var value = this.store[key];\n    key = unmangle(key);\n    cb(value, key);\n  }\n};\n\nfunction _Set(array) {\n  this.store = new _Map();\n\n  // init with an array\n  if (array && Array.isArray(array)) {\n    for (var i = 0, len = array.length; i < len; i++) {\n      this.add(array[i]);\n    }\n  }\n}\n_Set.prototype.add = function (key) {\n  return this.store.set(key, true);\n};\n_Set.prototype.has = function (key) {\n  return this.store.has(key);\n};\n\nfunction isBinaryObject(object) {\n  return (typeof ArrayBuffer !== 'undefined' && object instanceof ArrayBuffer) ||\n    (typeof Blob !== 'undefined' && object instanceof Blob);\n}\n\nfunction cloneArrayBuffer(buff) {\n  if (typeof buff.slice === 'function') {\n    return buff.slice(0);\n  }\n  // IE10-11 slice() polyfill\n  var target = new ArrayBuffer(buff.byteLength);\n  var targetArray = new Uint8Array(target);\n  var sourceArray = new Uint8Array(buff);\n  targetArray.set(sourceArray);\n  return target;\n}\n\nfunction cloneBinaryObject(object) {\n  if (object instanceof ArrayBuffer) {\n    return cloneArrayBuffer(object);\n  }\n  var size = object.size;\n  var type = object.type;\n  // Blob\n  if (typeof object.slice === 'function') {\n    return object.slice(0, size, type);\n  }\n  // PhantomJS slice() replacement\n  return object.webkitSlice(0, size, type);\n}\n\n// most of this is borrowed from lodash.isPlainObject:\n// https://github.com/fis-components/lodash.isplainobject/\n// blob/29c358140a74f252aeb08c9eb28bef86f2217d4a/index.js\n\nvar funcToString = Function.prototype.toString;\nvar objectCtorString = funcToString.call(Object);\n\nfunction isPlainObject(value) {\n  var proto = Object.getPrototypeOf(value);\n  /* istanbul ignore if */\n  if (proto === null) { // not sure when this happens, but I guess it can\n    return true;\n  }\n  var Ctor = proto.constructor;\n  return (typeof Ctor == 'function' &&\n    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);\n}\n\nfunction clone(object) {\n  var newObject;\n  var i;\n  var len;\n\n  if (!object || typeof object !== 'object') {\n    return object;\n  }\n\n  if (Array.isArray(object)) {\n    newObject = [];\n    for (i = 0, len = object.length; i < len; i++) {\n      newObject[i] = clone(object[i]);\n    }\n    return newObject;\n  }\n\n  // special case: to avoid inconsistencies between IndexedDB\n  // and other backends, we automatically stringify Dates\n  if (object instanceof Date) {\n    return object.toISOString();\n  }\n\n  if (isBinaryObject(object)) {\n    return cloneBinaryObject(object);\n  }\n\n  if (!isPlainObject(object)) {\n    return object; // don't clone objects like Workers\n  }\n\n  newObject = {};\n  for (i in object) {\n    /* istanbul ignore else */\n    if (Object.prototype.hasOwnProperty.call(object, i)) {\n      var value = clone(object[i]);\n      if (typeof value !== 'undefined') {\n        newObject[i] = value;\n      }\n    }\n  }\n  return newObject;\n}\n\nfunction once(fun) {\n  var called = false;\n  return getArguments(function (args) {\n    /* istanbul ignore if */\n    if (called) {\n      // this is a smoke test and should never actually happen\n      throw new Error('once called more than once');\n    } else {\n      called = true;\n      fun.apply(this, args);\n    }\n  });\n}\n\nfunction toPromise(func) {\n  //create the function we will be returning\n  return getArguments(function (args) {\n    // Clone arguments\n    args = clone(args);\n    var self = this;\n    var tempCB =\n      (typeof args[args.length - 1] === 'function') ? args.pop() : false;\n    // if the last argument is a function, assume its a callback\n    var usedCB;\n    if (tempCB) {\n      // if it was a callback, create a new callback which calls it,\n      // but do so async so we don't trap any errors\n      usedCB = function (err, resp) {\n        process.nextTick(function () {\n          tempCB(err, resp);\n        });\n      };\n    }\n    var promise = new PouchPromise(function (fulfill, reject) {\n      var resp;\n      try {\n        var callback = once(function (err, mesg) {\n          if (err) {\n            reject(err);\n          } else {\n            fulfill(mesg);\n          }\n        });\n        // create a callback for this invocation\n        // apply the function in the orig context\n        args.push(callback);\n        resp = func.apply(self, args);\n        if (resp && typeof resp.then === 'function') {\n          fulfill(resp);\n        }\n      } catch (e) {\n        reject(e);\n      }\n    });\n    // if there is a callback, call it back\n    if (usedCB) {\n      promise.then(function (result) {\n        usedCB(null, result);\n      }, usedCB);\n    }\n    return promise;\n  });\n}\n\nvar log = debug('pouchdb:api');\n\nfunction adapterFun(name, callback) {\n  function logApiCall(self, name, args) {\n    /* istanbul ignore if */\n    if (log.enabled) {\n      var logArgs = [self.name, name];\n      for (var i = 0; i < args.length - 1; i++) {\n        logArgs.push(args[i]);\n      }\n      log.apply(null, logArgs);\n\n      // override the callback itself to log the response\n      var origCallback = args[args.length - 1];\n      args[args.length - 1] = function (err, res) {\n        var responseArgs = [self.name, name];\n        responseArgs = responseArgs.concat(\n          err ? ['error', err] : ['success', res]\n        );\n        log.apply(null, responseArgs);\n        origCallback(err, res);\n      };\n    }\n  }\n\n  return toPromise(getArguments(function (args) {\n    if (this._closed) {\n      return PouchPromise.reject(new Error('database is closed'));\n    }\n    if (this._destroyed) {\n      return PouchPromise.reject(new Error('database is destroyed'));\n    }\n    var self = this;\n    logApiCall(self, name, args);\n    if (!this.taskqueue.isReady) {\n      return new PouchPromise(function (fulfill, reject) {\n        self.taskqueue.addTask(function (failed) {\n          if (failed) {\n            reject(failed);\n          } else {\n            fulfill(self[name].apply(self, args));\n          }\n        });\n      });\n    }\n    return callback.apply(this, args);\n  }));\n}\n\n// like underscore/lodash _.pick()\nfunction pick(obj, arr) {\n  var res = {};\n  for (var i = 0, len = arr.length; i < len; i++) {\n    var prop = arr[i];\n    if (prop in obj) {\n      res[prop] = obj[prop];\n    }\n  }\n  return res;\n}\n\n// Most browsers throttle concurrent requests at 6, so it's silly\n// to shim _bulk_get by trying to launch potentially hundreds of requests\n// and then letting the majority time out. We can handle this ourselves.\nvar MAX_NUM_CONCURRENT_REQUESTS = 6;\n\nfunction identityFunction(x) {\n  return x;\n}\n\nfunction formatResultForOpenRevsGet(result) {\n  return [{\n    ok: result\n  }];\n}\n\n// shim for P/CouchDB adapters that don't directly implement _bulk_get\nfunction bulkGet(db, opts, callback) {\n  var requests = opts.docs;\n\n  // consolidate into one request per doc if possible\n  var requestsById = {};\n  requests.forEach(function (request) {\n    if (request.id in requestsById) {\n      requestsById[request.id].push(request);\n    } else {\n      requestsById[request.id] = [request];\n    }\n  });\n\n  var numDocs = Object.keys(requestsById).length;\n  var numDone = 0;\n  var perDocResults = new Array(numDocs);\n\n  function collapseResultsAndFinish() {\n    var results = [];\n    perDocResults.forEach(function (res) {\n      res.docs.forEach(function (info) {\n        results.push({\n          id: res.id,\n          docs: [info]\n        });\n      });\n    });\n    callback(null, {results: results});\n  }\n\n  function checkDone() {\n    if (++numDone === numDocs) {\n      collapseResultsAndFinish();\n    }\n  }\n\n  function gotResult(docIndex, id, docs) {\n    perDocResults[docIndex] = {id: id, docs: docs};\n    checkDone();\n  }\n\n  var allRequests = Object.keys(requestsById);\n\n  var i = 0;\n\n  function nextBatch() {\n\n    if (i >= allRequests.length) {\n      return;\n    }\n\n    var upTo = Math.min(i + MAX_NUM_CONCURRENT_REQUESTS, allRequests.length);\n    var batch = allRequests.slice(i, upTo);\n    processBatch(batch, i);\n    i += batch.length;\n  }\n\n  function processBatch(batch, offset) {\n    batch.forEach(function (docId, j) {\n      var docIdx = offset + j;\n      var docRequests = requestsById[docId];\n\n      // just use the first request as the \"template\"\n      // TODO: The _bulk_get API allows for more subtle use cases than this,\n      // but for now it is unlikely that there will be a mix of different\n      // \"atts_since\" or \"attachments\" in the same request, since it's just\n      // replicate.js that is using this for the moment.\n      // Also, atts_since is aspirational, since we don't support it yet.\n      var docOpts = pick(docRequests[0], ['atts_since', 'attachments']);\n      docOpts.open_revs = docRequests.map(function (request) {\n        // rev is optional, open_revs disallowed\n        return request.rev;\n      });\n\n      // remove falsey / undefined revisions\n      docOpts.open_revs = docOpts.open_revs.filter(identityFunction);\n\n      var formatResult = identityFunction;\n\n      if (docOpts.open_revs.length === 0) {\n        delete docOpts.open_revs;\n\n        // when fetching only the \"winning\" leaf,\n        // transform the result so it looks like an open_revs\n        // request\n        formatResult = formatResultForOpenRevsGet;\n      }\n\n      // globally-supplied options\n      ['revs', 'attachments', 'binary', 'ajax'].forEach(function (param) {\n        if (param in opts) {\n          docOpts[param] = opts[param];\n        }\n      });\n      db.get(docId, docOpts, function (err, res) {\n        var result;\n        /* istanbul ignore if */\n        if (err) {\n          result = [{error: err}];\n        } else {\n          result = formatResult(res);\n        }\n        gotResult(docIdx, docId, result);\n        nextBatch();\n      });\n    });\n  }\n\n  nextBatch();\n\n}\n\nfunction isChromeApp() {\n  return (typeof chrome !== \"undefined\" &&\n    typeof chrome.storage !== \"undefined\" &&\n    typeof chrome.storage.local !== \"undefined\");\n}\n\nvar hasLocal;\n\nif (isChromeApp()) {\n  hasLocal = false;\n} else {\n  try {\n    localStorage.setItem('_pouch_check_localstorage', 1);\n    hasLocal = !!localStorage.getItem('_pouch_check_localstorage');\n  } catch (e) {\n    hasLocal = false;\n  }\n}\n\nfunction hasLocalStorage() {\n  return hasLocal;\n}\n\ninherits(Changes$1, events.EventEmitter);\n\n/* istanbul ignore next */\nfunction attachBrowserEvents(self) {\n  if (isChromeApp()) {\n    chrome.storage.onChanged.addListener(function (e) {\n      // make sure it's event addressed to us\n      if (e.db_name != null) {\n        //object only has oldValue, newValue members\n        self.emit(e.dbName.newValue);\n      }\n    });\n  } else if (hasLocalStorage()) {\n    if (typeof addEventListener !== 'undefined') {\n      addEventListener(\"storage\", function (e) {\n        self.emit(e.key);\n      });\n    } else { // old IE\n      window.attachEvent(\"storage\", function (e) {\n        self.emit(e.key);\n      });\n    }\n  }\n}\n\nfunction Changes$1() {\n  events.EventEmitter.call(this);\n  this._listeners = {};\n\n  attachBrowserEvents(this);\n}\nChanges$1.prototype.addListener = function (dbName, id, db, opts) {\n  /* istanbul ignore if */\n  if (this._listeners[id]) {\n    return;\n  }\n  var self = this;\n  var inprogress = false;\n  function eventFunction() {\n    /* istanbul ignore if */\n    if (!self._listeners[id]) {\n      return;\n    }\n    if (inprogress) {\n      inprogress = 'waiting';\n      return;\n    }\n    inprogress = true;\n    var changesOpts = pick(opts, [\n      'style', 'include_docs', 'attachments', 'conflicts', 'filter',\n      'doc_ids', 'view', 'since', 'query_params', 'binary'\n    ]);\n\n    /* istanbul ignore next */\n    function onError() {\n      inprogress = false;\n    }\n\n    db.changes(changesOpts).on('change', function (c) {\n      if (c.seq > opts.since && !opts.cancelled) {\n        opts.since = c.seq;\n        opts.onChange(c);\n      }\n    }).on('complete', function () {\n      if (inprogress === 'waiting') {\n        setTimeout(function (){\n          eventFunction();\n        },0);\n      }\n      inprogress = false;\n    }).on('error', onError);\n  }\n  this._listeners[id] = eventFunction;\n  this.on(dbName, eventFunction);\n};\n\nChanges$1.prototype.removeListener = function (dbName, id) {\n  /* istanbul ignore if */\n  if (!(id in this._listeners)) {\n    return;\n  }\n  events.EventEmitter.prototype.removeListener.call(this, dbName,\n    this._listeners[id]);\n  delete this._listeners[id];\n};\n\n\n/* istanbul ignore next */\nChanges$1.prototype.notifyLocalWindows = function (dbName) {\n  //do a useless change on a storage thing\n  //in order to get other windows's listeners to activate\n  if (isChromeApp()) {\n    chrome.storage.local.set({dbName: dbName});\n  } else if (hasLocalStorage()) {\n    localStorage[dbName] = (localStorage[dbName] === \"a\") ? \"b\" : \"a\";\n  }\n};\n\nChanges$1.prototype.notify = function (dbName) {\n  this.emit(dbName);\n  this.notifyLocalWindows(dbName);\n};\n\nfunction guardedConsole(method) {\n  /* istanbul ignore else */\n  if (console !== 'undefined' && method in console) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    console[method].apply(console, args);\n  }\n}\n\nfunction randomNumber(min, max) {\n  var maxTimeout = 600000; // Hard-coded default of 10 minutes\n  min = parseInt(min, 10) || 0;\n  max = parseInt(max, 10);\n  if (max !== max || max <= min) {\n    max = (min || 1) << 1; //doubling\n  } else {\n    max = max + 1;\n  }\n  // In order to not exceed maxTimeout, pick a random value between half of maxTimeout and maxTimeout\n  if(max > maxTimeout) {\n    min = maxTimeout >> 1; // divide by two\n    max = maxTimeout;\n  }\n  var ratio = Math.random();\n  var range = max - min;\n\n  return ~~(range * ratio + min); // ~~ coerces to an int, but fast.\n}\n\nfunction defaultBackOff(min) {\n  var max = 0;\n  if (!min) {\n    max = 2000;\n  }\n  return randomNumber(min, max);\n}\n\n// designed to give info to browser users, who are disturbed\n// when they see http errors in the console\nfunction explainError(status, str) {\n  guardedConsole('info', 'The above ' + status + ' is totally normal. ' + str);\n}\n\ninherits(PouchError, Error);\n\nfunction PouchError(opts) {\n  Error.call(this, opts.reason);\n  this.status = opts.status;\n  this.name = opts.error;\n  this.message = opts.reason;\n  this.error = true;\n}\n\nPouchError.prototype.toString = function () {\n  return JSON.stringify({\n    status: this.status,\n    name: this.name,\n    message: this.message,\n    reason: this.reason\n  });\n};\n\nvar UNAUTHORIZED = new PouchError({\n  status: 401,\n  error: 'unauthorized',\n  reason: \"Name or password is incorrect.\"\n});\n\nvar MISSING_BULK_DOCS = new PouchError({\n  status: 400,\n  error: 'bad_request',\n  reason: \"Missing JSON list of 'docs'\"\n});\n\nvar MISSING_DOC = new PouchError({\n  status: 404,\n  error: 'not_found',\n  reason: 'missing'\n});\n\nvar REV_CONFLICT = new PouchError({\n  status: 409,\n  error: 'conflict',\n  reason: 'Document update conflict'\n});\n\nvar INVALID_ID = new PouchError({\n  status: 400,\n  error: 'bad_request',\n  reason: '_id field must contain a string'\n});\n\nvar MISSING_ID = new PouchError({\n  status: 412,\n  error: 'missing_id',\n  reason: '_id is required for puts'\n});\n\nvar RESERVED_ID = new PouchError({\n  status: 400,\n  error: 'bad_request',\n  reason: 'Only reserved document ids may start with underscore.'\n});\n\nvar NOT_OPEN = new PouchError({\n  status: 412,\n  error: 'precondition_failed',\n  reason: 'Database not open'\n});\n\nvar UNKNOWN_ERROR = new PouchError({\n  status: 500,\n  error: 'unknown_error',\n  reason: 'Database encountered an unknown error'\n});\n\nvar BAD_ARG = new PouchError({\n  status: 500,\n  error: 'badarg',\n  reason: 'Some query argument is invalid'\n});\n\nvar INVALID_REQUEST = new PouchError({\n  status: 400,\n  error: 'invalid_request',\n  reason: 'Request was invalid'\n});\n\nvar QUERY_PARSE_ERROR = new PouchError({\n  status: 400,\n  error: 'query_parse_error',\n  reason: 'Some query parameter is invalid'\n});\n\nvar DOC_VALIDATION = new PouchError({\n  status: 500,\n  error: 'doc_validation',\n  reason: 'Bad special document member'\n});\n\nvar BAD_REQUEST = new PouchError({\n  status: 400,\n  error: 'bad_request',\n  reason: 'Something wrong with the request'\n});\n\nvar NOT_AN_OBJECT = new PouchError({\n  status: 400,\n  error: 'bad_request',\n  reason: 'Document must be a JSON object'\n});\n\nvar DB_MISSING = new PouchError({\n  status: 404,\n  error: 'not_found',\n  reason: 'Database not found'\n});\n\nvar IDB_ERROR = new PouchError({\n  status: 500,\n  error: 'indexed_db_went_bad',\n  reason: 'unknown'\n});\n\nvar WSQ_ERROR = new PouchError({\n  status: 500,\n  error: 'web_sql_went_bad',\n  reason: 'unknown'\n});\n\nvar LDB_ERROR = new PouchError({\n  status: 500,\n  error: 'levelDB_went_went_bad',\n  reason: 'unknown'\n});\n\nvar FORBIDDEN = new PouchError({\n  status: 403,\n  error: 'forbidden',\n  reason: 'Forbidden by design doc validate_doc_update function'\n});\n\nvar INVALID_REV = new PouchError({\n  status: 400,\n  error: 'bad_request',\n  reason: 'Invalid rev format'\n});\n\nvar FILE_EXISTS = new PouchError({\n  status: 412,\n  error: 'file_exists',\n  reason: 'The database could not be created, the file already exists.'\n});\n\nvar MISSING_STUB = new PouchError({\n  status: 412,\n  error: 'missing_stub'\n});\n\nvar INVALID_URL = new PouchError({\n  status: 413,\n  error: 'invalid_url',\n  reason: 'Provided URL is invalid'\n});\n\nfunction createError(error, reason) {\n  function CustomPouchError(reason) {\n    // inherit error properties from our parent error manually\n    // so as to allow proper JSON parsing.\n    /* jshint ignore:start */\n    for (var p in error) {\n      if (typeof error[p] !== 'function') {\n        this[p] = error[p];\n      }\n    }\n    /* jshint ignore:end */\n    if (reason !== undefined) {\n      this.reason = reason;\n    }\n  }\n  CustomPouchError.prototype = PouchError.prototype;\n  return new CustomPouchError(reason);\n}\n\nfunction generateErrorFromResponse(err) {\n\n  if (typeof err !== 'object') {\n    var data = err;\n    err = UNKNOWN_ERROR;\n    err.data = data;\n  }\n\n  if ('error' in err && err.error === 'conflict') {\n    err.name = 'conflict';\n    err.status = 409;\n  }\n\n  if (!('name' in err)) {\n    err.name = err.error || 'unknown';\n  }\n\n  if (!('status' in err)) {\n    err.status = 500;\n  }\n\n  if (!('message' in err)) {\n    err.message = err.message || err.reason;\n  }\n\n  return err;\n}\n\nfunction tryFilter(filter, doc, req) {\n  try {\n    return !filter(doc, req);\n  } catch (err) {\n    var msg = 'Filter function threw: ' + err.toString();\n    return createError(BAD_REQUEST, msg);\n  }\n}\n\nfunction filterChange(opts) {\n  var req = {};\n  var hasFilter = opts.filter && typeof opts.filter === 'function';\n  req.query = opts.query_params;\n\n  return function filter(change) {\n    if (!change.doc) {\n      // CSG sends events on the changes feed that don't have documents,\n      // this hack makes a whole lot of existing code robust.\n      change.doc = {};\n    }\n\n    var filterReturn = hasFilter && tryFilter(opts.filter, change.doc, req);\n\n    if (typeof filterReturn === 'object') {\n      return filterReturn;\n    }\n\n    if (filterReturn) {\n      return false;\n    }\n\n    if (!opts.include_docs) {\n      delete change.doc;\n    } else if (!opts.attachments) {\n      for (var att in change.doc._attachments) {\n        /* istanbul ignore else */\n        if (change.doc._attachments.hasOwnProperty(att)) {\n          change.doc._attachments[att].stub = true;\n        }\n      }\n    }\n    return true;\n  };\n}\n\nfunction flatten(arrs) {\n  var res = [];\n  for (var i = 0, len = arrs.length; i < len; i++) {\n    res = res.concat(arrs[i]);\n  }\n  return res;\n}\n\n// Determine id an ID is valid\n//   - invalid IDs begin with an underescore that does not begin '_design' or\n//     '_local'\n//   - any other string value is a valid id\n// Returns the specific error object for each case\nfunction invalidIdError(id) {\n  var err;\n  if (!id) {\n    err = createError(MISSING_ID);\n  } else if (typeof id !== 'string') {\n    err = createError(INVALID_ID);\n  } else if (/^_/.test(id) && !(/^_(design|local)/).test(id)) {\n    err = createError(RESERVED_ID);\n  }\n  if (err) {\n    throw err;\n  }\n}\n\nfunction listenerCount(ee, type) {\n  return 'listenerCount' in ee ? ee.listenerCount(type) :\n                                 events.EventEmitter.listenerCount(ee, type);\n}\n\nfunction parseDesignDocFunctionName(s) {\n  if (!s) {\n    return null;\n  }\n  var parts = s.split('/');\n  if (parts.length === 2) {\n    return parts;\n  }\n  if (parts.length === 1) {\n    return [s, s];\n  }\n  return null;\n}\n\nfunction normalizeDesignDocFunctionName(s) {\n  var normalized = parseDesignDocFunctionName(s);\n  return normalized ? normalized.join('/') : null;\n}\n\n// originally parseUri 1.2.2, now patched by us\n// (c) Steven Levithan <stevenlevithan.com>\n// MIT License\nvar keys = [\"source\", \"protocol\", \"authority\", \"userInfo\", \"user\", \"password\",\n    \"host\", \"port\", \"relative\", \"path\", \"directory\", \"file\", \"query\", \"anchor\"];\nvar qName =\"queryKey\";\nvar qParser = /(?:^|&)([^&=]*)=?([^&]*)/g;\n\n// use the \"loose\" parser\n/* jshint maxlen: false */\nvar parser = /^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?(?:\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\n\nfunction parseUri(str) {\n  var m = parser.exec(str);\n  var uri = {};\n  var i = 14;\n\n  while (i--) {\n    var key = keys[i];\n    var value = m[i] || \"\";\n    var encoded = ['user', 'password'].indexOf(key) !== -1;\n    uri[key] = encoded ? decodeURIComponent(value) : value;\n  }\n\n  uri[qName] = {};\n  uri[keys[12]].replace(qParser, function ($0, $1, $2) {\n    if ($1) {\n      uri[qName][$1] = $2;\n    }\n  });\n\n  return uri;\n}\n\n// this is essentially the \"update sugar\" function from daleharvey/pouchdb#1388\n// the diffFun tells us what delta to apply to the doc.  it either returns\n// the doc, or false if it doesn't need to do an update after all\nfunction upsert(db, docId, diffFun) {\n  return new PouchPromise(function (fulfill, reject) {\n    db.get(docId, function (err, doc) {\n      if (err) {\n        /* istanbul ignore next */\n        if (err.status !== 404) {\n          return reject(err);\n        }\n        doc = {};\n      }\n\n      // the user might change the _rev, so save it for posterity\n      var docRev = doc._rev;\n      var newDoc = diffFun(doc);\n\n      if (!newDoc) {\n        // if the diffFun returns falsy, we short-circuit as\n        // an optimization\n        return fulfill({updated: false, rev: docRev});\n      }\n\n      // users aren't allowed to modify these values,\n      // so reset them here\n      newDoc._id = docId;\n      newDoc._rev = docRev;\n      fulfill(tryAndPut(db, newDoc, diffFun));\n    });\n  });\n}\n\nfunction tryAndPut(db, doc, diffFun) {\n  return db.put(doc).then(function (res) {\n    return {\n      updated: true,\n      rev: res.rev\n    };\n  }, function (err) {\n    /* istanbul ignore next */\n    if (err.status !== 409) {\n      throw err;\n    }\n    return upsert(db, doc._id, diffFun);\n  });\n}\n\n// BEGIN Math.uuid.js\n\n/*!\nMath.uuid.js (v1.4)\nhttp://www.broofa.com\nmailto:robert@broofa.com\n\nCopyright (c) 2010 Robert Kieffer\nDual licensed under the MIT and GPL licenses.\n*/\n\n/*\n * Generate a random uuid.\n *\n * USAGE: Math.uuid(length, radix)\n *   length - the desired number of characters\n *   radix  - the number of allowable values for each character.\n *\n * EXAMPLES:\n *   // No arguments  - returns RFC4122, version 4 ID\n *   >>> Math.uuid()\n *   \"92329D39-6F5C-4520-ABFC-AAB64544E172\"\n *\n *   // One argument - returns ID of the specified length\n *   >>> Math.uuid(15)     // 15 character ID (default base=62)\n *   \"VcydxgltxrVZSTV\"\n *\n *   // Two arguments - returns ID of the specified length, and radix. \n *   // (Radix must be <= 62)\n *   >>> Math.uuid(8, 2)  // 8 character ID (base=2)\n *   \"01001010\"\n *   >>> Math.uuid(8, 10) // 8 character ID (base=10)\n *   \"47473046\"\n *   >>> Math.uuid(8, 16) // 8 character ID (base=16)\n *   \"098F4D35\"\n */\nvar chars = (\n  '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ' +\n  'abcdefghijklmnopqrstuvwxyz'\n).split('');\nfunction getValue(radix) {\n  return 0 | Math.random() * radix;\n}\nfunction uuid(len, radix) {\n  radix = radix || chars.length;\n  var out = '';\n  var i = -1;\n\n  if (len) {\n    // Compact form\n    while (++i < len) {\n      out += chars[getValue(radix)];\n    }\n    return out;\n  }\n    // rfc4122, version 4 form\n    // Fill in random data.  At i==19 set the high bits of clock sequence as\n    // per rfc4122, sec. 4.1.5\n  while (++i < 36) {\n    switch (i) {\n      case 8:\n      case 13:\n      case 18:\n      case 23:\n        out += '-';\n        break;\n      case 19:\n        out += chars[(getValue(16) & 0x3) | 0x8];\n        break;\n      default:\n        out += chars[getValue(16)];\n    }\n  }\n\n  return out;\n}\n\n// We fetch all leafs of the revision tree, and sort them based on tree length\n// and whether they were deleted, undeleted documents with the longest revision\n// tree (most edits) win\n// The final sort algorithm is slightly documented in a sidebar here:\n// http://guide.couchdb.org/draft/conflicts.html\nfunction winningRev(metadata) {\n  var winningId;\n  var winningPos;\n  var winningDeleted;\n  var toVisit = metadata.rev_tree.slice();\n  var node;\n  while ((node = toVisit.pop())) {\n    var tree = node.ids;\n    var branches = tree[2];\n    var pos = node.pos;\n    if (branches.length) { // non-leaf\n      for (var i = 0, len = branches.length; i < len; i++) {\n        toVisit.push({pos: pos + 1, ids: branches[i]});\n      }\n      continue;\n    }\n    var deleted = !!tree[1].deleted;\n    var id = tree[0];\n    // sort by deleted, then pos, then id\n    if (!winningId || (winningDeleted !== deleted ? winningDeleted :\n        winningPos !== pos ? winningPos < pos : winningId < id)) {\n      winningId = id;\n      winningPos = pos;\n      winningDeleted = deleted;\n    }\n  }\n\n  return winningPos + '-' + winningId;\n}\n\n// Pretty much all below can be combined into a higher order function to\n// traverse revisions\n// The return value from the callback will be passed as context to all\n// children of that node\nfunction traverseRevTree(revs, callback) {\n  var toVisit = revs.slice();\n\n  var node;\n  while ((node = toVisit.pop())) {\n    var pos = node.pos;\n    var tree = node.ids;\n    var branches = tree[2];\n    var newCtx =\n      callback(branches.length === 0, pos, tree[0], node.ctx, tree[1]);\n    for (var i = 0, len = branches.length; i < len; i++) {\n      toVisit.push({pos: pos + 1, ids: branches[i], ctx: newCtx});\n    }\n  }\n}\n\nfunction sortByPos(a, b) {\n  return a.pos - b.pos;\n}\n\nfunction collectLeaves(revs) {\n  var leaves = [];\n  traverseRevTree(revs, function (isLeaf, pos, id, acc, opts) {\n    if (isLeaf) {\n      leaves.push({rev: pos + \"-\" + id, pos: pos, opts: opts});\n    }\n  });\n  leaves.sort(sortByPos).reverse();\n  for (var i = 0, len = leaves.length; i < len; i++) {\n    delete leaves[i].pos;\n  }\n  return leaves;\n}\n\n// returns revs of all conflicts that is leaves such that\n// 1. are not deleted and\n// 2. are different than winning revision\nfunction collectConflicts(metadata) {\n  var win = winningRev(metadata);\n  var leaves = collectLeaves(metadata.rev_tree);\n  var conflicts = [];\n  for (var i = 0, len = leaves.length; i < len; i++) {\n    var leaf = leaves[i];\n    if (leaf.rev !== win && !leaf.opts.deleted) {\n      conflicts.push(leaf.rev);\n    }\n  }\n  return conflicts;\n}\n\n// compact a tree by marking its non-leafs as missing,\n// and return a list of revs to delete\nfunction compactTree(metadata) {\n  var revs = [];\n  traverseRevTree(metadata.rev_tree, function (isLeaf, pos,\n                                               revHash, ctx, opts) {\n    if (opts.status === 'available' && !isLeaf) {\n      revs.push(pos + '-' + revHash);\n      opts.status = 'missing';\n    }\n  });\n  return revs;\n}\n\n// build up a list of all the paths to the leafs in this revision tree\nfunction rootToLeaf(revs) {\n  var paths = [];\n  var toVisit = revs.slice();\n  var node;\n  while ((node = toVisit.pop())) {\n    var pos = node.pos;\n    var tree = node.ids;\n    var id = tree[0];\n    var opts = tree[1];\n    var branches = tree[2];\n    var isLeaf = branches.length === 0;\n\n    var history = node.history ? node.history.slice() : [];\n    history.push({id: id, opts: opts});\n    if (isLeaf) {\n      paths.push({pos: (pos + 1 - history.length), ids: history});\n    }\n    for (var i = 0, len = branches.length; i < len; i++) {\n      toVisit.push({pos: pos + 1, ids: branches[i], history: history});\n    }\n  }\n  return paths.reverse();\n}\n\n// for a better overview of what this is doing, read:\n// https://github.com/apache/couchdb-couch/blob/master/src/couch_key_tree.erl\n//\n// But for a quick intro, CouchDB uses a revision tree to store a documents\n// history, A -> B -> C, when a document has conflicts, that is a branch in the\n// tree, A -> (B1 | B2 -> C), We store these as a nested array in the format\n//\n// KeyTree = [Path ... ]\n// Path = {pos: position_from_root, ids: Tree}\n// Tree = [Key, Opts, [Tree, ...]], in particular single node: [Key, []]\n\nfunction sortByPos$1(a, b) {\n  return a.pos - b.pos;\n}\n\n// classic binary search\nfunction binarySearch(arr, item, comparator) {\n  var low = 0;\n  var high = arr.length;\n  var mid;\n  while (low < high) {\n    mid = (low + high) >>> 1;\n    if (comparator(arr[mid], item) < 0) {\n      low = mid + 1;\n    } else {\n      high = mid;\n    }\n  }\n  return low;\n}\n\n// assuming the arr is sorted, insert the item in the proper place\nfunction insertSorted(arr, item, comparator) {\n  var idx = binarySearch(arr, item, comparator);\n  arr.splice(idx, 0, item);\n}\n\n// Turn a path as a flat array into a tree with a single branch.\n// If any should be stemmed from the beginning of the array, that's passed\n// in as the second argument\nfunction pathToTree(path, numStemmed) {\n  var root;\n  var leaf;\n  for (var i = numStemmed, len = path.length; i < len; i++) {\n    var node = path[i];\n    var currentLeaf = [node.id, node.opts, []];\n    if (leaf) {\n      leaf[2].push(currentLeaf);\n      leaf = currentLeaf;\n    } else {\n      root = leaf = currentLeaf;\n    }\n  }\n  return root;\n}\n\n// compare the IDs of two trees\nfunction compareTree(a, b) {\n  return a[0] < b[0] ? -1 : 1;\n}\n\n// Merge two trees together\n// The roots of tree1 and tree2 must be the same revision\nfunction mergeTree(in_tree1, in_tree2) {\n  var queue = [{tree1: in_tree1, tree2: in_tree2}];\n  var conflicts = false;\n  while (queue.length > 0) {\n    var item = queue.pop();\n    var tree1 = item.tree1;\n    var tree2 = item.tree2;\n\n    if (tree1[1].status || tree2[1].status) {\n      tree1[1].status =\n        (tree1[1].status ===  'available' ||\n        tree2[1].status === 'available') ? 'available' : 'missing';\n    }\n\n    for (var i = 0; i < tree2[2].length; i++) {\n      if (!tree1[2][0]) {\n        conflicts = 'new_leaf';\n        tree1[2][0] = tree2[2][i];\n        continue;\n      }\n\n      var merged = false;\n      for (var j = 0; j < tree1[2].length; j++) {\n        if (tree1[2][j][0] === tree2[2][i][0]) {\n          queue.push({tree1: tree1[2][j], tree2: tree2[2][i]});\n          merged = true;\n        }\n      }\n      if (!merged) {\n        conflicts = 'new_branch';\n        insertSorted(tree1[2], tree2[2][i], compareTree);\n      }\n    }\n  }\n  return {conflicts: conflicts, tree: in_tree1};\n}\n\nfunction doMerge(tree, path, dontExpand) {\n  var restree = [];\n  var conflicts = false;\n  var merged = false;\n  var res;\n\n  if (!tree.length) {\n    return {tree: [path], conflicts: 'new_leaf'};\n  }\n\n  for (var i = 0, len = tree.length; i < len; i++) {\n    var branch = tree[i];\n    if (branch.pos === path.pos && branch.ids[0] === path.ids[0]) {\n      // Paths start at the same position and have the same root, so they need\n      // merged\n      res = mergeTree(branch.ids, path.ids);\n      restree.push({pos: branch.pos, ids: res.tree});\n      conflicts = conflicts || res.conflicts;\n      merged = true;\n    } else if (dontExpand !== true) {\n      // The paths start at a different position, take the earliest path and\n      // traverse up until it as at the same point from root as the path we\n      // want to merge.  If the keys match we return the longer path with the\n      // other merged After stemming we dont want to expand the trees\n\n      var t1 = branch.pos < path.pos ? branch : path;\n      var t2 = branch.pos < path.pos ? path : branch;\n      var diff = t2.pos - t1.pos;\n\n      var candidateParents = [];\n\n      var trees = [];\n      trees.push({ids: t1.ids, diff: diff, parent: null, parentIdx: null});\n      while (trees.length > 0) {\n        var item = trees.pop();\n        if (item.diff === 0) {\n          if (item.ids[0] === t2.ids[0]) {\n            candidateParents.push(item);\n          }\n          continue;\n        }\n        var elements = item.ids[2];\n        for (var j = 0, elementsLen = elements.length; j < elementsLen; j++) {\n          trees.push({\n            ids: elements[j],\n            diff: item.diff - 1,\n            parent: item.ids,\n            parentIdx: j\n          });\n        }\n      }\n\n      var el = candidateParents[0];\n\n      if (!el) {\n        restree.push(branch);\n      } else {\n        res = mergeTree(el.ids, t2.ids);\n        el.parent[2][el.parentIdx] = res.tree;\n        restree.push({pos: t1.pos, ids: t1.ids});\n        conflicts = conflicts || res.conflicts;\n        merged = true;\n      }\n    } else {\n      restree.push(branch);\n    }\n  }\n\n  // We didnt find\n  if (!merged) {\n    restree.push(path);\n  }\n\n  restree.sort(sortByPos$1);\n\n  return {\n    tree: restree,\n    conflicts: conflicts || 'internal_node'\n  };\n}\n\n// To ensure we dont grow the revision tree infinitely, we stem old revisions\nfunction stem(tree, depth) {\n  // First we break out the tree into a complete list of root to leaf paths\n  var paths = rootToLeaf(tree);\n  var maybeStem = {};\n\n  var result;\n  for (var i = 0, len = paths.length; i < len; i++) {\n    // Then for each path, we cut off the start of the path based on the\n    // `depth` to stem to, and generate a new set of flat trees\n    var path = paths[i];\n    var stemmed = path.ids;\n    var numStemmed = Math.max(0, stemmed.length - depth);\n    var stemmedNode = {\n      pos: path.pos + numStemmed,\n      ids: pathToTree(stemmed, numStemmed)\n    };\n\n    for (var s = 0; s < numStemmed; s++) {\n      var rev = (path.pos + s) + '-' + stemmed[s].id;\n      maybeStem[rev] = true;\n    }\n\n    // Then we remerge all those flat trees together, ensuring that we dont\n    // connect trees that would go beyond the depth limit\n    if (result) {\n      result = doMerge(result, stemmedNode, true).tree;\n    } else {\n      result = [stemmedNode];\n    }\n  }\n\n  traverseRevTree(result, function (isLeaf, pos, revHash) {\n    // some revisions may have been removed in a branch but not in another\n    delete maybeStem[pos + '-' + revHash];\n  });\n\n  return {\n    tree: result,\n    revs: Object.keys(maybeStem)\n  };\n}\n\nfunction merge(tree, path, depth) {\n  var newTree = doMerge(tree, path);\n  var stemmed = stem(newTree.tree, depth);\n  return {\n    tree: stemmed.tree,\n    stemmedRevs: stemmed.revs,\n    conflicts: newTree.conflicts\n  };\n}\n\n// return true if a rev exists in the rev tree, false otherwise\nfunction revExists(revs, rev) {\n  var toVisit = revs.slice();\n  var splitRev = rev.split('-');\n  var targetPos = parseInt(splitRev[0], 10);\n  var targetId = splitRev[1];\n\n  var node;\n  while ((node = toVisit.pop())) {\n    if (node.pos === targetPos && node.ids[0] === targetId) {\n      return true;\n    }\n    var branches = node.ids[2];\n    for (var i = 0, len = branches.length; i < len; i++) {\n      toVisit.push({pos: node.pos + 1, ids: branches[i]});\n    }\n  }\n  return false;\n}\n\nfunction getTrees(node) {\n  return node.ids;\n}\n\n// check if a specific revision of a doc has been deleted\n//  - metadata: the metadata object from the doc store\n//  - rev: (optional) the revision to check. defaults to winning revision\nfunction isDeleted(metadata, rev) {\n  if (!rev) {\n    rev = winningRev(metadata);\n  }\n  var id = rev.substring(rev.indexOf('-') + 1);\n  var toVisit = metadata.rev_tree.map(getTrees);\n\n  var tree;\n  while ((tree = toVisit.pop())) {\n    if (tree[0] === id) {\n      return !!tree[1].deleted;\n    }\n    toVisit = toVisit.concat(tree[2]);\n  }\n}\n\nfunction isLocalId(id) {\n  return (/^_local/).test(id);\n}\n\nfunction evalFilter(input) {\n  return scopedEval('\"use strict\";\\nreturn ' + input + ';', {});\n}\n\nfunction evalView(input) {\n  var code = [\n    'return function(doc) {',\n    '  \"use strict\";',\n    '  var emitted = false;',\n    '  var emit = function (a, b) {',\n    '    emitted = true;',\n    '  };',\n    '  var view = ' + input + ';',\n    '  view(doc);',\n    '  if (emitted) {',\n    '    return true;',\n    '  }',\n    '};'\n  ].join('\\n');\n\n  return scopedEval(code, {});\n}\n\ninherits(Changes, events.EventEmitter);\n\nfunction tryCatchInChangeListener(self, change) {\n  // isolate try/catches to avoid V8 deoptimizations\n  try {\n    self.emit('change', change);\n  } catch (e) {\n    guardedConsole('error', 'Error in .on(\"change\", function):', e);\n  }\n}\n\nfunction Changes(db, opts, callback) {\n  events.EventEmitter.call(this);\n  var self = this;\n  this.db = db;\n  opts = opts ? clone(opts) : {};\n  var complete = opts.complete = once(function (err, resp) {\n    if (err) {\n      if (listenerCount(self, 'error') > 0) {\n        self.emit('error', err);\n      }\n    } else {\n      self.emit('complete', resp);\n    }\n    self.removeAllListeners();\n    db.removeListener('destroyed', onDestroy);\n  });\n  if (callback) {\n    self.on('complete', function (resp) {\n      callback(null, resp);\n    });\n    self.on('error', callback);\n  }\n  function onDestroy() {\n    self.cancel();\n  }\n  db.once('destroyed', onDestroy);\n\n  opts.onChange = function (change) {\n    /* istanbul ignore if */\n    if (opts.isCancelled) {\n      return;\n    }\n    tryCatchInChangeListener(self, change);\n  };\n\n  var promise = new PouchPromise(function (fulfill, reject) {\n    opts.complete = function (err, res) {\n      if (err) {\n        reject(err);\n      } else {\n        fulfill(res);\n      }\n    };\n  });\n  self.once('cancel', function () {\n    db.removeListener('destroyed', onDestroy);\n    opts.complete(null, {status: 'cancelled'});\n  });\n  this.then = promise.then.bind(promise);\n  this['catch'] = promise['catch'].bind(promise);\n  this.then(function (result) {\n    complete(null, result);\n  }, complete);\n\n\n\n  if (!db.taskqueue.isReady) {\n    db.taskqueue.addTask(function (failed) {\n      if (failed) {\n        opts.complete(failed);\n      } else if (self.isCancelled) {\n        self.emit('cancel');\n      } else {\n        self.doChanges(opts);\n      }\n    });\n  } else {\n    self.doChanges(opts);\n  }\n}\nChanges.prototype.cancel = function () {\n  this.isCancelled = true;\n  if (this.db.taskqueue.isReady) {\n    this.emit('cancel');\n  }\n};\nfunction processChange(doc, metadata, opts) {\n  var changeList = [{rev: doc._rev}];\n  if (opts.style === 'all_docs') {\n    changeList = collectLeaves(metadata.rev_tree)\n    .map(function (x) { return {rev: x.rev}; });\n  }\n  var change = {\n    id: metadata.id,\n    changes: changeList,\n    doc: doc\n  };\n\n  if (isDeleted(metadata, doc._rev)) {\n    change.deleted = true;\n  }\n  if (opts.conflicts) {\n    change.doc._conflicts = collectConflicts(metadata);\n    if (!change.doc._conflicts.length) {\n      delete change.doc._conflicts;\n    }\n  }\n  return change;\n}\n\nChanges.prototype.doChanges = function (opts) {\n  var self = this;\n  var callback = opts.complete;\n\n  opts = clone(opts);\n  if ('live' in opts && !('continuous' in opts)) {\n    opts.continuous = opts.live;\n  }\n  opts.processChange = processChange;\n\n  if (opts.since === 'latest') {\n    opts.since = 'now';\n  }\n  if (!opts.since) {\n    opts.since = 0;\n  }\n  if (opts.since === 'now') {\n    this.db.info().then(function (info) {\n      /* istanbul ignore if */\n      if (self.isCancelled) {\n        callback(null, {status: 'cancelled'});\n        return;\n      }\n      opts.since = info.update_seq;\n      self.doChanges(opts);\n    }, callback);\n    return;\n  }\n\n\n  if (opts.view && !opts.filter) {\n    opts.filter = '_view';\n  }\n\n  if (opts.filter && typeof opts.filter === 'string') {\n    if (opts.filter === '_view') {\n      opts.view = normalizeDesignDocFunctionName(opts.view);\n    } else {\n      opts.filter = normalizeDesignDocFunctionName(opts.filter);\n    }\n\n    if (this.db.type() !== 'http' && !opts.doc_ids) {\n      return this.filterChanges(opts);\n    }\n  }\n\n  if (!('descending' in opts)) {\n    opts.descending = false;\n  }\n\n  // 0 and 1 should return 1 document\n  opts.limit = opts.limit === 0 ? 1 : opts.limit;\n  opts.complete = callback;\n  var newPromise = this.db._changes(opts);\n  /* istanbul ignore else */\n  if (newPromise && typeof newPromise.cancel === 'function') {\n    var cancel = self.cancel;\n    self.cancel = getArguments(function (args) {\n      newPromise.cancel();\n      cancel.apply(this, args);\n    });\n  }\n};\n\nChanges.prototype.filterChanges = function (opts) {\n  var self = this;\n  var callback = opts.complete;\n  if (opts.filter === '_view') {\n    if (!opts.view || typeof opts.view !== 'string') {\n      var err = createError(BAD_REQUEST,\n        '`view` filter parameter not found or invalid.');\n      return callback(err);\n    }\n    // fetch a view from a design doc, make it behave like a filter\n    var viewName = parseDesignDocFunctionName(opts.view);\n    this.db.get('_design/' + viewName[0], function (err, ddoc) {\n      /* istanbul ignore if */\n      if (self.isCancelled) {\n        return callback(null, {status: 'cancelled'});\n      }\n      /* istanbul ignore next */\n      if (err) {\n        return callback(generateErrorFromResponse(err));\n      }\n      var mapFun = ddoc && ddoc.views && ddoc.views[viewName[1]] &&\n        ddoc.views[viewName[1]].map;\n      if (!mapFun) {\n        return callback(createError(MISSING_DOC,\n          (ddoc.views ? 'missing json key: ' + viewName[1] :\n            'missing json key: views')));\n      }\n      opts.filter = evalView(mapFun);\n      self.doChanges(opts);\n    });\n  } else {\n    // fetch a filter from a design doc\n    var filterName = parseDesignDocFunctionName(opts.filter);\n    if (!filterName) {\n      return self.doChanges(opts);\n    }\n    this.db.get('_design/' + filterName[0], function (err, ddoc) {\n      /* istanbul ignore if */\n      if (self.isCancelled) {\n        return callback(null, {status: 'cancelled'});\n      }\n      /* istanbul ignore next */\n      if (err) {\n        return callback(generateErrorFromResponse(err));\n      }\n      var filterFun = ddoc && ddoc.filters && ddoc.filters[filterName[1]];\n      if (!filterFun) {\n        return callback(createError(MISSING_DOC,\n          ((ddoc && ddoc.filters) ? 'missing json key: ' + filterName[1]\n            : 'missing json key: filters')));\n      }\n      opts.filter = evalFilter(filterFun);\n      self.doChanges(opts);\n    });\n  }\n};\n\n/*\n * A generic pouch adapter\n */\n\nfunction compare(left, right) {\n  return left < right ? -1 : left > right ? 1 : 0;\n}\n\n// returns first element of arr satisfying callback predicate\nfunction arrayFirst(arr, callback) {\n  for (var i = 0; i < arr.length; i++) {\n    if (callback(arr[i], i) === true) {\n      return arr[i];\n    }\n  }\n}\n\n// Wrapper for functions that call the bulkdocs api with a single doc,\n// if the first result is an error, return an error\nfunction yankError(callback) {\n  return function (err, results) {\n    if (err || (results[0] && results[0].error)) {\n      callback(err || results[0]);\n    } else {\n      callback(null, results.length ? results[0]  : results);\n    }\n  };\n}\n\n// clean docs given to us by the user\nfunction cleanDocs(docs) {\n  for (var i = 0; i < docs.length; i++) {\n    var doc = docs[i];\n    if (doc._deleted) {\n      delete doc._attachments; // ignore atts for deleted docs\n    } else if (doc._attachments) {\n      // filter out extraneous keys from _attachments\n      var atts = Object.keys(doc._attachments);\n      for (var j = 0; j < atts.length; j++) {\n        var att = atts[j];\n        doc._attachments[att] = pick(doc._attachments[att],\n          ['data', 'digest', 'content_type', 'length', 'revpos', 'stub']);\n      }\n    }\n  }\n}\n\n// compare two docs, first by _id then by _rev\nfunction compareByIdThenRev(a, b) {\n  var idCompare = compare(a._id, b._id);\n  if (idCompare !== 0) {\n    return idCompare;\n  }\n  var aStart = a._revisions ? a._revisions.start : 0;\n  var bStart = b._revisions ? b._revisions.start : 0;\n  return compare(aStart, bStart);\n}\n\n// for every node in a revision tree computes its distance from the closest\n// leaf\nfunction computeHeight(revs) {\n  var height = {};\n  var edges = [];\n  traverseRevTree(revs, function (isLeaf, pos, id, prnt) {\n    var rev = pos + \"-\" + id;\n    if (isLeaf) {\n      height[rev] = 0;\n    }\n    if (prnt !== undefined) {\n      edges.push({from: prnt, to: rev});\n    }\n    return rev;\n  });\n\n  edges.reverse();\n  edges.forEach(function (edge) {\n    if (height[edge.from] === undefined) {\n      height[edge.from] = 1 + height[edge.to];\n    } else {\n      height[edge.from] = Math.min(height[edge.from], 1 + height[edge.to]);\n    }\n  });\n  return height;\n}\n\nfunction allDocsKeysQuery(api, opts, callback) {\n  var keys =  ('limit' in opts) ?\n      opts.keys.slice(opts.skip, opts.limit + opts.skip) :\n      (opts.skip > 0) ? opts.keys.slice(opts.skip) : opts.keys;\n  if (opts.descending) {\n    keys.reverse();\n  }\n  if (!keys.length) {\n    return api._allDocs({limit: 0}, callback);\n  }\n  var finalResults = {\n    offset: opts.skip\n  };\n  return PouchPromise.all(keys.map(function (key) {\n    var subOpts = jsExtend.extend({key: key, deleted: 'ok'}, opts);\n    ['limit', 'skip', 'keys'].forEach(function (optKey) {\n      delete subOpts[optKey];\n    });\n    return new PouchPromise(function (resolve, reject) {\n      api._allDocs(subOpts, function (err, res) {\n        /* istanbul ignore if */\n        if (err) {\n          return reject(err);\n        }\n        finalResults.total_rows = res.total_rows;\n        resolve(res.rows[0] || {key: key, error: 'not_found'});\n      });\n    });\n  })).then(function (results) {\n    finalResults.rows = results;\n    return finalResults;\n  });\n}\n\n// all compaction is done in a queue, to avoid attaching\n// too many listeners at once\nfunction doNextCompaction(self) {\n  var task = self._compactionQueue[0];\n  var opts = task.opts;\n  var callback = task.callback;\n  self.get('_local/compaction').catch(function () {\n    return false;\n  }).then(function (doc) {\n    if (doc && doc.last_seq) {\n      opts.last_seq = doc.last_seq;\n    }\n    self._compact(opts, function (err, res) {\n      /* istanbul ignore if */\n      if (err) {\n        callback(err);\n      } else {\n        callback(null, res);\n      }\n      process.nextTick(function () {\n        self._compactionQueue.shift();\n        if (self._compactionQueue.length) {\n          doNextCompaction(self);\n        }\n      });\n    });\n  });\n}\n\nfunction attachmentNameError(name) {\n  if (name.charAt(0) === '_') {\n    return name + 'is not a valid attachment name, attachment ' +\n      'names cannot start with \\'_\\'';\n  }\n  return false;\n}\n\ninherits(AbstractPouchDB, events.EventEmitter);\n\nfunction AbstractPouchDB() {\n  events.EventEmitter.call(this);\n}\n\nAbstractPouchDB.prototype.post =\n  adapterFun('post', function (doc, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  if (typeof doc !== 'object' || Array.isArray(doc)) {\n    return callback(createError(NOT_AN_OBJECT));\n  }\n  this.bulkDocs({docs: [doc]}, opts, yankError(callback));\n});\n\nAbstractPouchDB.prototype.put = adapterFun('put', function (doc, opts, cb) {\n  if (typeof opts === 'function') {\n    cb = opts;\n    opts = {};\n  }\n  if (typeof doc !== 'object' || Array.isArray(doc)) {\n    return cb(createError(NOT_AN_OBJECT));\n  }\n  invalidIdError(doc._id);\n  if (isLocalId(doc._id) && typeof this._putLocal === 'function') {\n    if (doc._deleted) {\n      return this._removeLocal(doc, cb);\n    } else {\n      return this._putLocal(doc, cb);\n    }\n  }\n  if (typeof this._put === 'function' && opts.new_edits !== false) {\n    this._put(doc, opts, cb);\n  } else {\n    this.bulkDocs({docs: [doc]}, opts, yankError(cb));\n  }\n});\n\nAbstractPouchDB.prototype.putAttachment =\n  adapterFun('putAttachment', function (docId, attachmentId, rev,\n                                              blob, type) {\n  var api = this;\n  if (typeof type === 'function') {\n    type = blob;\n    blob = rev;\n    rev = null;\n  }\n  // Lets fix in https://github.com/pouchdb/pouchdb/issues/3267\n  /* istanbul ignore if */\n  if (typeof type === 'undefined') {\n    type = blob;\n    blob = rev;\n    rev = null;\n  }\n\n  function createAttachment(doc) {\n    var prevrevpos = '_rev' in doc ? parseInt(doc._rev, 10) : 0;\n    doc._attachments = doc._attachments || {};\n    doc._attachments[attachmentId] = {\n      content_type: type,\n      data: blob,\n      revpos: ++prevrevpos\n    };\n    return api.put(doc);\n  }\n\n  return api.get(docId).then(function (doc) {\n    if (doc._rev !== rev) {\n      throw createError(REV_CONFLICT);\n    }\n\n    return createAttachment(doc);\n  }, function (err) {\n     // create new doc\n    /* istanbul ignore else */\n    if (err.reason === MISSING_DOC.message) {\n      return createAttachment({_id: docId});\n    } else {\n      throw err;\n    }\n  });\n});\n\nAbstractPouchDB.prototype.removeAttachment =\n  adapterFun('removeAttachment', function (docId, attachmentId, rev,\n                                                 callback) {\n  var self = this;\n  self.get(docId, function (err, obj) {\n    /* istanbul ignore if */\n    if (err) {\n      callback(err);\n      return;\n    }\n    if (obj._rev !== rev) {\n      callback(createError(REV_CONFLICT));\n      return;\n    }\n    /* istanbul ignore if */\n    if (!obj._attachments) {\n      return callback();\n    }\n    delete obj._attachments[attachmentId];\n    if (Object.keys(obj._attachments).length === 0) {\n      delete obj._attachments;\n    }\n    self.put(obj, callback);\n  });\n});\n\nAbstractPouchDB.prototype.remove =\n  adapterFun('remove', function (docOrId, optsOrRev, opts, callback) {\n  var doc;\n  if (typeof optsOrRev === 'string') {\n    // id, rev, opts, callback style\n    doc = {\n      _id: docOrId,\n      _rev: optsOrRev\n    };\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n  } else {\n    // doc, opts, callback style\n    doc = docOrId;\n    if (typeof optsOrRev === 'function') {\n      callback = optsOrRev;\n      opts = {};\n    } else {\n      callback = opts;\n      opts = optsOrRev;\n    }\n  }\n  opts = opts || {};\n  opts.was_delete = true;\n  var newDoc = {_id: doc._id, _rev: (doc._rev || opts.rev)};\n  newDoc._deleted = true;\n  if (isLocalId(newDoc._id) && typeof this._removeLocal === 'function') {\n    return this._removeLocal(doc, callback);\n  }\n  this.bulkDocs({docs: [newDoc]}, opts, yankError(callback));\n});\n\nAbstractPouchDB.prototype.revsDiff =\n  adapterFun('revsDiff', function (req, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  var ids = Object.keys(req);\n\n  if (!ids.length) {\n    return callback(null, {});\n  }\n\n  var count = 0;\n  var missing = new _Map();\n\n  function addToMissing(id, revId) {\n    if (!missing.has(id)) {\n      missing.set(id, {missing: []});\n    }\n    missing.get(id).missing.push(revId);\n  }\n\n  function processDoc(id, rev_tree) {\n    // Is this fast enough? Maybe we should switch to a set simulated by a map\n    var missingForId = req[id].slice(0);\n    traverseRevTree(rev_tree, function (isLeaf, pos, revHash, ctx,\n      opts) {\n        var rev = pos + '-' + revHash;\n        var idx = missingForId.indexOf(rev);\n        if (idx === -1) {\n          return;\n        }\n\n        missingForId.splice(idx, 1);\n        /* istanbul ignore if */\n        if (opts.status !== 'available') {\n          addToMissing(id, rev);\n        }\n      });\n\n    // Traversing the tree is synchronous, so now `missingForId` contains\n    // revisions that were not found in the tree\n    missingForId.forEach(function (rev) {\n      addToMissing(id, rev);\n    });\n  }\n\n  ids.map(function (id) {\n    this._getRevisionTree(id, function (err, rev_tree) {\n      if (err && err.status === 404 && err.message === 'missing') {\n        missing.set(id, {missing: req[id]});\n      } else if (err) {\n        /* istanbul ignore next */\n        return callback(err);\n      } else {\n        processDoc(id, rev_tree);\n      }\n\n      if (++count === ids.length) {\n        // convert LazyMap to object\n        var missingObj = {};\n        missing.forEach(function (value, key) {\n          missingObj[key] = value;\n        });\n        return callback(null, missingObj);\n      }\n    });\n  }, this);\n});\n\n// _bulk_get API for faster replication, as described in\n// https://github.com/apache/couchdb-chttpd/pull/33\n// At the \"abstract\" level, it will just run multiple get()s in\n// parallel, because this isn't much of a performance cost\n// for local databases (except the cost of multiple transactions, which is\n// small). The http adapter overrides this in order\n// to do a more efficient single HTTP request.\nAbstractPouchDB.prototype.bulkGet =\n  adapterFun('bulkGet', function (opts, callback) {\n  bulkGet(this, opts, callback);\n});\n\n// compact one document and fire callback\n// by compacting we mean removing all revisions which\n// are further from the leaf in revision tree than max_height\nAbstractPouchDB.prototype.compactDocument =\n  adapterFun('compactDocument', function (docId, maxHeight, callback) {\n  var self = this;\n  this._getRevisionTree(docId, function (err, revTree) {\n    /* istanbul ignore if */\n    if (err) {\n      return callback(err);\n    }\n    var height = computeHeight(revTree);\n    var candidates = [];\n    var revs = [];\n    Object.keys(height).forEach(function (rev) {\n      if (height[rev] > maxHeight) {\n        candidates.push(rev);\n      }\n    });\n\n    traverseRevTree(revTree, function (isLeaf, pos, revHash, ctx, opts) {\n      var rev = pos + '-' + revHash;\n      if (opts.status === 'available' && candidates.indexOf(rev) !== -1) {\n        revs.push(rev);\n      }\n    });\n    self._doCompaction(docId, revs, callback);\n  });\n});\n\n// compact the whole database using single document\n// compaction\nAbstractPouchDB.prototype.compact =\n  adapterFun('compact', function (opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n\n  var self = this;\n  opts = opts || {};\n\n  self._compactionQueue = self._compactionQueue || [];\n  self._compactionQueue.push({opts: opts, callback: callback});\n  if (self._compactionQueue.length === 1) {\n    doNextCompaction(self);\n  }\n});\nAbstractPouchDB.prototype._compact = function (opts, callback) {\n  var self = this;\n  var changesOpts = {\n    return_docs: false,\n    last_seq: opts.last_seq || 0\n  };\n  var promises = [];\n\n  function onChange(row) {\n    promises.push(self.compactDocument(row.id, 0));\n  }\n  function onComplete(resp) {\n    var lastSeq = resp.last_seq;\n    PouchPromise.all(promises).then(function () {\n      return upsert(self, '_local/compaction', function deltaFunc(doc) {\n        if (!doc.last_seq || doc.last_seq < lastSeq) {\n          doc.last_seq = lastSeq;\n          return doc;\n        }\n        return false; // somebody else got here first, don't update\n      });\n    }).then(function () {\n      callback(null, {ok: true});\n    }).catch(callback);\n  }\n  self.changes(changesOpts)\n    .on('change', onChange)\n    .on('complete', onComplete)\n    .on('error', callback);\n};\n\n/* Begin api wrappers. Specific functionality to storage belongs in the\n   _[method] */\nAbstractPouchDB.prototype.get = adapterFun('get', function (id, opts, cb) {\n  if (typeof opts === 'function') {\n    cb = opts;\n    opts = {};\n  }\n  if (typeof id !== 'string') {\n    return cb(createError(INVALID_ID));\n  }\n  if (isLocalId(id) && typeof this._getLocal === 'function') {\n    return this._getLocal(id, cb);\n  }\n  var leaves = [], self = this;\n\n  function finishOpenRevs() {\n    var result = [];\n    var count = leaves.length;\n    /* istanbul ignore if */\n    if (!count) {\n      return cb(null, result);\n    }\n    // order with open_revs is unspecified\n    leaves.forEach(function (leaf) {\n      self.get(id, {\n        rev: leaf,\n        revs: opts.revs,\n        attachments: opts.attachments\n      }, function (err, doc) {\n        if (!err) {\n          result.push({ok: doc});\n        } else {\n          result.push({missing: leaf});\n        }\n        count--;\n        if (!count) {\n          cb(null, result);\n        }\n      });\n    });\n  }\n\n  if (opts.open_revs) {\n    if (opts.open_revs === \"all\") {\n      this._getRevisionTree(id, function (err, rev_tree) {\n        if (err) {\n          return cb(err);\n        }\n        leaves = collectLeaves(rev_tree).map(function (leaf) {\n          return leaf.rev;\n        });\n        finishOpenRevs();\n      });\n    } else {\n      if (Array.isArray(opts.open_revs)) {\n        leaves = opts.open_revs;\n        for (var i = 0; i < leaves.length; i++) {\n          var l = leaves[i];\n          // looks like it's the only thing couchdb checks\n          if (!(typeof (l) === \"string\" && /^\\d+-/.test(l))) {\n            return cb(createError(INVALID_REV));\n          }\n        }\n        finishOpenRevs();\n      } else {\n        return cb(createError(UNKNOWN_ERROR, 'function_clause'));\n      }\n    }\n    return; // open_revs does not like other options\n  }\n\n  return this._get(id, opts, function (err, result) {\n    if (err) {\n      return cb(err);\n    }\n\n    var doc = result.doc;\n    var metadata = result.metadata;\n    var ctx = result.ctx;\n\n    if (opts.conflicts) {\n      var conflicts = collectConflicts(metadata);\n      if (conflicts.length) {\n        doc._conflicts = conflicts;\n      }\n    }\n\n    if (isDeleted(metadata, doc._rev)) {\n      doc._deleted = true;\n    }\n\n    if (opts.revs || opts.revs_info) {\n      var paths = rootToLeaf(metadata.rev_tree);\n      var path = arrayFirst(paths, function (arr) {\n        return arr.ids.map(function (x) { return x.id; })\n          .indexOf(doc._rev.split('-')[1]) !== -1;\n      });\n\n      var indexOfRev = path.ids.map(function (x) {return x.id; })\n        .indexOf(doc._rev.split('-')[1]) + 1;\n      var howMany = path.ids.length - indexOfRev;\n      path.ids.splice(indexOfRev, howMany);\n      path.ids.reverse();\n\n      if (opts.revs) {\n        doc._revisions = {\n          start: (path.pos + path.ids.length) - 1,\n          ids: path.ids.map(function (rev) {\n            return rev.id;\n          })\n        };\n      }\n      if (opts.revs_info) {\n        var pos =  path.pos + path.ids.length;\n        doc._revs_info = path.ids.map(function (rev) {\n          pos--;\n          return {\n            rev: pos + '-' + rev.id,\n            status: rev.opts.status\n          };\n        });\n      }\n    }\n\n    if (opts.attachments && doc._attachments) {\n      var attachments = doc._attachments;\n      var count = Object.keys(attachments).length;\n      if (count === 0) {\n        return cb(null, doc);\n      }\n      Object.keys(attachments).forEach(function (key) {\n        this._getAttachment(doc._id, key, attachments[key], {\n          // Previously the revision handling was done in adapter.js\n          // getAttachment, however since idb-next doesnt we need to\n          // pass the rev through\n          rev: doc._rev,\n          binary: opts.binary,\n          ctx: ctx\n        }, function (err, data) {\n          var att = doc._attachments[key];\n          att.data = data;\n          delete att.stub;\n          delete att.length;\n          if (!--count) {\n            cb(null, doc);\n          }\n        });\n      }, self);\n    } else {\n      if (doc._attachments) {\n        for (var key in doc._attachments) {\n          /* istanbul ignore else */\n          if (doc._attachments.hasOwnProperty(key)) {\n            doc._attachments[key].stub = true;\n          }\n        }\n      }\n      cb(null, doc);\n    }\n  });\n});\n\n// TODO: I dont like this, it forces an extra read for every\n// attachment read and enforces a confusing api between\n// adapter.js and the adapter implementation\nAbstractPouchDB.prototype.getAttachment =\n  adapterFun('getAttachment', function (docId, attachmentId, opts, callback) {\n  var self = this;\n  if (opts instanceof Function) {\n    callback = opts;\n    opts = {};\n  }\n  this._get(docId, opts, function (err, res) {\n    if (err) {\n      return callback(err);\n    }\n    if (res.doc._attachments && res.doc._attachments[attachmentId]) {\n      opts.ctx = res.ctx;\n      opts.binary = true;\n      self._getAttachment(docId, attachmentId,\n                          res.doc._attachments[attachmentId], opts, callback);\n    } else {\n      return callback(createError(MISSING_DOC));\n    }\n  });\n});\n\nAbstractPouchDB.prototype.allDocs =\n  adapterFun('allDocs', function (opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  opts.skip = typeof opts.skip !== 'undefined' ? opts.skip : 0;\n  if (opts.start_key) {\n    opts.startkey = opts.start_key;\n  }\n  if (opts.end_key) {\n    opts.endkey = opts.end_key;\n  }\n  if ('keys' in opts) {\n    if (!Array.isArray(opts.keys)) {\n      return callback(new TypeError('options.keys must be an array'));\n    }\n    var incompatibleOpt =\n      ['startkey', 'endkey', 'key'].filter(function (incompatibleOpt) {\n      return incompatibleOpt in opts;\n    })[0];\n    if (incompatibleOpt) {\n      callback(createError(QUERY_PARSE_ERROR,\n        'Query parameter `' + incompatibleOpt +\n        '` is not compatible with multi-get'\n      ));\n      return;\n    }\n    if (this.type() !== 'http') {\n      return allDocsKeysQuery(this, opts, callback);\n    }\n  }\n\n  return this._allDocs(opts, callback);\n});\n\nAbstractPouchDB.prototype.changes = function (opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  return new Changes(this, opts, callback);\n};\n\nAbstractPouchDB.prototype.close = adapterFun('close', function (callback) {\n  this._closed = true;\n  return this._close(callback);\n});\n\nAbstractPouchDB.prototype.info = adapterFun('info', function (callback) {\n  var self = this;\n  this._info(function (err, info) {\n    if (err) {\n      return callback(err);\n    }\n    // assume we know better than the adapter, unless it informs us\n    info.db_name = info.db_name || self.name;\n    info.auto_compaction = !!(self.auto_compaction && self.type() !== 'http');\n    info.adapter = self.type();\n    callback(null, info);\n  });\n});\n\nAbstractPouchDB.prototype.id = adapterFun('id', function (callback) {\n  return this._id(callback);\n});\n\n/* istanbul ignore next */\nAbstractPouchDB.prototype.type = function () {\n  return (typeof this._type === 'function') ? this._type() : this.adapter;\n};\n\nAbstractPouchDB.prototype.bulkDocs =\n  adapterFun('bulkDocs', function (req, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n\n  if (Array.isArray(req)) {\n    req = {\n      docs: req\n    };\n  }\n\n  if (!req || !req.docs || !Array.isArray(req.docs)) {\n    return callback(createError(MISSING_BULK_DOCS));\n  }\n\n  for (var i = 0; i < req.docs.length; ++i) {\n    if (typeof req.docs[i] !== 'object' || Array.isArray(req.docs[i])) {\n      return callback(createError(NOT_AN_OBJECT));\n    }\n  }\n\n  var attachmentError;\n  req.docs.forEach(function (doc) {\n    if (doc._attachments) {\n      Object.keys(doc._attachments).forEach(function (name) {\n        attachmentError = attachmentError || attachmentNameError(name);\n      });\n    }\n  });\n\n  if (attachmentError) {\n    return callback(createError(BAD_REQUEST, attachmentError));\n  }\n\n  if (!('new_edits' in opts)) {\n    if ('new_edits' in req) {\n      opts.new_edits = req.new_edits;\n    } else {\n      opts.new_edits = true;\n    }\n  }\n\n  if (!opts.new_edits && this.type() !== 'http') {\n    // ensure revisions of the same doc are sorted, so that\n    // the local adapter processes them correctly (#2935)\n    req.docs.sort(compareByIdThenRev);\n  }\n\n  cleanDocs(req.docs);\n\n  return this._bulkDocs(req, opts, function (err, res) {\n    if (err) {\n      return callback(err);\n    }\n    if (!opts.new_edits) {\n      // this is what couch does when new_edits is false\n      res = res.filter(function (x) {\n        return x.error;\n      });\n    }\n    callback(null, res);\n  });\n});\n\nAbstractPouchDB.prototype.registerDependentDatabase =\n  adapterFun('registerDependentDatabase', function (dependentDb,\n                                                          callback) {\n  var depDB = new this.constructor(dependentDb, this.__opts);\n\n  function diffFun(doc) {\n    doc.dependentDbs = doc.dependentDbs || {};\n    if (doc.dependentDbs[dependentDb]) {\n      return false; // no update required\n    }\n    doc.dependentDbs[dependentDb] = true;\n    return doc;\n  }\n  upsert(this, '_local/_pouch_dependentDbs', diffFun)\n    .then(function () {\n      callback(null, {db: depDB});\n    }).catch(callback);\n});\n\nAbstractPouchDB.prototype.destroy =\n  adapterFun('destroy', function (opts, callback) {\n\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n\n  var self = this;\n  var usePrefix = 'use_prefix' in self ? self.use_prefix : true;\n\n  function destroyDb() {\n    // call destroy method of the particular adaptor\n    self._destroy(opts, function (err, resp) {\n      if (err) {\n        return callback(err);\n      }\n      self._destroyed = true;\n      self.emit('destroyed');\n      callback(null, resp || { 'ok': true });\n    });\n  }\n\n  if (self.type() === 'http') {\n    // no need to check for dependent DBs if it's a remote DB\n    return destroyDb();\n  }\n\n  self.get('_local/_pouch_dependentDbs', function (err, localDoc) {\n    if (err) {\n      /* istanbul ignore if */\n      if (err.status !== 404) {\n        return callback(err);\n      } else { // no dependencies\n        return destroyDb();\n      }\n    }\n    var dependentDbs = localDoc.dependentDbs;\n    var PouchDB = self.constructor;\n    var deletedMap = Object.keys(dependentDbs).map(function (name) {\n      // use_prefix is only false in the browser\n      /* istanbul ignore next */\n      var trueName = usePrefix ?\n        name.replace(new RegExp('^' + PouchDB.prefix), '') : name;\n      return new PouchDB(trueName, self.__opts).destroy();\n    });\n    PouchPromise.all(deletedMap).then(destroyDb, callback);\n  });\n});\n\nfunction TaskQueue() {\n  this.isReady = false;\n  this.failed = false;\n  this.queue = [];\n}\n\nTaskQueue.prototype.execute = function () {\n  var fun;\n  if (this.failed) {\n    while ((fun = this.queue.shift())) {\n      fun(this.failed);\n    }\n  } else {\n    while ((fun = this.queue.shift())) {\n      fun();\n    }\n  }\n};\n\nTaskQueue.prototype.fail = function (err) {\n  this.failed = err;\n  this.execute();\n};\n\nTaskQueue.prototype.ready = function (db) {\n  this.isReady = true;\n  this.db = db;\n  this.execute();\n};\n\nTaskQueue.prototype.addTask = function (fun) {\n  this.queue.push(fun);\n  if (this.failed) {\n    this.execute();\n  }\n};\n\nfunction parseAdapter(name, opts) {\n  var match = name.match(/([a-z\\-]*):\\/\\/(.*)/);\n  if (match) {\n    // the http adapter expects the fully qualified name\n    name = /http(s?)/.test(match[1]) ? match[1] + '://' + match[2] : match[2];\n    return {name: name, adapter: match[1]};\n  }\n\n  // check for browsers that have been upgraded from websql-only to websql+idb\n  var skipIdb = 'idb' in PouchDB.adapters && 'websql' in PouchDB.adapters &&\n    hasLocalStorage() &&\n    localStorage['_pouch__websqldb_' + PouchDB.prefix + name];\n\n  var adapterName;\n\n  if (opts.adapter) {\n    adapterName = opts.adapter;\n  } else if (typeof opts !== 'undefined' && opts.db) {\n    adapterName = 'leveldb';\n  } else { // automatically determine adapter\n    for (var i = 0; i < PouchDB.preferredAdapters.length; ++i) {\n      adapterName = PouchDB.preferredAdapters[i];\n      /* istanbul ignore if */\n      if (skipIdb && adapterName === 'idb') {\n        // log it, because this can be confusing during development\n        guardedConsole('log', 'PouchDB is downgrading \"' + name + '\" to WebSQL to' +\n          ' avoid data loss, because it was already opened with WebSQL.');\n        continue; // keep using websql to avoid user data loss\n      }\n      break;\n    }\n  }\n\n  var adapter = PouchDB.adapters[adapterName];\n\n  // if adapter is invalid, then an error will be thrown later\n  var usePrefix = (adapter && 'use_prefix' in adapter) ?\n    adapter.use_prefix : true;\n\n  return {\n    name: usePrefix ? (PouchDB.prefix + name) : name,\n    adapter: adapterName\n  };\n}\n\n// OK, so here's the deal. Consider this code:\n//     var db1 = new PouchDB('foo');\n//     var db2 = new PouchDB('foo');\n//     db1.destroy();\n// ^ these two both need to emit 'destroyed' events,\n// as well as the PouchDB constructor itself.\n// So we have one db object (whichever one got destroy() called on it)\n// responsible for emitting the initial event, which then gets emitted\n// by the constructor, which then broadcasts it to any other dbs\n// that may have been created with the same name.\nfunction prepareForDestruction(self) {\n\n  var destructionListeners = self.constructor._destructionListeners;\n\n  function onDestroyed() {\n    self.constructor.emit('destroyed', self.name);\n  }\n\n  function onConstructorDestroyed() {\n    self.removeListener('destroyed', onDestroyed);\n    self.emit('destroyed', self);\n  }\n\n  self.once('destroyed', onDestroyed);\n\n  // in setup.js, the constructor is primed to listen for destroy events\n  if (!destructionListeners.has(self.name)) {\n    destructionListeners.set(self.name, []);\n  }\n  destructionListeners.get(self.name).push(onConstructorDestroyed);\n}\n\ninherits(PouchDB, AbstractPouchDB);\nfunction PouchDB(name, opts) {\n  // In Node our test suite only tests this for PouchAlt unfortunately\n  /* istanbul ignore if */\n  if (!(this instanceof PouchDB)) {\n    return new PouchDB(name, opts);\n  }\n\n  var self = this;\n  opts = opts || {};\n\n  if (name && typeof name === 'object') {\n    opts = name;\n    name = opts.name;\n    delete opts.name;\n  }\n\n  this.__opts = opts = clone(opts);\n\n  self.auto_compaction = opts.auto_compaction;\n  self.prefix = PouchDB.prefix;\n\n  if (typeof name !== 'string') {\n    throw new Error('Missing/invalid DB name');\n  }\n\n  var prefixedName = (opts.prefix || '') + name;\n  var backend = parseAdapter(prefixedName, opts);\n\n  opts.name = backend.name;\n  opts.adapter = opts.adapter || backend.adapter;\n\n  self.name = name;\n  self._adapter = opts.adapter;\n  debug('pouchdb:adapter')('Picked adapter: ' + opts.adapter);\n\n  if (!PouchDB.adapters[opts.adapter] ||\n      !PouchDB.adapters[opts.adapter].valid()) {\n    throw new Error('Invalid Adapter: ' + opts.adapter);\n  }\n\n  AbstractPouchDB.call(self);\n  self.taskqueue = new TaskQueue();\n\n  self.adapter = opts.adapter;\n\n  PouchDB.adapters[opts.adapter].call(self, opts, function (err) {\n    if (err) {\n      return self.taskqueue.fail(err);\n    }\n    prepareForDestruction(self);\n\n    self.emit('created', self);\n    PouchDB.emit('created', self.name);\n    self.taskqueue.ready(self);\n  });\n\n}\n\nPouchDB.debug = debug;\n\nPouchDB.adapters = {};\nPouchDB.preferredAdapters = [];\n\nPouchDB.prefix = '_pouch_';\n\nvar eventEmitter = new events.EventEmitter();\n\nfunction setUpEventEmitter(Pouch) {\n  Object.keys(events.EventEmitter.prototype).forEach(function (key) {\n    if (typeof events.EventEmitter.prototype[key] === 'function') {\n      Pouch[key] = eventEmitter[key].bind(eventEmitter);\n    }\n  });\n\n  // these are created in constructor.js, and allow us to notify each DB with\n  // the same name that it was destroyed, via the constructor object\n  var destructListeners = Pouch._destructionListeners = new _Map();\n  Pouch.on('destroyed', function onConstructorDestroyed(name) {\n    destructListeners.get(name).forEach(function (callback) {\n      callback();\n    });\n    destructListeners.delete(name);\n  });\n}\n\nsetUpEventEmitter(PouchDB);\n\nPouchDB.adapter = function (id, obj, addToPreferredAdapters) {\n  /* istanbul ignore else */\n  if (obj.valid()) {\n    PouchDB.adapters[id] = obj;\n    if (addToPreferredAdapters) {\n      PouchDB.preferredAdapters.push(id);\n    }\n  }\n};\n\nPouchDB.plugin = function (obj) {\n  if (typeof obj === 'function') { // function style for plugins\n    obj(PouchDB);\n  } else if (typeof obj !== 'object' || Object.keys(obj).length === 0){\n    throw new Error('Invalid plugin: object passed in is empty or not an object');\n  } else {\n    Object.keys(obj).forEach(function (id) { // object style for plugins\n      PouchDB.prototype[id] = obj[id];\n    });\n  }\n  return PouchDB;\n};\n\nPouchDB.defaults = function (defaultOpts) {\n  function PouchAlt(name, opts) {\n    if (!(this instanceof PouchAlt)) {\n      return new PouchAlt(name, opts);\n    }\n\n    opts = opts || {};\n\n    if (name && typeof name === 'object') {\n      opts = name;\n      name = opts.name;\n      delete opts.name;\n    }\n\n    opts = jsExtend.extend({}, defaultOpts, opts);\n    PouchDB.call(this, name, opts);\n  }\n\n  inherits(PouchAlt, PouchDB);\n\n  PouchAlt.preferredAdapters = PouchDB.preferredAdapters.slice();\n  Object.keys(PouchDB).forEach(function (key) {\n    if (!(key in PouchAlt)) {\n      PouchAlt[key] = PouchDB[key];\n    }\n  });\n\n  return PouchAlt;\n};\n\n// managed automatically by set-version.js\nvar version = \"6.0.5\";\n\nPouchDB.version = version;\n\nfunction toObject(array) {\n  return array.reduce(function (obj, item) {\n    obj[item] = true;\n    return obj;\n  }, {});\n}\n// List of top level reserved words for doc\nvar reservedWords = toObject([\n  '_id',\n  '_rev',\n  '_attachments',\n  '_deleted',\n  '_revisions',\n  '_revs_info',\n  '_conflicts',\n  '_deleted_conflicts',\n  '_local_seq',\n  '_rev_tree',\n  //replication documents\n  '_replication_id',\n  '_replication_state',\n  '_replication_state_time',\n  '_replication_state_reason',\n  '_replication_stats',\n  // Specific to Couchbase Sync Gateway\n  '_removed'\n]);\n\n// List of reserved words that should end up the document\nvar dataWords = toObject([\n  '_attachments',\n  //replication documents\n  '_replication_id',\n  '_replication_state',\n  '_replication_state_time',\n  '_replication_state_reason',\n  '_replication_stats'\n]);\n\nfunction parseRevisionInfo(rev) {\n  if (!/^\\d+\\-./.test(rev)) {\n    return createError(INVALID_REV);\n  }\n  var idx = rev.indexOf('-');\n  var left = rev.substring(0, idx);\n  var right = rev.substring(idx + 1);\n  return {\n    prefix: parseInt(left, 10),\n    id: right\n  };\n}\n\nfunction makeRevTreeFromRevisions(revisions, opts) {\n  var pos = revisions.start - revisions.ids.length + 1;\n\n  var revisionIds = revisions.ids;\n  var ids = [revisionIds[0], opts, []];\n\n  for (var i = 1, len = revisionIds.length; i < len; i++) {\n    ids = [revisionIds[i], {status: 'missing'}, [ids]];\n  }\n\n  return [{\n    pos: pos,\n    ids: ids\n  }];\n}\n\n// Preprocess documents, parse their revisions, assign an id and a\n// revision for new writes that are missing them, etc\nfunction parseDoc(doc, newEdits) {\n\n  var nRevNum;\n  var newRevId;\n  var revInfo;\n  var opts = {status: 'available'};\n  if (doc._deleted) {\n    opts.deleted = true;\n  }\n\n  if (newEdits) {\n    if (!doc._id) {\n      doc._id = uuid();\n    }\n    newRevId = uuid(32, 16).toLowerCase();\n    if (doc._rev) {\n      revInfo = parseRevisionInfo(doc._rev);\n      if (revInfo.error) {\n        return revInfo;\n      }\n      doc._rev_tree = [{\n        pos: revInfo.prefix,\n        ids: [revInfo.id, {status: 'missing'}, [[newRevId, opts, []]]]\n      }];\n      nRevNum = revInfo.prefix + 1;\n    } else {\n      doc._rev_tree = [{\n        pos: 1,\n        ids : [newRevId, opts, []]\n      }];\n      nRevNum = 1;\n    }\n  } else {\n    if (doc._revisions) {\n      doc._rev_tree = makeRevTreeFromRevisions(doc._revisions, opts);\n      nRevNum = doc._revisions.start;\n      newRevId = doc._revisions.ids[0];\n    }\n    if (!doc._rev_tree) {\n      revInfo = parseRevisionInfo(doc._rev);\n      if (revInfo.error) {\n        return revInfo;\n      }\n      nRevNum = revInfo.prefix;\n      newRevId = revInfo.id;\n      doc._rev_tree = [{\n        pos: nRevNum,\n        ids: [newRevId, opts, []]\n      }];\n    }\n  }\n\n  invalidIdError(doc._id);\n\n  doc._rev = nRevNum + '-' + newRevId;\n\n  var result = {metadata : {}, data : {}};\n  for (var key in doc) {\n    /* istanbul ignore else */\n    if (Object.prototype.hasOwnProperty.call(doc, key)) {\n      var specialKey = key[0] === '_';\n      if (specialKey && !reservedWords[key]) {\n        var error = createError(DOC_VALIDATION, key);\n        error.message = DOC_VALIDATION.message + ': ' + key;\n        throw error;\n      } else if (specialKey && !dataWords[key]) {\n        result.metadata[key.slice(1)] = doc[key];\n      } else {\n        result.data[key] = doc[key];\n      }\n    }\n  }\n  return result;\n}\n\nvar atob$1 = function (str) {\n  return atob(str);\n};\n\nvar btoa$1 = function (str) {\n  return btoa(str);\n};\n\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor (e.g.\n// old QtWebKit versions, Android < 4.4).\nfunction createBlob(parts, properties) {\n  /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\n  parts = parts || [];\n  properties = properties || {};\n  try {\n    return new Blob(parts, properties);\n  } catch (e) {\n    if (e.name !== \"TypeError\") {\n      throw e;\n    }\n    var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder :\n                  typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder :\n                  typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder :\n                  WebKitBlobBuilder;\n    var builder = new Builder();\n    for (var i = 0; i < parts.length; i += 1) {\n      builder.append(parts[i]);\n    }\n    return builder.getBlob(properties.type);\n  }\n}\n\n// From http://stackoverflow.com/questions/14967647/ (continues on next line)\n// encode-decode-image-with-base64-breaks-image (2013-04-21)\nfunction binaryStringToArrayBuffer(bin) {\n  var length = bin.length;\n  var buf = new ArrayBuffer(length);\n  var arr = new Uint8Array(buf);\n  for (var i = 0; i < length; i++) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return buf;\n}\n\nfunction binStringToBluffer(binString, type) {\n  return createBlob([binaryStringToArrayBuffer(binString)], {type: type});\n}\n\nfunction b64ToBluffer(b64, type) {\n  return binStringToBluffer(atob$1(b64), type);\n}\n\n//Can't find original post, but this is close\n//http://stackoverflow.com/questions/6965107/ (continues on next line)\n//converting-between-strings-and-arraybuffers\nfunction arrayBufferToBinaryString(buffer) {\n  var binary = '';\n  var bytes = new Uint8Array(buffer);\n  var length = bytes.byteLength;\n  for (var i = 0; i < length; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return binary;\n}\n\n// shim for browsers that don't support it\nfunction readAsBinaryString(blob, callback) {\n  if (typeof FileReader === 'undefined') {\n    // fix for Firefox in a web worker\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=901097\n    return callback(arrayBufferToBinaryString(\n      new FileReaderSync().readAsArrayBuffer(blob)));\n  }\n\n  var reader = new FileReader();\n  var hasBinaryString = typeof reader.readAsBinaryString === 'function';\n  reader.onloadend = function (e) {\n    var result = e.target.result || '';\n    if (hasBinaryString) {\n      return callback(result);\n    }\n    callback(arrayBufferToBinaryString(result));\n  };\n  if (hasBinaryString) {\n    reader.readAsBinaryString(blob);\n  } else {\n    reader.readAsArrayBuffer(blob);\n  }\n}\n\nfunction blobToBinaryString(blobOrBuffer, callback) {\n  readAsBinaryString(blobOrBuffer, function (bin) {\n    callback(bin);\n  });\n}\n\nfunction blobToBase64(blobOrBuffer, callback) {\n  blobToBinaryString(blobOrBuffer, function (base64) {\n    callback(btoa$1(base64));\n  });\n}\n\n// simplified API. universal browser support is assumed\nfunction readAsArrayBuffer(blob, callback) {\n  if (typeof FileReader === 'undefined') {\n    // fix for Firefox in a web worker:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=901097\n    return callback(new FileReaderSync().readAsArrayBuffer(blob));\n  }\n\n  var reader = new FileReader();\n  reader.onloadend = function (e) {\n    var result = e.target.result || new ArrayBuffer(0);\n    callback(result);\n  };\n  reader.readAsArrayBuffer(blob);\n}\n\nvar setImmediateShim = global.setImmediate || global.setTimeout;\nvar MD5_CHUNK_SIZE = 32768;\n\nfunction rawToBase64(raw) {\n  return btoa$1(raw);\n}\n\nfunction sliceBlob(blob, start, end) {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  }\n  return blob.slice(start, end);\n}\n\nfunction appendBlob(buffer, blob, start, end, callback) {\n  if (start > 0 || end < blob.size) {\n    // only slice blob if we really need to\n    blob = sliceBlob(blob, start, end);\n  }\n  readAsArrayBuffer(blob, function (arrayBuffer) {\n    buffer.append(arrayBuffer);\n    callback();\n  });\n}\n\nfunction appendString(buffer, string, start, end, callback) {\n  if (start > 0 || end < string.length) {\n    // only create a substring if we really need to\n    string = string.substring(start, end);\n  }\n  buffer.appendBinary(string);\n  callback();\n}\n\nfunction binaryMd5(data, callback) {\n  var inputIsString = typeof data === 'string';\n  var len = inputIsString ? data.length : data.size;\n  var chunkSize = Math.min(MD5_CHUNK_SIZE, len);\n  var chunks = Math.ceil(len / chunkSize);\n  var currentChunk = 0;\n  var buffer = inputIsString ? new Md5() : new Md5.ArrayBuffer();\n\n  var append = inputIsString ? appendString : appendBlob;\n\n  function next() {\n    setImmediateShim(loadNextChunk);\n  }\n\n  function done() {\n    var raw = buffer.end(true);\n    var base64 = rawToBase64(raw);\n    callback(base64);\n    buffer.destroy();\n  }\n\n  function loadNextChunk() {\n    var start = currentChunk * chunkSize;\n    var end = start + chunkSize;\n    currentChunk++;\n    if (currentChunk < chunks) {\n      append(buffer, data, start, end, next);\n    } else {\n      append(buffer, data, start, end, done);\n    }\n  }\n  loadNextChunk();\n}\n\nfunction stringMd5(string) {\n  return Md5.hash(string);\n}\n\nfunction parseBase64(data) {\n  try {\n    return atob$1(data);\n  } catch (e) {\n    var err = createError(BAD_ARG,\n      'Attachment is not a valid base64 string');\n    return {error: err};\n  }\n}\n\nfunction preprocessString(att, blobType, callback) {\n  var asBinary = parseBase64(att.data);\n  if (asBinary.error) {\n    return callback(asBinary.error);\n  }\n\n  att.length = asBinary.length;\n  if (blobType === 'blob') {\n    att.data = binStringToBluffer(asBinary, att.content_type);\n  } else if (blobType === 'base64') {\n    att.data = btoa$1(asBinary);\n  } else { // binary\n    att.data = asBinary;\n  }\n  binaryMd5(asBinary, function (result) {\n    att.digest = 'md5-' + result;\n    callback();\n  });\n}\n\nfunction preprocessBlob(att, blobType, callback) {\n  binaryMd5(att.data, function (md5) {\n    att.digest = 'md5-' + md5;\n    // size is for blobs (browser), length is for buffers (node)\n    att.length = att.data.size || att.data.length || 0;\n    if (blobType === 'binary') {\n      blobToBinaryString(att.data, function (binString) {\n        att.data = binString;\n        callback();\n      });\n    } else if (blobType === 'base64') {\n      blobToBase64(att.data, function (b64) {\n        att.data = b64;\n        callback();\n      });\n    } else {\n      callback();\n    }\n  });\n}\n\nfunction preprocessAttachment(att, blobType, callback) {\n  if (att.stub) {\n    return callback();\n  }\n  if (typeof att.data === 'string') { // input is a base64 string\n    preprocessString(att, blobType, callback);\n  } else { // input is a blob\n    preprocessBlob(att, blobType, callback);\n  }\n}\n\nfunction preprocessAttachments(docInfos, blobType, callback) {\n\n  if (!docInfos.length) {\n    return callback();\n  }\n\n  var docv = 0;\n  var overallErr;\n\n  docInfos.forEach(function (docInfo) {\n    var attachments = docInfo.data && docInfo.data._attachments ?\n      Object.keys(docInfo.data._attachments) : [];\n    var recv = 0;\n\n    if (!attachments.length) {\n      return done();\n    }\n\n    function processedAttachment(err) {\n      overallErr = err;\n      recv++;\n      if (recv === attachments.length) {\n        done();\n      }\n    }\n\n    for (var key in docInfo.data._attachments) {\n      if (docInfo.data._attachments.hasOwnProperty(key)) {\n        preprocessAttachment(docInfo.data._attachments[key],\n          blobType, processedAttachment);\n      }\n    }\n  });\n\n  function done() {\n    docv++;\n    if (docInfos.length === docv) {\n      if (overallErr) {\n        callback(overallErr);\n      } else {\n        callback();\n      }\n    }\n  }\n}\n\nfunction updateDoc(revLimit, prev, docInfo, results,\n                   i, cb, writeDoc, newEdits) {\n\n  if (revExists(prev.rev_tree, docInfo.metadata.rev)) {\n    results[i] = docInfo;\n    return cb();\n  }\n\n  // sometimes this is pre-calculated. historically not always\n  var previousWinningRev = prev.winningRev || winningRev(prev);\n  var previouslyDeleted = 'deleted' in prev ? prev.deleted :\n    isDeleted(prev, previousWinningRev);\n  var deleted = 'deleted' in docInfo.metadata ? docInfo.metadata.deleted :\n    isDeleted(docInfo.metadata);\n  var isRoot = /^1-/.test(docInfo.metadata.rev);\n\n  if (previouslyDeleted && !deleted && newEdits && isRoot) {\n    var newDoc = docInfo.data;\n    newDoc._rev = previousWinningRev;\n    newDoc._id = docInfo.metadata.id;\n    docInfo = parseDoc(newDoc, newEdits);\n  }\n\n  var merged = merge(prev.rev_tree, docInfo.metadata.rev_tree[0], revLimit);\n\n  var inConflict = newEdits && (((previouslyDeleted && deleted) ||\n    (!previouslyDeleted && merged.conflicts !== 'new_leaf') ||\n    (previouslyDeleted && !deleted && merged.conflicts === 'new_branch')));\n\n  if (inConflict) {\n    var err = createError(REV_CONFLICT);\n    results[i] = err;\n    return cb();\n  }\n\n  var newRev = docInfo.metadata.rev;\n  docInfo.metadata.rev_tree = merged.tree;\n  docInfo.stemmedRevs = merged.stemmedRevs || [];\n  /* istanbul ignore else */\n  if (prev.rev_map) {\n    docInfo.metadata.rev_map = prev.rev_map; // used only by leveldb\n  }\n\n  // recalculate\n  var winningRev$$ = winningRev(docInfo.metadata);\n  var winningRevIsDeleted = isDeleted(docInfo.metadata, winningRev$$);\n\n  // calculate the total number of documents that were added/removed,\n  // from the perspective of total_rows/doc_count\n  var delta = (previouslyDeleted === winningRevIsDeleted) ? 0 :\n    previouslyDeleted < winningRevIsDeleted ? -1 : 1;\n\n  var newRevIsDeleted;\n  if (newRev === winningRev$$) {\n    // if the new rev is the same as the winning rev, we can reuse that value\n    newRevIsDeleted = winningRevIsDeleted;\n  } else {\n    // if they're not the same, then we need to recalculate\n    newRevIsDeleted = isDeleted(docInfo.metadata, newRev);\n  }\n\n  writeDoc(docInfo, winningRev$$, winningRevIsDeleted, newRevIsDeleted,\n    true, delta, i, cb);\n}\n\nfunction rootIsMissing(docInfo) {\n  return docInfo.metadata.rev_tree[0].ids[1].status === 'missing';\n}\n\nfunction processDocs(revLimit, docInfos, api, fetchedDocs, tx, results,\n                     writeDoc, opts, overallCallback) {\n\n  // Default to 1000 locally\n  revLimit = revLimit || 1000;\n\n  function insertDoc(docInfo, resultsIdx, callback) {\n    // Cant insert new deleted documents\n    var winningRev$$ = winningRev(docInfo.metadata);\n    var deleted = isDeleted(docInfo.metadata, winningRev$$);\n    if ('was_delete' in opts && deleted) {\n      results[resultsIdx] = createError(MISSING_DOC, 'deleted');\n      return callback();\n    }\n\n    // 4712 - detect whether a new document was inserted with a _rev\n    var inConflict = newEdits && rootIsMissing(docInfo);\n\n    if (inConflict) {\n      var err = createError(REV_CONFLICT);\n      results[resultsIdx] = err;\n      return callback();\n    }\n\n    var delta = deleted ? 0 : 1;\n\n    writeDoc(docInfo, winningRev$$, deleted, deleted, false,\n      delta, resultsIdx, callback);\n  }\n\n  var newEdits = opts.new_edits;\n  var idsToDocs = new _Map();\n\n  var docsDone = 0;\n  var docsToDo = docInfos.length;\n\n  function checkAllDocsDone() {\n    if (++docsDone === docsToDo && overallCallback) {\n      overallCallback();\n    }\n  }\n\n  docInfos.forEach(function (currentDoc, resultsIdx) {\n\n    if (currentDoc._id && isLocalId(currentDoc._id)) {\n      var fun = currentDoc._deleted ? '_removeLocal' : '_putLocal';\n      api[fun](currentDoc, {ctx: tx}, function (err, res) {\n        results[resultsIdx] = err || res;\n        checkAllDocsDone();\n      });\n      return;\n    }\n\n    var id = currentDoc.metadata.id;\n    if (idsToDocs.has(id)) {\n      docsToDo--; // duplicate\n      idsToDocs.get(id).push([currentDoc, resultsIdx]);\n    } else {\n      idsToDocs.set(id, [[currentDoc, resultsIdx]]);\n    }\n  });\n\n  // in the case of new_edits, the user can provide multiple docs\n  // with the same id. these need to be processed sequentially\n  idsToDocs.forEach(function (docs, id) {\n    var numDone = 0;\n\n    function docWritten() {\n      if (++numDone < docs.length) {\n        nextDoc();\n      } else {\n        checkAllDocsDone();\n      }\n    }\n    function nextDoc() {\n      var value = docs[numDone];\n      var currentDoc = value[0];\n      var resultsIdx = value[1];\n\n      if (fetchedDocs.has(id)) {\n        updateDoc(revLimit, fetchedDocs.get(id), currentDoc, results,\n          resultsIdx, docWritten, writeDoc, newEdits);\n      } else {\n        // Ensure stemming applies to new writes as well\n        var merged = merge([], currentDoc.metadata.rev_tree[0], revLimit);\n        currentDoc.metadata.rev_tree = merged.tree;\n        currentDoc.stemmedRevs = merged.stemmedRevs || [];\n        insertDoc(currentDoc, resultsIdx, docWritten);\n      }\n    }\n    nextDoc();\n  });\n}\n\n// IndexedDB requires a versioned database structure, so we use the\n// version here to manage migrations.\nvar ADAPTER_VERSION = 5;\n\n// The object stores created for each database\n// DOC_STORE stores the document meta data, its revision history and state\n// Keyed by document id\nvar DOC_STORE = 'document-store';\n// BY_SEQ_STORE stores a particular version of a document, keyed by its\n// sequence id\nvar BY_SEQ_STORE = 'by-sequence';\n// Where we store attachments\nvar ATTACH_STORE = 'attach-store';\n// Where we store many-to-many relations\n// between attachment digests and seqs\nvar ATTACH_AND_SEQ_STORE = 'attach-seq-store';\n\n// Where we store database-wide meta data in a single record\n// keyed by id: META_STORE\nvar META_STORE = 'meta-store';\n// Where we store local documents\nvar LOCAL_STORE = 'local-store';\n// Where we detect blob support\nvar DETECT_BLOB_SUPPORT_STORE = 'detect-blob-support';\n\nfunction slowJsonParse(str) {\n  try {\n    return JSON.parse(str);\n  } catch (e) {\n    /* istanbul ignore next */\n    return vuvuzela.parse(str);\n  }\n}\n\nfunction safeJsonParse(str) {\n  // try/catch is deoptimized in V8, leading to slower\n  // times than we'd like to have. Most documents are _not_\n  // huge, and do not require a slower code path just to parse them.\n  // We can be pretty sure that a document under 50000 characters\n  // will not be so deeply nested as to throw a stack overflow error\n  // (depends on the engine and available memory, though, so this is\n  // just a hunch). 50000 was chosen based on the average length\n  // of this string in our test suite, to try to find a number that covers\n  // most of our test cases (26 over this size, 26378 under it).\n  if (str.length < 50000) {\n    return JSON.parse(str);\n  }\n  return slowJsonParse(str);\n}\n\nfunction safeJsonStringify(json) {\n  try {\n    return JSON.stringify(json);\n  } catch (e) {\n    /* istanbul ignore next */\n    return vuvuzela.stringify(json);\n  }\n}\n\nfunction tryCode(fun, that, args, PouchDB) {\n  try {\n    fun.apply(that, args);\n  } catch (err) {\n    // Shouldn't happen, but in some odd cases\n    // IndexedDB implementations might throw a sync\n    // error, in which case this will at least log it.\n    PouchDB.emit('error', err);\n  }\n}\n\nvar taskQueue = {\n  running: false,\n  queue: []\n};\n\nfunction applyNext(PouchDB) {\n  if (taskQueue.running || !taskQueue.queue.length) {\n    return;\n  }\n  taskQueue.running = true;\n  var item = taskQueue.queue.shift();\n  item.action(function (err, res) {\n    tryCode(item.callback, this, [err, res], PouchDB);\n    taskQueue.running = false;\n    process.nextTick(function () {\n      applyNext(PouchDB);\n    });\n  });\n}\n\nfunction idbError(callback) {\n  return function (evt) {\n    var message = 'unknown_error';\n    if (evt.target && evt.target.error) {\n      message = evt.target.error.name || evt.target.error.message;\n    }\n    callback(createError(IDB_ERROR, message, evt.type));\n  };\n}\n\n// Unfortunately, the metadata has to be stringified\n// when it is put into the database, because otherwise\n// IndexedDB can throw errors for deeply-nested objects.\n// Originally we just used JSON.parse/JSON.stringify; now\n// we use this custom vuvuzela library that avoids recursion.\n// If we could do it all over again, we'd probably use a\n// format for the revision trees other than JSON.\nfunction encodeMetadata(metadata, winningRev, deleted) {\n  return {\n    data: safeJsonStringify(metadata),\n    winningRev: winningRev,\n    deletedOrLocal: deleted ? '1' : '0',\n    seq: metadata.seq, // highest seq for this doc\n    id: metadata.id\n  };\n}\n\nfunction decodeMetadata(storedObject) {\n  if (!storedObject) {\n    return null;\n  }\n  var metadata = safeJsonParse(storedObject.data);\n  metadata.winningRev = storedObject.winningRev;\n  metadata.deleted = storedObject.deletedOrLocal === '1';\n  metadata.seq = storedObject.seq;\n  return metadata;\n}\n\n// read the doc back out from the database. we don't store the\n// _id or _rev because we already have _doc_id_rev.\nfunction decodeDoc(doc) {\n  if (!doc) {\n    return doc;\n  }\n  var idx = doc._doc_id_rev.lastIndexOf(':');\n  doc._id = doc._doc_id_rev.substring(0, idx - 1);\n  doc._rev = doc._doc_id_rev.substring(idx + 1);\n  delete doc._doc_id_rev;\n  return doc;\n}\n\n// Read a blob from the database, encoding as necessary\n// and translating from base64 if the IDB doesn't support\n// native Blobs\nfunction readBlobData(body, type, asBlob, callback) {\n  if (asBlob) {\n    if (!body) {\n      callback(createBlob([''], {type: type}));\n    } else if (typeof body !== 'string') { // we have blob support\n      callback(body);\n    } else { // no blob support\n      callback(b64ToBluffer(body, type));\n    }\n  } else { // as base64 string\n    if (!body) {\n      callback('');\n    } else if (typeof body !== 'string') { // we have blob support\n      readAsBinaryString(body, function (binary) {\n        callback(btoa$1(binary));\n      });\n    } else { // no blob support\n      callback(body);\n    }\n  }\n}\n\nfunction fetchAttachmentsIfNecessary(doc, opts, txn, cb) {\n  var attachments = Object.keys(doc._attachments || {});\n  if (!attachments.length) {\n    return cb && cb();\n  }\n  var numDone = 0;\n\n  function checkDone() {\n    if (++numDone === attachments.length && cb) {\n      cb();\n    }\n  }\n\n  function fetchAttachment(doc, att) {\n    var attObj = doc._attachments[att];\n    var digest = attObj.digest;\n    var req = txn.objectStore(ATTACH_STORE).get(digest);\n    req.onsuccess = function (e) {\n      attObj.body = e.target.result.body;\n      checkDone();\n    };\n  }\n\n  attachments.forEach(function (att) {\n    if (opts.attachments && opts.include_docs) {\n      fetchAttachment(doc, att);\n    } else {\n      doc._attachments[att].stub = true;\n      checkDone();\n    }\n  });\n}\n\n// IDB-specific postprocessing necessary because\n// we don't know whether we stored a true Blob or\n// a base64-encoded string, and if it's a Blob it\n// needs to be read outside of the transaction context\nfunction postProcessAttachments(results, asBlob) {\n  return PouchPromise.all(results.map(function (row) {\n    if (row.doc && row.doc._attachments) {\n      var attNames = Object.keys(row.doc._attachments);\n      return PouchPromise.all(attNames.map(function (att) {\n        var attObj = row.doc._attachments[att];\n        if (!('body' in attObj)) { // already processed\n          return;\n        }\n        var body = attObj.body;\n        var type = attObj.content_type;\n        return new PouchPromise(function (resolve) {\n          readBlobData(body, type, asBlob, function (data) {\n            row.doc._attachments[att] = jsExtend.extend(\n              pick(attObj, ['digest', 'content_type']),\n              {data: data}\n            );\n            resolve();\n          });\n        });\n      }));\n    }\n  }));\n}\n\nfunction compactRevs(revs, docId, txn) {\n\n  var possiblyOrphanedDigests = [];\n  var seqStore = txn.objectStore(BY_SEQ_STORE);\n  var attStore = txn.objectStore(ATTACH_STORE);\n  var attAndSeqStore = txn.objectStore(ATTACH_AND_SEQ_STORE);\n  var count = revs.length;\n\n  function checkDone() {\n    count--;\n    if (!count) { // done processing all revs\n      deleteOrphanedAttachments();\n    }\n  }\n\n  function deleteOrphanedAttachments() {\n    if (!possiblyOrphanedDigests.length) {\n      return;\n    }\n    possiblyOrphanedDigests.forEach(function (digest) {\n      var countReq = attAndSeqStore.index('digestSeq').count(\n        IDBKeyRange.bound(\n          digest + '::', digest + '::\\uffff', false, false));\n      countReq.onsuccess = function (e) {\n        var count = e.target.result;\n        if (!count) {\n          // orphaned\n          attStore.delete(digest);\n        }\n      };\n    });\n  }\n\n  revs.forEach(function (rev) {\n    var index = seqStore.index('_doc_id_rev');\n    var key = docId + \"::\" + rev;\n    index.getKey(key).onsuccess = function (e) {\n      var seq = e.target.result;\n      if (typeof seq !== 'number') {\n        return checkDone();\n      }\n      seqStore.delete(seq);\n\n      var cursor = attAndSeqStore.index('seq')\n        .openCursor(IDBKeyRange.only(seq));\n\n      cursor.onsuccess = function (event) {\n        var cursor = event.target.result;\n        if (cursor) {\n          var digest = cursor.value.digestSeq.split('::')[0];\n          possiblyOrphanedDigests.push(digest);\n          attAndSeqStore.delete(cursor.primaryKey);\n          cursor.continue();\n        } else { // done\n          checkDone();\n        }\n      };\n    };\n  });\n}\n\nfunction openTransactionSafely(idb, stores, mode) {\n  try {\n    return {\n      txn: idb.transaction(stores, mode)\n    };\n  } catch (err) {\n    return {\n      error: err\n    };\n  }\n}\n\nfunction idbBulkDocs(dbOpts, req, opts, api, idb, idbChanges, callback) {\n  var docInfos = req.docs;\n  var txn;\n  var docStore;\n  var bySeqStore;\n  var attachStore;\n  var attachAndSeqStore;\n  var docInfoError;\n  var docCountDelta = 0;\n\n  for (var i = 0, len = docInfos.length; i < len; i++) {\n    var doc = docInfos[i];\n    if (doc._id && isLocalId(doc._id)) {\n      continue;\n    }\n    doc = docInfos[i] = parseDoc(doc, opts.new_edits);\n    if (doc.error && !docInfoError) {\n      docInfoError = doc;\n    }\n  }\n\n  if (docInfoError) {\n    return callback(docInfoError);\n  }\n\n  var results = new Array(docInfos.length);\n  var fetchedDocs = new _Map();\n  var preconditionErrored = false;\n  var blobType = api._meta.blobSupport ? 'blob' : 'base64';\n\n  preprocessAttachments(docInfos, blobType, function (err) {\n    if (err) {\n      return callback(err);\n    }\n    startTransaction();\n  });\n\n  function startTransaction() {\n\n    var stores = [\n      DOC_STORE, BY_SEQ_STORE,\n      ATTACH_STORE,\n      LOCAL_STORE, ATTACH_AND_SEQ_STORE\n    ];\n    var txnResult = openTransactionSafely(idb, stores, 'readwrite');\n    if (txnResult.error) {\n      return callback(txnResult.error);\n    }\n    txn = txnResult.txn;\n    txn.onabort = idbError(callback);\n    txn.ontimeout = idbError(callback);\n    txn.oncomplete = complete;\n    docStore = txn.objectStore(DOC_STORE);\n    bySeqStore = txn.objectStore(BY_SEQ_STORE);\n    attachStore = txn.objectStore(ATTACH_STORE);\n    attachAndSeqStore = txn.objectStore(ATTACH_AND_SEQ_STORE);\n\n    verifyAttachments(function (err) {\n      if (err) {\n        preconditionErrored = true;\n        return callback(err);\n      }\n      fetchExistingDocs();\n    });\n  }\n\n  function idbProcessDocs() {\n    processDocs(dbOpts.revs_limit, docInfos, api, fetchedDocs,\n                txn, results, writeDoc, opts);\n  }\n\n  function fetchExistingDocs() {\n\n    if (!docInfos.length) {\n      return;\n    }\n\n    var numFetched = 0;\n\n    function checkDone() {\n      if (++numFetched === docInfos.length) {\n        idbProcessDocs();\n      }\n    }\n\n    function readMetadata(event) {\n      var metadata = decodeMetadata(event.target.result);\n\n      if (metadata) {\n        fetchedDocs.set(metadata.id, metadata);\n      }\n      checkDone();\n    }\n\n    for (var i = 0, len = docInfos.length; i < len; i++) {\n      var docInfo = docInfos[i];\n      if (docInfo._id && isLocalId(docInfo._id)) {\n        checkDone(); // skip local docs\n        continue;\n      }\n      var req = docStore.get(docInfo.metadata.id);\n      req.onsuccess = readMetadata;\n    }\n  }\n\n  function complete() {\n    if (preconditionErrored) {\n      return;\n    }\n\n    idbChanges.notify(api._meta.name);\n    api._meta.docCount += docCountDelta;\n    callback(null, results);\n  }\n\n  function verifyAttachment(digest, callback) {\n\n    var req = attachStore.get(digest);\n    req.onsuccess = function (e) {\n      if (!e.target.result) {\n        var err = createError(MISSING_STUB,\n          'unknown stub attachment with digest ' +\n          digest);\n        err.status = 412;\n        callback(err);\n      } else {\n        callback();\n      }\n    };\n  }\n\n  function verifyAttachments(finish) {\n\n\n    var digests = [];\n    docInfos.forEach(function (docInfo) {\n      if (docInfo.data && docInfo.data._attachments) {\n        Object.keys(docInfo.data._attachments).forEach(function (filename) {\n          var att = docInfo.data._attachments[filename];\n          if (att.stub) {\n            digests.push(att.digest);\n          }\n        });\n      }\n    });\n    if (!digests.length) {\n      return finish();\n    }\n    var numDone = 0;\n    var err;\n\n    function checkDone() {\n      if (++numDone === digests.length) {\n        finish(err);\n      }\n    }\n    digests.forEach(function (digest) {\n      verifyAttachment(digest, function (attErr) {\n        if (attErr && !err) {\n          err = attErr;\n        }\n        checkDone();\n      });\n    });\n  }\n\n  function writeDoc(docInfo, winningRev, winningRevIsDeleted, newRevIsDeleted,\n                    isUpdate, delta, resultsIdx, callback) {\n\n    docCountDelta += delta;\n\n    docInfo.metadata.winningRev = winningRev;\n    docInfo.metadata.deleted = winningRevIsDeleted;\n\n    var doc = docInfo.data;\n    doc._id = docInfo.metadata.id;\n    doc._rev = docInfo.metadata.rev;\n\n    if (newRevIsDeleted) {\n      doc._deleted = true;\n    }\n\n    var hasAttachments = doc._attachments &&\n      Object.keys(doc._attachments).length;\n    if (hasAttachments) {\n      return writeAttachments(docInfo, winningRev, winningRevIsDeleted,\n        isUpdate, resultsIdx, callback);\n    }\n\n    finishDoc(docInfo, winningRev, winningRevIsDeleted,\n      isUpdate, resultsIdx, callback);\n  }\n\n  function finishDoc(docInfo, winningRev, winningRevIsDeleted,\n                     isUpdate, resultsIdx, callback) {\n\n    var doc = docInfo.data;\n    var metadata = docInfo.metadata;\n\n    doc._doc_id_rev = metadata.id + '::' + metadata.rev;\n    delete doc._id;\n    delete doc._rev;\n\n    function afterPutDoc(e) {\n      var revsToDelete = docInfo.stemmedRevs || [];\n\n      if (isUpdate && api.auto_compaction) {\n        revsToDelete = revsToDelete.concat(compactTree(docInfo.metadata));\n      }\n\n      if (revsToDelete && revsToDelete.length) {\n        compactRevs(revsToDelete, docInfo.metadata.id, txn);\n      }\n\n      metadata.seq = e.target.result;\n      // Current _rev is calculated from _rev_tree on read\n      delete metadata.rev;\n      var metadataToStore = encodeMetadata(metadata, winningRev,\n        winningRevIsDeleted);\n      var metaDataReq = docStore.put(metadataToStore);\n      metaDataReq.onsuccess = afterPutMetadata;\n    }\n\n    function afterPutDocError(e) {\n      // ConstraintError, need to update, not put (see #1638 for details)\n      e.preventDefault(); // avoid transaction abort\n      e.stopPropagation(); // avoid transaction onerror\n      var index = bySeqStore.index('_doc_id_rev');\n      var getKeyReq = index.getKey(doc._doc_id_rev);\n      getKeyReq.onsuccess = function (e) {\n        var putReq = bySeqStore.put(doc, e.target.result);\n        putReq.onsuccess = afterPutDoc;\n      };\n    }\n\n    function afterPutMetadata() {\n      results[resultsIdx] = {\n        ok: true,\n        id: metadata.id,\n        rev: winningRev\n      };\n      fetchedDocs.set(docInfo.metadata.id, docInfo.metadata);\n      insertAttachmentMappings(docInfo, metadata.seq, callback);\n    }\n\n    var putReq = bySeqStore.put(doc);\n\n    putReq.onsuccess = afterPutDoc;\n    putReq.onerror = afterPutDocError;\n  }\n\n  function writeAttachments(docInfo, winningRev, winningRevIsDeleted,\n                            isUpdate, resultsIdx, callback) {\n\n\n    var doc = docInfo.data;\n\n    var numDone = 0;\n    var attachments = Object.keys(doc._attachments);\n\n    function collectResults() {\n      if (numDone === attachments.length) {\n        finishDoc(docInfo, winningRev, winningRevIsDeleted,\n          isUpdate, resultsIdx, callback);\n      }\n    }\n\n    function attachmentSaved() {\n      numDone++;\n      collectResults();\n    }\n\n    attachments.forEach(function (key) {\n      var att = docInfo.data._attachments[key];\n      if (!att.stub) {\n        var data = att.data;\n        delete att.data;\n        att.revpos = parseInt(winningRev, 10);\n        var digest = att.digest;\n        saveAttachment(digest, data, attachmentSaved);\n      } else {\n        numDone++;\n        collectResults();\n      }\n    });\n  }\n\n  // map seqs to attachment digests, which\n  // we will need later during compaction\n  function insertAttachmentMappings(docInfo, seq, callback) {\n\n    var attsAdded = 0;\n    var attsToAdd = Object.keys(docInfo.data._attachments || {});\n\n    if (!attsToAdd.length) {\n      return callback();\n    }\n\n    function checkDone() {\n      if (++attsAdded === attsToAdd.length) {\n        callback();\n      }\n    }\n\n    function add(att) {\n      var digest = docInfo.data._attachments[att].digest;\n      var req = attachAndSeqStore.put({\n        seq: seq,\n        digestSeq: digest + '::' + seq\n      });\n\n      req.onsuccess = checkDone;\n      req.onerror = function (e) {\n        // this callback is for a constaint error, which we ignore\n        // because this docid/rev has already been associated with\n        // the digest (e.g. when new_edits == false)\n        e.preventDefault(); // avoid transaction abort\n        e.stopPropagation(); // avoid transaction onerror\n        checkDone();\n      };\n    }\n    for (var i = 0; i < attsToAdd.length; i++) {\n      add(attsToAdd[i]); // do in parallel\n    }\n  }\n\n  function saveAttachment(digest, data, callback) {\n\n\n    var getKeyReq = attachStore.count(digest);\n    getKeyReq.onsuccess = function (e) {\n      var count = e.target.result;\n      if (count) {\n        return callback(); // already exists\n      }\n      var newAtt = {\n        digest: digest,\n        body: data\n      };\n      var putReq = attachStore.put(newAtt);\n      putReq.onsuccess = callback;\n    };\n  }\n}\n\nfunction createKeyRange(start, end, inclusiveEnd, key, descending) {\n  try {\n    if (start && end) {\n      if (descending) {\n        return IDBKeyRange.bound(end, start, !inclusiveEnd, false);\n      } else {\n        return IDBKeyRange.bound(start, end, false, !inclusiveEnd);\n      }\n    } else if (start) {\n      if (descending) {\n        return IDBKeyRange.upperBound(start);\n      } else {\n        return IDBKeyRange.lowerBound(start);\n      }\n    } else if (end) {\n      if (descending) {\n        return IDBKeyRange.lowerBound(end, !inclusiveEnd);\n      } else {\n        return IDBKeyRange.upperBound(end, !inclusiveEnd);\n      }\n    } else if (key) {\n      return IDBKeyRange.only(key);\n    }\n  } catch (e) {\n    return {error: e};\n  }\n  return null;\n}\n\nfunction handleKeyRangeError(api, opts, err, callback) {\n  if (err.name === \"DataError\" && err.code === 0) {\n    // data error, start is less than end\n    return callback(null, {\n      total_rows: api._meta.docCount,\n      offset: opts.skip,\n      rows: []\n    });\n  }\n  callback(createError(IDB_ERROR, err.name, err.message));\n}\n\nfunction idbAllDocs(opts, api, idb, callback) {\n\n  function allDocsQuery(opts, callback) {\n    var start = 'startkey' in opts ? opts.startkey : false;\n    var end = 'endkey' in opts ? opts.endkey : false;\n    var key = 'key' in opts ? opts.key : false;\n    var skip = opts.skip || 0;\n    var limit = typeof opts.limit === 'number' ? opts.limit : -1;\n    var inclusiveEnd = opts.inclusive_end !== false;\n    var descending = 'descending' in opts && opts.descending ? 'prev' : null;\n\n    var keyRange = createKeyRange(start, end, inclusiveEnd, key, descending);\n    if (keyRange && keyRange.error) {\n      return handleKeyRangeError(api, opts, keyRange.error, callback);\n    }\n\n    var stores = [DOC_STORE, BY_SEQ_STORE];\n\n    if (opts.attachments) {\n      stores.push(ATTACH_STORE);\n    }\n    var txnResult = openTransactionSafely(idb, stores, 'readonly');\n    if (txnResult.error) {\n      return callback(txnResult.error);\n    }\n    var txn = txnResult.txn;\n    var docStore = txn.objectStore(DOC_STORE);\n    var seqStore = txn.objectStore(BY_SEQ_STORE);\n    var cursor = descending ?\n      docStore.openCursor(keyRange, descending) :\n      docStore.openCursor(keyRange);\n    var docIdRevIndex = seqStore.index('_doc_id_rev');\n    var results = [];\n    var docCount = 0;\n\n    // if the user specifies include_docs=true, then we don't\n    // want to block the main cursor while we're fetching the doc\n    function fetchDocAsynchronously(metadata, row, winningRev) {\n      var key = metadata.id + \"::\" + winningRev;\n      docIdRevIndex.get(key).onsuccess =  function onGetDoc(e) {\n        row.doc = decodeDoc(e.target.result);\n        if (opts.conflicts) {\n          row.doc._conflicts = collectConflicts(metadata);\n        }\n        fetchAttachmentsIfNecessary(row.doc, opts, txn);\n      };\n    }\n\n    function allDocsInner(cursor, winningRev, metadata) {\n      var row = {\n        id: metadata.id,\n        key: metadata.id,\n        value: {\n          rev: winningRev\n        }\n      };\n      var deleted = metadata.deleted;\n      if (opts.deleted === 'ok') {\n        results.push(row);\n        // deleted docs are okay with \"keys\" requests\n        if (deleted) {\n          row.value.deleted = true;\n          row.doc = null;\n        } else if (opts.include_docs) {\n          fetchDocAsynchronously(metadata, row, winningRev);\n        }\n      } else if (!deleted && skip-- <= 0) {\n        results.push(row);\n        if (opts.include_docs) {\n          fetchDocAsynchronously(metadata, row, winningRev);\n        }\n        if (--limit === 0) {\n          return;\n        }\n      }\n      cursor.continue();\n    }\n\n    function onGetCursor(e) {\n      docCount = api._meta.docCount; // do this within the txn for consistency\n      var cursor = e.target.result;\n      if (!cursor) {\n        return;\n      }\n      var metadata = decodeMetadata(cursor.value);\n      var winningRev = metadata.winningRev;\n\n      allDocsInner(cursor, winningRev, metadata);\n    }\n\n    function onResultsReady() {\n      callback(null, {\n        total_rows: docCount,\n        offset: opts.skip,\n        rows: results\n      });\n    }\n\n    function onTxnComplete() {\n      if (opts.attachments) {\n        postProcessAttachments(results, opts.binary).then(onResultsReady);\n      } else {\n        onResultsReady();\n      }\n    }\n\n    txn.oncomplete = onTxnComplete;\n    cursor.onsuccess = onGetCursor;\n  }\n\n  function allDocs(opts, callback) {\n\n    if (opts.limit === 0) {\n      return callback(null, {\n        total_rows: api._meta.docCount,\n        offset: opts.skip,\n        rows: []\n      });\n    }\n    allDocsQuery(opts, callback);\n  }\n\n  allDocs(opts, callback);\n}\n\n//\n// Blobs are not supported in all versions of IndexedDB, notably\n// Chrome <37 and Android <5. In those versions, storing a blob will throw.\n//\n// Various other blob bugs exist in Chrome v37-42 (inclusive).\n// Detecting them is expensive and confusing to users, and Chrome 37-42\n// is at very low usage worldwide, so we do a hacky userAgent check instead.\n//\n// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120\n// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916\n// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836\n//\nfunction checkBlobSupport(txn) {\n  return new PouchPromise(function (resolve) {\n    var blob = createBlob(['']);\n    txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');\n\n    txn.onabort = function (e) {\n      // If the transaction aborts now its due to not being able to\n      // write to the database, likely due to the disk being full\n      e.preventDefault();\n      e.stopPropagation();\n      resolve(false);\n    };\n\n    txn.oncomplete = function () {\n      var matchedChrome = navigator.userAgent.match(/Chrome\\/(\\d+)/);\n      var matchedEdge = navigator.userAgent.match(/Edge\\//);\n      // MS Edge pretends to be Chrome 42:\n      // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx\n      resolve(matchedEdge || !matchedChrome ||\n        parseInt(matchedChrome[1], 10) >= 43);\n    };\n  }).catch(function () {\n    return false; // error, so assume unsupported\n  });\n}\n\nvar cachedDBs = new _Map();\nvar blobSupportPromise;\nvar idbChanges = new Changes$1();\nvar openReqList = new _Map();\n\nfunction IdbPouch(opts, callback) {\n  var api = this;\n\n  taskQueue.queue.push({\n    action: function (thisCallback) {\n      init(api, opts, thisCallback);\n    },\n    callback: callback\n  });\n  applyNext(api.constructor);\n}\n\nfunction init(api, opts, callback) {\n\n  var dbName = opts.name;\n\n  var idb = null;\n  api._meta = null;\n\n  // called when creating a fresh new database\n  function createSchema(db) {\n    var docStore = db.createObjectStore(DOC_STORE, {keyPath : 'id'});\n    db.createObjectStore(BY_SEQ_STORE, {autoIncrement: true})\n      .createIndex('_doc_id_rev', '_doc_id_rev', {unique: true});\n    db.createObjectStore(ATTACH_STORE, {keyPath: 'digest'});\n    db.createObjectStore(META_STORE, {keyPath: 'id', autoIncrement: false});\n    db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);\n\n    // added in v2\n    docStore.createIndex('deletedOrLocal', 'deletedOrLocal', {unique : false});\n\n    // added in v3\n    db.createObjectStore(LOCAL_STORE, {keyPath: '_id'});\n\n    // added in v4\n    var attAndSeqStore = db.createObjectStore(ATTACH_AND_SEQ_STORE,\n      {autoIncrement: true});\n    attAndSeqStore.createIndex('seq', 'seq');\n    attAndSeqStore.createIndex('digestSeq', 'digestSeq', {unique: true});\n  }\n\n  // migration to version 2\n  // unfortunately \"deletedOrLocal\" is a misnomer now that we no longer\n  // store local docs in the main doc-store, but whaddyagonnado\n  function addDeletedOrLocalIndex(txn, callback) {\n    var docStore = txn.objectStore(DOC_STORE);\n    docStore.createIndex('deletedOrLocal', 'deletedOrLocal', {unique : false});\n\n    docStore.openCursor().onsuccess = function (event) {\n      var cursor = event.target.result;\n      if (cursor) {\n        var metadata = cursor.value;\n        var deleted = isDeleted(metadata);\n        metadata.deletedOrLocal = deleted ? \"1\" : \"0\";\n        docStore.put(metadata);\n        cursor.continue();\n      } else {\n        callback();\n      }\n    };\n  }\n\n  // migration to version 3 (part 1)\n  function createLocalStoreSchema(db) {\n    db.createObjectStore(LOCAL_STORE, {keyPath: '_id'})\n      .createIndex('_doc_id_rev', '_doc_id_rev', {unique: true});\n  }\n\n  // migration to version 3 (part 2)\n  function migrateLocalStore(txn, cb) {\n    var localStore = txn.objectStore(LOCAL_STORE);\n    var docStore = txn.objectStore(DOC_STORE);\n    var seqStore = txn.objectStore(BY_SEQ_STORE);\n\n    var cursor = docStore.openCursor();\n    cursor.onsuccess = function (event) {\n      var cursor = event.target.result;\n      if (cursor) {\n        var metadata = cursor.value;\n        var docId = metadata.id;\n        var local = isLocalId(docId);\n        var rev = winningRev(metadata);\n        if (local) {\n          var docIdRev = docId + \"::\" + rev;\n          // remove all seq entries\n          // associated with this docId\n          var start = docId + \"::\";\n          var end = docId + \"::~\";\n          var index = seqStore.index('_doc_id_rev');\n          var range = IDBKeyRange.bound(start, end, false, false);\n          var seqCursor = index.openCursor(range);\n          seqCursor.onsuccess = function (e) {\n            seqCursor = e.target.result;\n            if (!seqCursor) {\n              // done\n              docStore.delete(cursor.primaryKey);\n              cursor.continue();\n            } else {\n              var data = seqCursor.value;\n              if (data._doc_id_rev === docIdRev) {\n                localStore.put(data);\n              }\n              seqStore.delete(seqCursor.primaryKey);\n              seqCursor.continue();\n            }\n          };\n        } else {\n          cursor.continue();\n        }\n      } else if (cb) {\n        cb();\n      }\n    };\n  }\n\n  // migration to version 4 (part 1)\n  function addAttachAndSeqStore(db) {\n    var attAndSeqStore = db.createObjectStore(ATTACH_AND_SEQ_STORE,\n      {autoIncrement: true});\n    attAndSeqStore.createIndex('seq', 'seq');\n    attAndSeqStore.createIndex('digestSeq', 'digestSeq', {unique: true});\n  }\n\n  // migration to version 4 (part 2)\n  function migrateAttsAndSeqs(txn, callback) {\n    var seqStore = txn.objectStore(BY_SEQ_STORE);\n    var attStore = txn.objectStore(ATTACH_STORE);\n    var attAndSeqStore = txn.objectStore(ATTACH_AND_SEQ_STORE);\n\n    // need to actually populate the table. this is the expensive part,\n    // so as an optimization, check first that this database even\n    // contains attachments\n    var req = attStore.count();\n    req.onsuccess = function (e) {\n      var count = e.target.result;\n      if (!count) {\n        return callback(); // done\n      }\n\n      seqStore.openCursor().onsuccess = function (e) {\n        var cursor = e.target.result;\n        if (!cursor) {\n          return callback(); // done\n        }\n        var doc = cursor.value;\n        var seq = cursor.primaryKey;\n        var atts = Object.keys(doc._attachments || {});\n        var digestMap = {};\n        for (var j = 0; j < atts.length; j++) {\n          var att = doc._attachments[atts[j]];\n          digestMap[att.digest] = true; // uniq digests, just in case\n        }\n        var digests = Object.keys(digestMap);\n        for (j = 0; j < digests.length; j++) {\n          var digest = digests[j];\n          attAndSeqStore.put({\n            seq: seq,\n            digestSeq: digest + '::' + seq\n          });\n        }\n        cursor.continue();\n      };\n    };\n  }\n\n  // migration to version 5\n  // Instead of relying on on-the-fly migration of metadata,\n  // this brings the doc-store to its modern form:\n  // - metadata.winningrev\n  // - metadata.seq\n  // - stringify the metadata when storing it\n  function migrateMetadata(txn) {\n\n    function decodeMetadataCompat(storedObject) {\n      if (!storedObject.data) {\n        // old format, when we didn't store it stringified\n        storedObject.deleted = storedObject.deletedOrLocal === '1';\n        return storedObject;\n      }\n      return decodeMetadata(storedObject);\n    }\n\n    // ensure that every metadata has a winningRev and seq,\n    // which was previously created on-the-fly but better to migrate\n    var bySeqStore = txn.objectStore(BY_SEQ_STORE);\n    var docStore = txn.objectStore(DOC_STORE);\n    var cursor = docStore.openCursor();\n    cursor.onsuccess = function (e) {\n      var cursor = e.target.result;\n      if (!cursor) {\n        return; // done\n      }\n      var metadata = decodeMetadataCompat(cursor.value);\n\n      metadata.winningRev = metadata.winningRev ||\n        winningRev(metadata);\n\n      function fetchMetadataSeq() {\n        // metadata.seq was added post-3.2.0, so if it's missing,\n        // we need to fetch it manually\n        var start = metadata.id + '::';\n        var end = metadata.id + '::\\uffff';\n        var req = bySeqStore.index('_doc_id_rev').openCursor(\n          IDBKeyRange.bound(start, end));\n\n        var metadataSeq = 0;\n        req.onsuccess = function (e) {\n          var cursor = e.target.result;\n          if (!cursor) {\n            metadata.seq = metadataSeq;\n            return onGetMetadataSeq();\n          }\n          var seq = cursor.primaryKey;\n          if (seq > metadataSeq) {\n            metadataSeq = seq;\n          }\n          cursor.continue();\n        };\n      }\n\n      function onGetMetadataSeq() {\n        var metadataToStore = encodeMetadata(metadata,\n          metadata.winningRev, metadata.deleted);\n\n        var req = docStore.put(metadataToStore);\n        req.onsuccess = function () {\n          cursor.continue();\n        };\n      }\n\n      if (metadata.seq) {\n        return onGetMetadataSeq();\n      }\n\n      fetchMetadataSeq();\n    };\n\n  }\n\n  api.type = function () {\n    return 'idb';\n  };\n\n  api._id = toPromise(function (callback) {\n    callback(null, api._meta.instanceId);\n  });\n\n  api._bulkDocs = function idb_bulkDocs(req, reqOpts, callback) {\n    idbBulkDocs(opts, req, reqOpts, api, idb, idbChanges, callback);\n  };\n\n  // First we look up the metadata in the ids database, then we fetch the\n  // current revision(s) from the by sequence store\n  api._get = function idb_get(id, opts, callback) {\n    var doc;\n    var metadata;\n    var err;\n    var txn = opts.ctx;\n    if (!txn) {\n      var txnResult = openTransactionSafely(idb,\n        [DOC_STORE, BY_SEQ_STORE, ATTACH_STORE], 'readonly');\n      if (txnResult.error) {\n        return callback(txnResult.error);\n      }\n      txn = txnResult.txn;\n    }\n\n    function finish() {\n      callback(err, {doc: doc, metadata: metadata, ctx: txn});\n    }\n\n    txn.objectStore(DOC_STORE).get(id).onsuccess = function (e) {\n      metadata = decodeMetadata(e.target.result);\n      // we can determine the result here if:\n      // 1. there is no such document\n      // 2. the document is deleted and we don't ask about specific rev\n      // When we ask with opts.rev we expect the answer to be either\n      // doc (possibly with _deleted=true) or missing error\n      if (!metadata) {\n        err = createError(MISSING_DOC, 'missing');\n        return finish();\n      }\n      if (isDeleted(metadata) && !opts.rev) {\n        err = createError(MISSING_DOC, \"deleted\");\n        return finish();\n      }\n      var objectStore = txn.objectStore(BY_SEQ_STORE);\n\n      var rev = opts.rev || metadata.winningRev;\n      var key = metadata.id + '::' + rev;\n\n      objectStore.index('_doc_id_rev').get(key).onsuccess = function (e) {\n        doc = e.target.result;\n        if (doc) {\n          doc = decodeDoc(doc);\n        }\n        if (!doc) {\n          err = createError(MISSING_DOC, 'missing');\n          return finish();\n        }\n        finish();\n      };\n    };\n  };\n\n  api._getAttachment = function (docId, attachId, attachment, opts, callback) {\n    var txn;\n    if (opts.ctx) {\n      txn = opts.ctx;\n    } else {\n      var txnResult = openTransactionSafely(idb,\n        [DOC_STORE, BY_SEQ_STORE, ATTACH_STORE], 'readonly');\n      if (txnResult.error) {\n        return callback(txnResult.error);\n      }\n      txn = txnResult.txn;\n    }\n    var digest = attachment.digest;\n    var type = attachment.content_type;\n\n    txn.objectStore(ATTACH_STORE).get(digest).onsuccess = function (e) {\n      var body = e.target.result.body;\n      readBlobData(body, type, opts.binary, function (blobData) {\n        callback(null, blobData);\n      });\n    };\n  };\n\n  api._info = function idb_info(callback) {\n\n    if (idb === null || !cachedDBs.has(dbName)) {\n      var error = new Error('db isn\\'t open');\n      error.id = 'idbNull';\n      return callback(error);\n    }\n    var updateSeq;\n    var docCount;\n\n    var txnResult = openTransactionSafely(idb, [BY_SEQ_STORE], 'readonly');\n    if (txnResult.error) {\n      return callback(txnResult.error);\n    }\n    var txn = txnResult.txn;\n    var cursor = txn.objectStore(BY_SEQ_STORE).openCursor(null, 'prev');\n    cursor.onsuccess = function (event) {\n      var cursor = event.target.result;\n      updateSeq = cursor ? cursor.key : 0;\n      // count within the same txn for consistency\n      docCount = api._meta.docCount;\n    };\n\n    txn.oncomplete = function () {\n      callback(null, {\n        doc_count: docCount,\n        update_seq: updateSeq,\n        // for debugging\n        idb_attachment_format: (api._meta.blobSupport ? 'binary' : 'base64')\n      });\n    };\n  };\n\n  api._allDocs = function idb_allDocs(opts, callback) {\n    idbAllDocs(opts, api, idb, callback);\n  };\n\n  api._changes = function (opts) {\n    opts = clone(opts);\n\n    if (opts.continuous) {\n      var id = dbName + ':' + uuid();\n      idbChanges.addListener(dbName, id, api, opts);\n      idbChanges.notify(dbName);\n      return {\n        cancel: function () {\n          idbChanges.removeListener(dbName, id);\n        }\n      };\n    }\n\n    var docIds = opts.doc_ids && new _Set(opts.doc_ids);\n\n    opts.since = opts.since || 0;\n    var lastSeq = opts.since;\n\n    var limit = 'limit' in opts ? opts.limit : -1;\n    if (limit === 0) {\n      limit = 1; // per CouchDB _changes spec\n    }\n    var returnDocs;\n    if ('return_docs' in opts) {\n      returnDocs = opts.return_docs;\n    } else if ('returnDocs' in opts) {\n      // TODO: Remove 'returnDocs' in favor of 'return_docs' in a future release\n      returnDocs = opts.returnDocs;\n    } else {\n      returnDocs = true;\n    }\n\n    var results = [];\n    var numResults = 0;\n    var filter = filterChange(opts);\n    var docIdsToMetadata = new _Map();\n\n    var txn;\n    var bySeqStore;\n    var docStore;\n    var docIdRevIndex;\n\n    function onGetCursor(cursor) {\n\n      var doc = decodeDoc(cursor.value);\n      var seq = cursor.key;\n\n      if (docIds && !docIds.has(doc._id)) {\n        return cursor.continue();\n      }\n\n      var metadata;\n\n      function onGetMetadata() {\n        if (metadata.seq !== seq) {\n          // some other seq is later\n          return cursor.continue();\n        }\n\n        lastSeq = seq;\n\n        if (metadata.winningRev === doc._rev) {\n          return onGetWinningDoc(doc);\n        }\n\n        fetchWinningDoc();\n      }\n\n      function fetchWinningDoc() {\n        var docIdRev = doc._id + '::' + metadata.winningRev;\n        var req = docIdRevIndex.get(docIdRev);\n        req.onsuccess = function (e) {\n          onGetWinningDoc(decodeDoc(e.target.result));\n        };\n      }\n\n      function onGetWinningDoc(winningDoc) {\n\n        var change = opts.processChange(winningDoc, metadata, opts);\n        change.seq = metadata.seq;\n\n        var filtered = filter(change);\n        if (typeof filtered === 'object') {\n          return opts.complete(filtered);\n        }\n\n        if (filtered) {\n          numResults++;\n          if (returnDocs) {\n            results.push(change);\n          }\n          // process the attachment immediately\n          // for the benefit of live listeners\n          if (opts.attachments && opts.include_docs) {\n            fetchAttachmentsIfNecessary(winningDoc, opts, txn, function () {\n              postProcessAttachments([change], opts.binary).then(function () {\n                opts.onChange(change);\n              });\n            });\n          } else {\n            opts.onChange(change);\n          }\n        }\n        if (numResults !== limit) {\n          cursor.continue();\n        }\n      }\n\n      metadata = docIdsToMetadata.get(doc._id);\n      if (metadata) { // cached\n        return onGetMetadata();\n      }\n      // metadata not cached, have to go fetch it\n      docStore.get(doc._id).onsuccess = function (event) {\n        metadata = decodeMetadata(event.target.result);\n        docIdsToMetadata.set(doc._id, metadata);\n        onGetMetadata();\n      };\n    }\n\n    function onsuccess(event) {\n      var cursor = event.target.result;\n\n      if (!cursor) {\n        return;\n      }\n      onGetCursor(cursor);\n    }\n\n    function fetchChanges() {\n      var objectStores = [DOC_STORE, BY_SEQ_STORE];\n      if (opts.attachments) {\n        objectStores.push(ATTACH_STORE);\n      }\n      var txnResult = openTransactionSafely(idb, objectStores, 'readonly');\n      if (txnResult.error) {\n        return opts.complete(txnResult.error);\n      }\n      txn = txnResult.txn;\n      txn.onabort = idbError(opts.complete);\n      txn.oncomplete = onTxnComplete;\n\n      bySeqStore = txn.objectStore(BY_SEQ_STORE);\n      docStore = txn.objectStore(DOC_STORE);\n      docIdRevIndex = bySeqStore.index('_doc_id_rev');\n\n      var req;\n\n      if (opts.descending) {\n        req = bySeqStore.openCursor(null, 'prev');\n      } else {\n        req = bySeqStore.openCursor(IDBKeyRange.lowerBound(opts.since, true));\n      }\n\n      req.onsuccess = onsuccess;\n    }\n\n    fetchChanges();\n\n    function onTxnComplete() {\n\n      function finish() {\n        opts.complete(null, {\n          results: results,\n          last_seq: lastSeq\n        });\n      }\n\n      if (!opts.continuous && opts.attachments) {\n        // cannot guarantee that postProcessing was already done,\n        // so do it again\n        postProcessAttachments(results).then(finish);\n      } else {\n        finish();\n      }\n    }\n  };\n\n  api._close = function (callback) {\n    if (idb === null) {\n      return callback(createError(NOT_OPEN));\n    }\n\n    // https://developer.mozilla.org/en-US/docs/IndexedDB/IDBDatabase#close\n    // \"Returns immediately and closes the connection in a separate thread...\"\n    idb.close();\n    cachedDBs.delete(dbName);\n    idb = null;\n    callback();\n  };\n\n  api._getRevisionTree = function (docId, callback) {\n    var txnResult = openTransactionSafely(idb, [DOC_STORE], 'readonly');\n    if (txnResult.error) {\n      return callback(txnResult.error);\n    }\n    var txn = txnResult.txn;\n    var req = txn.objectStore(DOC_STORE).get(docId);\n    req.onsuccess = function (event) {\n      var doc = decodeMetadata(event.target.result);\n      if (!doc) {\n        callback(createError(MISSING_DOC));\n      } else {\n        callback(null, doc.rev_tree);\n      }\n    };\n  };\n\n  // This function removes revisions of document docId\n  // which are listed in revs and sets this document\n  // revision to to rev_tree\n  api._doCompaction = function (docId, revs, callback) {\n    var stores = [\n      DOC_STORE,\n      BY_SEQ_STORE,\n      ATTACH_STORE,\n      ATTACH_AND_SEQ_STORE\n    ];\n    var txnResult = openTransactionSafely(idb, stores, 'readwrite');\n    if (txnResult.error) {\n      return callback(txnResult.error);\n    }\n    var txn = txnResult.txn;\n\n    var docStore = txn.objectStore(DOC_STORE);\n\n    docStore.get(docId).onsuccess = function (event) {\n      var metadata = decodeMetadata(event.target.result);\n      traverseRevTree(metadata.rev_tree, function (isLeaf, pos,\n                                                         revHash, ctx, opts) {\n        var rev = pos + '-' + revHash;\n        if (revs.indexOf(rev) !== -1) {\n          opts.status = 'missing';\n        }\n      });\n      compactRevs(revs, docId, txn);\n      var winningRev = metadata.winningRev;\n      var deleted = metadata.deleted;\n      txn.objectStore(DOC_STORE).put(\n        encodeMetadata(metadata, winningRev, deleted));\n    };\n    txn.onabort = idbError(callback);\n    txn.oncomplete = function () {\n      callback();\n    };\n  };\n\n\n  api._getLocal = function (id, callback) {\n    var txnResult = openTransactionSafely(idb, [LOCAL_STORE], 'readonly');\n    if (txnResult.error) {\n      return callback(txnResult.error);\n    }\n    var tx = txnResult.txn;\n    var req = tx.objectStore(LOCAL_STORE).get(id);\n\n    req.onerror = idbError(callback);\n    req.onsuccess = function (e) {\n      var doc = e.target.result;\n      if (!doc) {\n        callback(createError(MISSING_DOC));\n      } else {\n        delete doc['_doc_id_rev']; // for backwards compat\n        callback(null, doc);\n      }\n    };\n  };\n\n  api._putLocal = function (doc, opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    delete doc._revisions; // ignore this, trust the rev\n    var oldRev = doc._rev;\n    var id = doc._id;\n    if (!oldRev) {\n      doc._rev = '0-1';\n    } else {\n      doc._rev = '0-' + (parseInt(oldRev.split('-')[1], 10) + 1);\n    }\n\n    var tx = opts.ctx;\n    var ret;\n    if (!tx) {\n      var txnResult = openTransactionSafely(idb, [LOCAL_STORE], 'readwrite');\n      if (txnResult.error) {\n        return callback(txnResult.error);\n      }\n      tx = txnResult.txn;\n      tx.onerror = idbError(callback);\n      tx.oncomplete = function () {\n        if (ret) {\n          callback(null, ret);\n        }\n      };\n    }\n\n    var oStore = tx.objectStore(LOCAL_STORE);\n    var req;\n    if (oldRev) {\n      req = oStore.get(id);\n      req.onsuccess = function (e) {\n        var oldDoc = e.target.result;\n        if (!oldDoc || oldDoc._rev !== oldRev) {\n          callback(createError(REV_CONFLICT));\n        } else { // update\n          var req = oStore.put(doc);\n          req.onsuccess = function () {\n            ret = {ok: true, id: doc._id, rev: doc._rev};\n            if (opts.ctx) { // return immediately\n              callback(null, ret);\n            }\n          };\n        }\n      };\n    } else { // new doc\n      req = oStore.add(doc);\n      req.onerror = function (e) {\n        // constraint error, already exists\n        callback(createError(REV_CONFLICT));\n        e.preventDefault(); // avoid transaction abort\n        e.stopPropagation(); // avoid transaction onerror\n      };\n      req.onsuccess = function () {\n        ret = {ok: true, id: doc._id, rev: doc._rev};\n        if (opts.ctx) { // return immediately\n          callback(null, ret);\n        }\n      };\n    }\n  };\n\n  api._removeLocal = function (doc, opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    var tx = opts.ctx;\n    if (!tx) {\n      var txnResult = openTransactionSafely(idb, [LOCAL_STORE], 'readwrite');\n      if (txnResult.error) {\n        return callback(txnResult.error);\n      }\n      tx = txnResult.txn;\n      tx.oncomplete = function () {\n        if (ret) {\n          callback(null, ret);\n        }\n      };\n    }\n    var ret;\n    var id = doc._id;\n    var oStore = tx.objectStore(LOCAL_STORE);\n    var req = oStore.get(id);\n\n    req.onerror = idbError(callback);\n    req.onsuccess = function (e) {\n      var oldDoc = e.target.result;\n      if (!oldDoc || oldDoc._rev !== doc._rev) {\n        callback(createError(MISSING_DOC));\n      } else {\n        oStore.delete(id);\n        ret = {ok: true, id: id, rev: '0-0'};\n        if (opts.ctx) { // return immediately\n          callback(null, ret);\n        }\n      }\n    };\n  };\n\n  api._destroy = function (opts, callback) {\n    idbChanges.removeAllListeners(dbName);\n\n    //Close open request for \"dbName\" database to fix ie delay.\n    var openReq = openReqList.get(dbName);\n    if (openReq && openReq.result) {\n      openReq.result.close();\n      cachedDBs.delete(dbName);\n    }\n    var req = indexedDB.deleteDatabase(dbName);\n\n    req.onsuccess = function () {\n      //Remove open request from the list.\n      openReqList.delete(dbName);\n      if (hasLocalStorage() && (dbName in localStorage)) {\n        delete localStorage[dbName];\n      }\n      callback(null, { 'ok': true });\n    };\n\n    req.onerror = idbError(callback);\n  };\n\n  var cached = cachedDBs.get(dbName);\n\n  if (cached) {\n    idb = cached.idb;\n    api._meta = cached.global;\n    process.nextTick(function () {\n      callback(null, api);\n    });\n    return;\n  }\n\n  var req;\n  if (opts.storage) {\n    req = tryStorageOption(dbName, opts.storage);\n  } else {\n    req = indexedDB.open(dbName, ADAPTER_VERSION);\n  }\n\n  openReqList.set(dbName, req);\n\n  req.onupgradeneeded = function (e) {\n    var db = e.target.result;\n    if (e.oldVersion < 1) {\n      return createSchema(db); // new db, initial schema\n    }\n    // do migrations\n\n    var txn = e.currentTarget.transaction;\n    // these migrations have to be done in this function, before\n    // control is returned to the event loop, because IndexedDB\n\n    if (e.oldVersion < 3) {\n      createLocalStoreSchema(db); // v2 -> v3\n    }\n    if (e.oldVersion < 4) {\n      addAttachAndSeqStore(db); // v3 -> v4\n    }\n\n    var migrations = [\n      addDeletedOrLocalIndex, // v1 -> v2\n      migrateLocalStore,      // v2 -> v3\n      migrateAttsAndSeqs,     // v3 -> v4\n      migrateMetadata         // v4 -> v5\n    ];\n\n    var i = e.oldVersion;\n\n    function next() {\n      var migration = migrations[i - 1];\n      i++;\n      if (migration) {\n        migration(txn, next);\n      }\n    }\n\n    next();\n  };\n\n  req.onsuccess = function (e) {\n\n    idb = e.target.result;\n\n    idb.onversionchange = function () {\n      idb.close();\n      cachedDBs.delete(dbName);\n    };\n\n    idb.onabort = function (e) {\n      guardedConsole('error', 'Database has a global failure', e.target.error);\n      idb.close();\n      cachedDBs.delete(dbName);\n    };\n\n    var txn = idb.transaction([\n      META_STORE,\n      DETECT_BLOB_SUPPORT_STORE,\n      DOC_STORE\n    ], 'readwrite');\n\n    var req = txn.objectStore(META_STORE).get(META_STORE);\n\n    var blobSupport = null;\n    var docCount = null;\n    var instanceId = null;\n\n    req.onsuccess = function (e) {\n\n      var checkSetupComplete = function () {\n        if (blobSupport === null || docCount === null ||\n            instanceId === null) {\n          return;\n        } else {\n          api._meta = {\n            name: dbName,\n            instanceId: instanceId,\n            blobSupport: blobSupport,\n            docCount: docCount\n          };\n\n          cachedDBs.set(dbName, {\n            idb: idb,\n            global: api._meta\n          });\n          callback(null, api);\n        }\n      };\n\n      //\n      // fetch/store the id\n      //\n\n      var meta = e.target.result || {id: META_STORE};\n      if (dbName  + '_id' in meta) {\n        instanceId = meta[dbName + '_id'];\n        checkSetupComplete();\n      } else {\n        instanceId = uuid();\n        meta[dbName + '_id'] = instanceId;\n        txn.objectStore(META_STORE).put(meta).onsuccess = function () {\n          checkSetupComplete();\n        };\n      }\n\n      //\n      // check blob support\n      //\n\n      if (!blobSupportPromise) {\n        // make sure blob support is only checked once\n        blobSupportPromise = checkBlobSupport(txn);\n      }\n\n      blobSupportPromise.then(function (val) {\n        blobSupport = val;\n        checkSetupComplete();\n      });\n\n      //\n      // count docs\n      //\n\n      var index = txn.objectStore(DOC_STORE).index('deletedOrLocal');\n      index.count(IDBKeyRange.only('0')).onsuccess = function (e) {\n        docCount = e.target.result;\n        checkSetupComplete();\n      };\n\n    };\n  };\n\n  req.onerror = function () {\n    var msg = 'Failed to open indexedDB, are you in private browsing mode?';\n    guardedConsole('error', msg);\n    callback(createError(IDB_ERROR, msg));\n  };\n}\n\nIdbPouch.valid = function () {\n  // Issue #2533, we finally gave up on doing bug\n  // detection instead of browser sniffing. Safari brought us\n  // to our knees.\n  var isSafari = typeof openDatabase !== 'undefined' &&\n    /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) &&\n    !/Chrome/.test(navigator.userAgent) &&\n    !/BlackBerry/.test(navigator.platform);\n\n  // some outdated implementations of IDB that appear on Samsung\n  // and HTC Android devices <4.4 are missing IDBKeyRange\n  return !isSafari && typeof indexedDB !== 'undefined' &&\n    typeof IDBKeyRange !== 'undefined';\n};\n\nfunction tryStorageOption(dbName, storage) {\n  try { // option only available in Firefox 26+\n    return indexedDB.open(dbName, {\n      version: ADAPTER_VERSION,\n      storage: storage\n    });\n  } catch(err) {\n      return indexedDB.open(dbName, ADAPTER_VERSION);\n  }\n}\n\nfunction IDBPouch (PouchDB) {\n  PouchDB.adapter('idb', IdbPouch, true);\n}\n\n//\n// Parsing hex strings. Yeah.\n//\n// So basically we need this because of a bug in WebSQL:\n// https://code.google.com/p/chromium/issues/detail?id=422690\n// https://bugs.webkit.org/show_bug.cgi?id=137637\n//\n// UTF-8 and UTF-16 are provided as separate functions\n// for meager performance improvements\n//\n\nfunction decodeUtf8(str) {\n  return decodeURIComponent(escape(str));\n}\n\nfunction hexToInt(charCode) {\n  // '0'-'9' is 48-57\n  // 'A'-'F' is 65-70\n  // SQLite will only give us uppercase hex\n  return charCode < 65 ? (charCode - 48) : (charCode - 55);\n}\n\n\n// Example:\n// pragma encoding=utf8;\n// select hex('A');\n// returns '41'\nfunction parseHexUtf8(str, start, end) {\n  var result = '';\n  while (start < end) {\n    result += String.fromCharCode(\n      (hexToInt(str.charCodeAt(start++)) << 4) |\n        hexToInt(str.charCodeAt(start++)));\n  }\n  return result;\n}\n\n// Example:\n// pragma encoding=utf16;\n// select hex('A');\n// returns '4100'\n// notice that the 00 comes after the 41 (i.e. it's swizzled)\nfunction parseHexUtf16(str, start, end) {\n  var result = '';\n  while (start < end) {\n    // UTF-16, so swizzle the bytes\n    result += String.fromCharCode(\n      (hexToInt(str.charCodeAt(start + 2)) << 12) |\n        (hexToInt(str.charCodeAt(start + 3)) << 8) |\n        (hexToInt(str.charCodeAt(start)) << 4) |\n        hexToInt(str.charCodeAt(start + 1)));\n    start += 4;\n  }\n  return result;\n}\n\nfunction parseHexString(str, encoding) {\n  if (encoding === 'UTF-8') {\n    return decodeUtf8(parseHexUtf8(str, 0, str.length));\n  } else {\n    return parseHexUtf16(str, 0, str.length);\n  }\n}\n\nfunction quote(str) {\n  return \"'\" + str + \"'\";\n}\n\nvar ADAPTER_VERSION$1 = 7; // used to manage migrations\n\n// The object stores created for each database\n// DOC_STORE stores the document meta data, its revision history and state\nvar DOC_STORE$1 = quote('document-store');\n// BY_SEQ_STORE stores a particular version of a document, keyed by its\n// sequence id\nvar BY_SEQ_STORE$1 = quote('by-sequence');\n// Where we store attachments\nvar ATTACH_STORE$1 = quote('attach-store');\nvar LOCAL_STORE$1 = quote('local-store');\nvar META_STORE$1 = quote('metadata-store');\n// where we store many-to-many relations between attachment\n// digests and seqs\nvar ATTACH_AND_SEQ_STORE$1 = quote('attach-seq-store');\n\n// escapeBlob and unescapeBlob are workarounds for a websql bug:\n// https://code.google.com/p/chromium/issues/detail?id=422690\n// https://bugs.webkit.org/show_bug.cgi?id=137637\n// The goal is to never actually insert the \\u0000 character\n// in the database.\nfunction escapeBlob(str) {\n  return str\n    .replace(/\\u0002/g, '\\u0002\\u0002')\n    .replace(/\\u0001/g, '\\u0001\\u0002')\n    .replace(/\\u0000/g, '\\u0001\\u0001');\n}\n\nfunction unescapeBlob(str) {\n  return str\n    .replace(/\\u0001\\u0001/g, '\\u0000')\n    .replace(/\\u0001\\u0002/g, '\\u0001')\n    .replace(/\\u0002\\u0002/g, '\\u0002');\n}\n\nfunction stringifyDoc(doc) {\n  // don't bother storing the id/rev. it uses lots of space,\n  // in persistent map/reduce especially\n  delete doc._id;\n  delete doc._rev;\n  return JSON.stringify(doc);\n}\n\nfunction unstringifyDoc(doc, id, rev) {\n  doc = JSON.parse(doc);\n  doc._id = id;\n  doc._rev = rev;\n  return doc;\n}\n\n// question mark groups IN queries, e.g. 3 -> '(?,?,?)'\nfunction qMarks(num) {\n  var s = '(';\n  while (num--) {\n    s += '?';\n    if (num) {\n      s += ',';\n    }\n  }\n  return s + ')';\n}\n\nfunction select(selector, table, joiner, where, orderBy) {\n  return 'SELECT ' + selector + ' FROM ' +\n    (typeof table === 'string' ? table : table.join(' JOIN ')) +\n    (joiner ? (' ON ' + joiner) : '') +\n    (where ? (' WHERE ' +\n    (typeof where === 'string' ? where : where.join(' AND '))) : '') +\n    (orderBy ? (' ORDER BY ' + orderBy) : '');\n}\n\nfunction compactRevs$1(revs, docId, tx) {\n\n  if (!revs.length) {\n    return;\n  }\n\n  var numDone = 0;\n  var seqs = [];\n\n  function checkDone() {\n    if (++numDone === revs.length) { // done\n      deleteOrphans();\n    }\n  }\n\n  function deleteOrphans() {\n    // find orphaned attachment digests\n\n    if (!seqs.length) {\n      return;\n    }\n\n    var sql = 'SELECT DISTINCT digest AS digest FROM ' +\n      ATTACH_AND_SEQ_STORE$1 + ' WHERE seq IN ' + qMarks(seqs.length);\n\n    tx.executeSql(sql, seqs, function (tx, res) {\n\n      var digestsToCheck = [];\n      for (var i = 0; i < res.rows.length; i++) {\n        digestsToCheck.push(res.rows.item(i).digest);\n      }\n      if (!digestsToCheck.length) {\n        return;\n      }\n\n      var sql = 'DELETE FROM ' + ATTACH_AND_SEQ_STORE$1 +\n        ' WHERE seq IN (' +\n        seqs.map(function () { return '?'; }).join(',') +\n        ')';\n      tx.executeSql(sql, seqs, function (tx) {\n\n        var sql = 'SELECT digest FROM ' + ATTACH_AND_SEQ_STORE$1 +\n          ' WHERE digest IN (' +\n          digestsToCheck.map(function () { return '?'; }).join(',') +\n          ')';\n        tx.executeSql(sql, digestsToCheck, function (tx, res) {\n          var nonOrphanedDigests = new _Set();\n          for (var i = 0; i < res.rows.length; i++) {\n            nonOrphanedDigests.add(res.rows.item(i).digest);\n          }\n          digestsToCheck.forEach(function (digest) {\n            if (nonOrphanedDigests.has(digest)) {\n              return;\n            }\n            tx.executeSql(\n              'DELETE FROM ' + ATTACH_AND_SEQ_STORE$1 + ' WHERE digest=?',\n              [digest]);\n            tx.executeSql(\n              'DELETE FROM ' + ATTACH_STORE$1 + ' WHERE digest=?', [digest]);\n          });\n        });\n      });\n    });\n  }\n\n  // update by-seq and attach stores in parallel\n  revs.forEach(function (rev) {\n    var sql = 'SELECT seq FROM ' + BY_SEQ_STORE$1 +\n      ' WHERE doc_id=? AND rev=?';\n\n    tx.executeSql(sql, [docId, rev], function (tx, res) {\n      if (!res.rows.length) { // already deleted\n        return checkDone();\n      }\n      var seq = res.rows.item(0).seq;\n      seqs.push(seq);\n\n      tx.executeSql(\n        'DELETE FROM ' + BY_SEQ_STORE$1 + ' WHERE seq=?', [seq], checkDone);\n    });\n  });\n}\n\nfunction websqlError(callback) {\n  return function (event) {\n    guardedConsole('error', 'WebSQL threw an error', event);\n    // event may actually be a SQLError object, so report is as such\n    var errorNameMatch = event && event.constructor.toString()\n        .match(/function ([^\\(]+)/);\n    var errorName = (errorNameMatch && errorNameMatch[1]) || event.type;\n    var errorReason = event.target || event.message;\n    callback(createError(WSQ_ERROR, errorReason, errorName));\n  };\n}\n\nfunction getSize(opts) {\n  if ('size' in opts) {\n    // triggers immediate popup in iOS, fixes #2347\n    // e.g. 5000001 asks for 5 MB, 10000001 asks for 10 MB,\n    return opts.size * 1000000;\n  }\n  // In iOS, doesn't matter as long as it's <= 5000000.\n  // Except that if you request too much, our tests fail\n  // because of the native \"do you accept?\" popup.\n  // In Android <=4.3, this value is actually used as an\n  // honest-to-god ceiling for data, so we need to\n  // set it to a decently high number.\n  var isAndroid = typeof navigator !== 'undefined' &&\n    /Android/.test(navigator.userAgent);\n  return isAndroid ? 5000000 : 1; // in PhantomJS, if you use 0 it will crash\n}\n\nfunction websqlBulkDocs(dbOpts, req, opts, api, db, websqlChanges, callback) {\n  var newEdits = opts.new_edits;\n  var userDocs = req.docs;\n\n  // Parse the docs, give them a sequence number for the result\n  var docInfos = userDocs.map(function (doc) {\n    if (doc._id && isLocalId(doc._id)) {\n      return doc;\n    }\n    var newDoc = parseDoc(doc, newEdits);\n    return newDoc;\n  });\n\n  var docInfoErrors = docInfos.filter(function (docInfo) {\n    return docInfo.error;\n  });\n  if (docInfoErrors.length) {\n    return callback(docInfoErrors[0]);\n  }\n\n  var tx;\n  var results = new Array(docInfos.length);\n  var fetchedDocs = new _Map();\n\n  var preconditionErrored;\n  function complete() {\n    if (preconditionErrored) {\n      return callback(preconditionErrored);\n    }\n    websqlChanges.notify(api._name);\n    api._docCount = -1; // invalidate\n    callback(null, results);\n  }\n\n  function verifyAttachment(digest, callback) {\n    var sql = 'SELECT count(*) as cnt FROM ' + ATTACH_STORE$1 +\n      ' WHERE digest=?';\n    tx.executeSql(sql, [digest], function (tx, result) {\n      if (result.rows.item(0).cnt === 0) {\n        var err = createError(MISSING_STUB,\n          'unknown stub attachment with digest ' +\n          digest);\n        callback(err);\n      } else {\n        callback();\n      }\n    });\n  }\n\n  function verifyAttachments(finish) {\n    var digests = [];\n    docInfos.forEach(function (docInfo) {\n      if (docInfo.data && docInfo.data._attachments) {\n        Object.keys(docInfo.data._attachments).forEach(function (filename) {\n          var att = docInfo.data._attachments[filename];\n          if (att.stub) {\n            digests.push(att.digest);\n          }\n        });\n      }\n    });\n    if (!digests.length) {\n      return finish();\n    }\n    var numDone = 0;\n    var err;\n\n    function checkDone() {\n      if (++numDone === digests.length) {\n        finish(err);\n      }\n    }\n    digests.forEach(function (digest) {\n      verifyAttachment(digest, function (attErr) {\n        if (attErr && !err) {\n          err = attErr;\n        }\n        checkDone();\n      });\n    });\n  }\n\n  function writeDoc(docInfo, winningRev, winningRevIsDeleted, newRevIsDeleted,\n                    isUpdate, delta, resultsIdx, callback) {\n\n    function finish() {\n      var data = docInfo.data;\n      var deletedInt = newRevIsDeleted ? 1 : 0;\n\n      var id = data._id;\n      var rev = data._rev;\n      var json = stringifyDoc(data);\n      var sql = 'INSERT INTO ' + BY_SEQ_STORE$1 +\n        ' (doc_id, rev, json, deleted) VALUES (?, ?, ?, ?);';\n      var sqlArgs = [id, rev, json, deletedInt];\n\n      // map seqs to attachment digests, which\n      // we will need later during compaction\n      function insertAttachmentMappings(seq, callback) {\n        var attsAdded = 0;\n        var attsToAdd = Object.keys(data._attachments || {});\n\n        if (!attsToAdd.length) {\n          return callback();\n        }\n        function checkDone() {\n          if (++attsAdded === attsToAdd.length) {\n            callback();\n          }\n          return false; // ack handling a constraint error\n        }\n        function add(att) {\n          var sql = 'INSERT INTO ' + ATTACH_AND_SEQ_STORE$1 +\n            ' (digest, seq) VALUES (?,?)';\n          var sqlArgs = [data._attachments[att].digest, seq];\n          tx.executeSql(sql, sqlArgs, checkDone, checkDone);\n          // second callback is for a constaint error, which we ignore\n          // because this docid/rev has already been associated with\n          // the digest (e.g. when new_edits == false)\n        }\n        for (var i = 0; i < attsToAdd.length; i++) {\n          add(attsToAdd[i]); // do in parallel\n        }\n      }\n\n      tx.executeSql(sql, sqlArgs, function (tx, result) {\n        var seq = result.insertId;\n        insertAttachmentMappings(seq, function () {\n          dataWritten(tx, seq);\n        });\n      }, function () {\n        // constraint error, recover by updating instead (see #1638)\n        var fetchSql = select('seq', BY_SEQ_STORE$1, null,\n          'doc_id=? AND rev=?');\n        tx.executeSql(fetchSql, [id, rev], function (tx, res) {\n          var seq = res.rows.item(0).seq;\n          var sql = 'UPDATE ' + BY_SEQ_STORE$1 +\n            ' SET json=?, deleted=? WHERE doc_id=? AND rev=?;';\n          var sqlArgs = [json, deletedInt, id, rev];\n          tx.executeSql(sql, sqlArgs, function (tx) {\n            insertAttachmentMappings(seq, function () {\n              dataWritten(tx, seq);\n            });\n          });\n        });\n        return false; // ack that we've handled the error\n      });\n    }\n\n    function collectResults(attachmentErr) {\n      if (!err) {\n        if (attachmentErr) {\n          err = attachmentErr;\n          callback(err);\n        } else if (recv === attachments.length) {\n          finish();\n        }\n      }\n    }\n\n    var err = null;\n    var recv = 0;\n\n    docInfo.data._id = docInfo.metadata.id;\n    docInfo.data._rev = docInfo.metadata.rev;\n    var attachments = Object.keys(docInfo.data._attachments || {});\n\n\n    if (newRevIsDeleted) {\n      docInfo.data._deleted = true;\n    }\n\n    function attachmentSaved(err) {\n      recv++;\n      collectResults(err);\n    }\n\n    attachments.forEach(function (key) {\n      var att = docInfo.data._attachments[key];\n      if (!att.stub) {\n        var data = att.data;\n        delete att.data;\n        att.revpos = parseInt(winningRev, 10);\n        var digest = att.digest;\n        saveAttachment(digest, data, attachmentSaved);\n      } else {\n        recv++;\n        collectResults();\n      }\n    });\n\n    if (!attachments.length) {\n      finish();\n    }\n\n    function dataWritten(tx, seq) {\n      var id = docInfo.metadata.id;\n\n      var revsToCompact = docInfo.stemmedRevs || [];\n      if (isUpdate && api.auto_compaction) {\n        revsToCompact = compactTree(docInfo.metadata).concat(revsToCompact);\n      }\n      if (revsToCompact.length) {\n        compactRevs$1(revsToCompact, id, tx);\n      }\n\n      docInfo.metadata.seq = seq;\n      delete docInfo.metadata.rev;\n\n      var sql = isUpdate ?\n      'UPDATE ' + DOC_STORE$1 +\n      ' SET json=?, max_seq=?, winningseq=' +\n      '(SELECT seq FROM ' + BY_SEQ_STORE$1 +\n      ' WHERE doc_id=' + DOC_STORE$1 + '.id AND rev=?) WHERE id=?'\n        : 'INSERT INTO ' + DOC_STORE$1 +\n      ' (id, winningseq, max_seq, json) VALUES (?,?,?,?);';\n      var metadataStr = safeJsonStringify(docInfo.metadata);\n      var params = isUpdate ?\n        [metadataStr, seq, winningRev, id] :\n        [id, seq, seq, metadataStr];\n      tx.executeSql(sql, params, function () {\n        results[resultsIdx] = {\n          ok: true,\n          id: docInfo.metadata.id,\n          rev: winningRev\n        };\n        fetchedDocs.set(id, docInfo.metadata);\n        callback();\n      });\n    }\n  }\n\n  function websqlProcessDocs() {\n    processDocs(dbOpts.revs_limit, docInfos, api, fetchedDocs, tx,\n                results, writeDoc, opts);\n  }\n\n  function fetchExistingDocs(callback) {\n    if (!docInfos.length) {\n      return callback();\n    }\n\n    var numFetched = 0;\n\n    function checkDone() {\n      if (++numFetched === docInfos.length) {\n        callback();\n      }\n    }\n\n    docInfos.forEach(function (docInfo) {\n      if (docInfo._id && isLocalId(docInfo._id)) {\n        return checkDone(); // skip local docs\n      }\n      var id = docInfo.metadata.id;\n      tx.executeSql('SELECT json FROM ' + DOC_STORE$1 +\n      ' WHERE id = ?', [id], function (tx, result) {\n        if (result.rows.length) {\n          var metadata = safeJsonParse(result.rows.item(0).json);\n          fetchedDocs.set(id, metadata);\n        }\n        checkDone();\n      });\n    });\n  }\n\n  function saveAttachment(digest, data, callback) {\n    var sql = 'SELECT digest FROM ' + ATTACH_STORE$1 + ' WHERE digest=?';\n    tx.executeSql(sql, [digest], function (tx, result) {\n      if (result.rows.length) { // attachment already exists\n        return callback();\n      }\n      // we could just insert before selecting and catch the error,\n      // but my hunch is that it's cheaper not to serialize the blob\n      // from JS to C if we don't have to (TODO: confirm this)\n      sql = 'INSERT INTO ' + ATTACH_STORE$1 +\n      ' (digest, body, escaped) VALUES (?,?,1)';\n      tx.executeSql(sql, [digest, escapeBlob(data)], function () {\n        callback();\n      }, function () {\n        // ignore constaint errors, means it already exists\n        callback();\n        return false; // ack we handled the error\n      });\n    });\n  }\n\n  preprocessAttachments(docInfos, 'binary', function (err) {\n    if (err) {\n      return callback(err);\n    }\n    db.transaction(function (txn) {\n      tx = txn;\n      verifyAttachments(function (err) {\n        if (err) {\n          preconditionErrored = err;\n        } else {\n          fetchExistingDocs(websqlProcessDocs);\n        }\n      });\n    }, websqlError(callback), complete);\n  });\n}\n\nvar cachedDatabases = new _Map();\n\n// openDatabase passed in through opts (e.g. for node-websql)\nfunction openDatabaseWithOpts(opts) {\n  return opts.websql(opts.name, opts.version, opts.description, opts.size);\n}\n\nfunction openDBSafely(opts) {\n  try {\n    return {\n      db: openDatabaseWithOpts(opts)\n    };\n  } catch (err) {\n    return {\n      error: err\n    };\n  }\n}\n\nfunction openDB$1(opts) {\n  var cachedResult = cachedDatabases.get(opts.name);\n  if (!cachedResult) {\n    cachedResult = openDBSafely(opts);\n    cachedDatabases.set(opts.name, cachedResult);\n  }\n  return cachedResult;\n}\n\nvar websqlChanges = new Changes$1();\n\nfunction fetchAttachmentsIfNecessary$1(doc, opts, api, txn, cb) {\n  var attachments = Object.keys(doc._attachments || {});\n  if (!attachments.length) {\n    return cb && cb();\n  }\n  var numDone = 0;\n\n  function checkDone() {\n    if (++numDone === attachments.length && cb) {\n      cb();\n    }\n  }\n\n  function fetchAttachment(doc, att) {\n    var attObj = doc._attachments[att];\n    var attOpts = {binary: opts.binary, ctx: txn};\n    api._getAttachment(doc._id, att, attObj, attOpts, function (_, data) {\n      doc._attachments[att] = jsExtend.extend(\n        pick(attObj, ['digest', 'content_type']),\n        { data: data }\n      );\n      checkDone();\n    });\n  }\n\n  attachments.forEach(function (att) {\n    if (opts.attachments && opts.include_docs) {\n      fetchAttachment(doc, att);\n    } else {\n      doc._attachments[att].stub = true;\n      checkDone();\n    }\n  });\n}\n\nvar POUCH_VERSION = 1;\n\n// these indexes cover the ground for most allDocs queries\nvar BY_SEQ_STORE_DELETED_INDEX_SQL =\n  'CREATE INDEX IF NOT EXISTS \\'by-seq-deleted-idx\\' ON ' +\n  BY_SEQ_STORE$1 + ' (seq, deleted)';\nvar BY_SEQ_STORE_DOC_ID_REV_INDEX_SQL =\n  'CREATE UNIQUE INDEX IF NOT EXISTS \\'by-seq-doc-id-rev\\' ON ' +\n    BY_SEQ_STORE$1 + ' (doc_id, rev)';\nvar DOC_STORE_WINNINGSEQ_INDEX_SQL =\n  'CREATE INDEX IF NOT EXISTS \\'doc-winningseq-idx\\' ON ' +\n  DOC_STORE$1 + ' (winningseq)';\nvar ATTACH_AND_SEQ_STORE_SEQ_INDEX_SQL =\n  'CREATE INDEX IF NOT EXISTS \\'attach-seq-seq-idx\\' ON ' +\n    ATTACH_AND_SEQ_STORE$1 + ' (seq)';\nvar ATTACH_AND_SEQ_STORE_ATTACH_INDEX_SQL =\n  'CREATE UNIQUE INDEX IF NOT EXISTS \\'attach-seq-digest-idx\\' ON ' +\n    ATTACH_AND_SEQ_STORE$1 + ' (digest, seq)';\n\nvar DOC_STORE_AND_BY_SEQ_JOINER = BY_SEQ_STORE$1 +\n  '.seq = ' + DOC_STORE$1 + '.winningseq';\n\nvar SELECT_DOCS = BY_SEQ_STORE$1 + '.seq AS seq, ' +\n  BY_SEQ_STORE$1 + '.deleted AS deleted, ' +\n  BY_SEQ_STORE$1 + '.json AS data, ' +\n  BY_SEQ_STORE$1 + '.rev AS rev, ' +\n  DOC_STORE$1 + '.json AS metadata';\n\nfunction WebSqlPouch$1(opts, callback) {\n  var api = this;\n  var instanceId = null;\n  var size = getSize(opts);\n  var idRequests = [];\n  var encoding;\n\n  api._docCount = -1; // cache sqlite count(*) for performance\n  api._name = opts.name;\n\n  // extend the options here, because sqlite plugin has a ton of options\n  // and they are constantly changing, so it's more prudent to allow anything\n  var websqlOpts = jsExtend.extend({}, opts, {\n    version: POUCH_VERSION,\n    description: opts.name,\n    size: size\n  });\n  var openDBResult = openDB$1(websqlOpts);\n  if (openDBResult.error) {\n    return websqlError(callback)(openDBResult.error);\n  }\n  var db = openDBResult.db;\n  if (typeof db.readTransaction !== 'function') {\n    // doesn't exist in sqlite plugin\n    db.readTransaction = db.transaction;\n  }\n\n  function dbCreated() {\n    // note the db name in case the browser upgrades to idb\n    if (hasLocalStorage()) {\n      window.localStorage['_pouch__websqldb_' + api._name] = true;\n    }\n    callback(null, api);\n  }\n\n  // In this migration, we added the 'deleted' and 'local' columns to the\n  // by-seq and doc store tables.\n  // To preserve existing user data, we re-process all the existing JSON\n  // and add these values.\n  // Called migration2 because it corresponds to adapter version (db_version) #2\n  function runMigration2(tx, callback) {\n    // index used for the join in the allDocs query\n    tx.executeSql(DOC_STORE_WINNINGSEQ_INDEX_SQL);\n\n    tx.executeSql('ALTER TABLE ' + BY_SEQ_STORE$1 +\n      ' ADD COLUMN deleted TINYINT(1) DEFAULT 0', [], function () {\n      tx.executeSql(BY_SEQ_STORE_DELETED_INDEX_SQL);\n      tx.executeSql('ALTER TABLE ' + DOC_STORE$1 +\n        ' ADD COLUMN local TINYINT(1) DEFAULT 0', [], function () {\n        tx.executeSql('CREATE INDEX IF NOT EXISTS \\'doc-store-local-idx\\' ON ' +\n          DOC_STORE$1 + ' (local, id)');\n\n        var sql = 'SELECT ' + DOC_STORE$1 + '.winningseq AS seq, ' + DOC_STORE$1 +\n          '.json AS metadata FROM ' + BY_SEQ_STORE$1 + ' JOIN ' + DOC_STORE$1 +\n          ' ON ' + BY_SEQ_STORE$1 + '.seq = ' + DOC_STORE$1 + '.winningseq';\n\n        tx.executeSql(sql, [], function (tx, result) {\n\n          var deleted = [];\n          var local = [];\n\n          for (var i = 0; i < result.rows.length; i++) {\n            var item = result.rows.item(i);\n            var seq = item.seq;\n            var metadata = JSON.parse(item.metadata);\n            if (isDeleted(metadata)) {\n              deleted.push(seq);\n            }\n            if (isLocalId(metadata.id)) {\n              local.push(metadata.id);\n            }\n          }\n          tx.executeSql('UPDATE ' + DOC_STORE$1 + 'SET local = 1 WHERE id IN ' +\n            qMarks(local.length), local, function () {\n            tx.executeSql('UPDATE ' + BY_SEQ_STORE$1 +\n              ' SET deleted = 1 WHERE seq IN ' +\n              qMarks(deleted.length), deleted, callback);\n          });\n        });\n      });\n    });\n  }\n\n  // in this migration, we make all the local docs unversioned\n  function runMigration3(tx, callback) {\n    var local = 'CREATE TABLE IF NOT EXISTS ' + LOCAL_STORE$1 +\n      ' (id UNIQUE, rev, json)';\n    tx.executeSql(local, [], function () {\n      var sql = 'SELECT ' + DOC_STORE$1 + '.id AS id, ' +\n        BY_SEQ_STORE$1 + '.json AS data ' +\n        'FROM ' + BY_SEQ_STORE$1 + ' JOIN ' +\n        DOC_STORE$1 + ' ON ' + BY_SEQ_STORE$1 + '.seq = ' +\n        DOC_STORE$1 + '.winningseq WHERE local = 1';\n      tx.executeSql(sql, [], function (tx, res) {\n        var rows = [];\n        for (var i = 0; i < res.rows.length; i++) {\n          rows.push(res.rows.item(i));\n        }\n        function doNext() {\n          if (!rows.length) {\n            return callback(tx);\n          }\n          var row = rows.shift();\n          var rev = JSON.parse(row.data)._rev;\n          tx.executeSql('INSERT INTO ' + LOCAL_STORE$1 +\n              ' (id, rev, json) VALUES (?,?,?)',\n              [row.id, rev, row.data], function (tx) {\n            tx.executeSql('DELETE FROM ' + DOC_STORE$1 + ' WHERE id=?',\n                [row.id], function (tx) {\n              tx.executeSql('DELETE FROM ' + BY_SEQ_STORE$1 + ' WHERE seq=?',\n                  [row.seq], function () {\n                doNext();\n              });\n            });\n          });\n        }\n        doNext();\n      });\n    });\n  }\n\n  // in this migration, we remove doc_id_rev and just use rev\n  function runMigration4(tx, callback) {\n\n    function updateRows(rows) {\n      function doNext() {\n        if (!rows.length) {\n          return callback(tx);\n        }\n        var row = rows.shift();\n        var doc_id_rev = parseHexString(row.hex, encoding);\n        var idx = doc_id_rev.lastIndexOf('::');\n        var doc_id = doc_id_rev.substring(0, idx);\n        var rev = doc_id_rev.substring(idx + 2);\n        var sql = 'UPDATE ' + BY_SEQ_STORE$1 +\n          ' SET doc_id=?, rev=? WHERE doc_id_rev=?';\n        tx.executeSql(sql, [doc_id, rev, doc_id_rev], function () {\n          doNext();\n        });\n      }\n      doNext();\n    }\n\n    var sql = 'ALTER TABLE ' + BY_SEQ_STORE$1 + ' ADD COLUMN doc_id';\n    tx.executeSql(sql, [], function (tx) {\n      var sql = 'ALTER TABLE ' + BY_SEQ_STORE$1 + ' ADD COLUMN rev';\n      tx.executeSql(sql, [], function (tx) {\n        tx.executeSql(BY_SEQ_STORE_DOC_ID_REV_INDEX_SQL, [], function (tx) {\n          var sql = 'SELECT hex(doc_id_rev) as hex FROM ' + BY_SEQ_STORE$1;\n          tx.executeSql(sql, [], function (tx, res) {\n            var rows = [];\n            for (var i = 0; i < res.rows.length; i++) {\n              rows.push(res.rows.item(i));\n            }\n            updateRows(rows);\n          });\n        });\n      });\n    });\n  }\n\n  // in this migration, we add the attach_and_seq table\n  // for issue #2818\n  function runMigration5(tx, callback) {\n\n    function migrateAttsAndSeqs(tx) {\n      // need to actually populate the table. this is the expensive part,\n      // so as an optimization, check first that this database even\n      // contains attachments\n      var sql = 'SELECT COUNT(*) AS cnt FROM ' + ATTACH_STORE$1;\n      tx.executeSql(sql, [], function (tx, res) {\n        var count = res.rows.item(0).cnt;\n        if (!count) {\n          return callback(tx);\n        }\n\n        var offset = 0;\n        var pageSize = 10;\n        function nextPage() {\n          var sql = select(\n            SELECT_DOCS + ', ' + DOC_STORE$1 + '.id AS id',\n            [DOC_STORE$1, BY_SEQ_STORE$1],\n            DOC_STORE_AND_BY_SEQ_JOINER,\n            null,\n            DOC_STORE$1 + '.id '\n          );\n          sql += ' LIMIT ' + pageSize + ' OFFSET ' + offset;\n          offset += pageSize;\n          tx.executeSql(sql, [], function (tx, res) {\n            if (!res.rows.length) {\n              return callback(tx);\n            }\n            var digestSeqs = {};\n            function addDigestSeq(digest, seq) {\n              // uniq digest/seq pairs, just in case there are dups\n              var seqs = digestSeqs[digest] = (digestSeqs[digest] || []);\n              if (seqs.indexOf(seq) === -1) {\n                seqs.push(seq);\n              }\n            }\n            for (var i = 0; i < res.rows.length; i++) {\n              var row = res.rows.item(i);\n              var doc = unstringifyDoc(row.data, row.id, row.rev);\n              var atts = Object.keys(doc._attachments || {});\n              for (var j = 0; j < atts.length; j++) {\n                var att = doc._attachments[atts[j]];\n                addDigestSeq(att.digest, row.seq);\n              }\n            }\n            var digestSeqPairs = [];\n            Object.keys(digestSeqs).forEach(function (digest) {\n              var seqs = digestSeqs[digest];\n              seqs.forEach(function (seq) {\n                digestSeqPairs.push([digest, seq]);\n              });\n            });\n            if (!digestSeqPairs.length) {\n              return nextPage();\n            }\n            var numDone = 0;\n            digestSeqPairs.forEach(function (pair) {\n              var sql = 'INSERT INTO ' + ATTACH_AND_SEQ_STORE$1 +\n                ' (digest, seq) VALUES (?,?)';\n              tx.executeSql(sql, pair, function () {\n                if (++numDone === digestSeqPairs.length) {\n                  nextPage();\n                }\n              });\n            });\n          });\n        }\n        nextPage();\n      });\n    }\n\n    var attachAndRev = 'CREATE TABLE IF NOT EXISTS ' +\n      ATTACH_AND_SEQ_STORE$1 + ' (digest, seq INTEGER)';\n    tx.executeSql(attachAndRev, [], function (tx) {\n      tx.executeSql(\n        ATTACH_AND_SEQ_STORE_ATTACH_INDEX_SQL, [], function (tx) {\n          tx.executeSql(\n            ATTACH_AND_SEQ_STORE_SEQ_INDEX_SQL, [],\n            migrateAttsAndSeqs);\n        });\n    });\n  }\n\n  // in this migration, we use escapeBlob() and unescapeBlob()\n  // instead of reading out the binary as HEX, which is slow\n  function runMigration6(tx, callback) {\n    var sql = 'ALTER TABLE ' + ATTACH_STORE$1 +\n      ' ADD COLUMN escaped TINYINT(1) DEFAULT 0';\n    tx.executeSql(sql, [], callback);\n  }\n\n  // issue #3136, in this migration we need a \"latest seq\" as well\n  // as the \"winning seq\" in the doc store\n  function runMigration7(tx, callback) {\n    var sql = 'ALTER TABLE ' + DOC_STORE$1 +\n      ' ADD COLUMN max_seq INTEGER';\n    tx.executeSql(sql, [], function (tx) {\n      var sql = 'UPDATE ' + DOC_STORE$1 + ' SET max_seq=(SELECT MAX(seq) FROM ' +\n        BY_SEQ_STORE$1 + ' WHERE doc_id=id)';\n      tx.executeSql(sql, [], function (tx) {\n        // add unique index after filling, else we'll get a constraint\n        // error when we do the ALTER TABLE\n        var sql =\n          'CREATE UNIQUE INDEX IF NOT EXISTS \\'doc-max-seq-idx\\' ON ' +\n          DOC_STORE$1 + ' (max_seq)';\n        tx.executeSql(sql, [], callback);\n      });\n    });\n  }\n\n  function checkEncoding(tx, cb) {\n    // UTF-8 on chrome/android, UTF-16 on safari < 7.1\n    tx.executeSql('SELECT HEX(\"a\") AS hex', [], function (tx, res) {\n        var hex = res.rows.item(0).hex;\n        encoding = hex.length === 2 ? 'UTF-8' : 'UTF-16';\n        cb();\n      }\n    );\n  }\n\n  function onGetInstanceId() {\n    while (idRequests.length > 0) {\n      var idCallback = idRequests.pop();\n      idCallback(null, instanceId);\n    }\n  }\n\n  function onGetVersion(tx, dbVersion) {\n    if (dbVersion === 0) {\n      // initial schema\n\n      var meta = 'CREATE TABLE IF NOT EXISTS ' + META_STORE$1 +\n        ' (dbid, db_version INTEGER)';\n      var attach = 'CREATE TABLE IF NOT EXISTS ' + ATTACH_STORE$1 +\n        ' (digest UNIQUE, escaped TINYINT(1), body BLOB)';\n      var attachAndRev = 'CREATE TABLE IF NOT EXISTS ' +\n        ATTACH_AND_SEQ_STORE$1 + ' (digest, seq INTEGER)';\n      // TODO: migrate winningseq to INTEGER\n      var doc = 'CREATE TABLE IF NOT EXISTS ' + DOC_STORE$1 +\n        ' (id unique, json, winningseq, max_seq INTEGER UNIQUE)';\n      var seq = 'CREATE TABLE IF NOT EXISTS ' + BY_SEQ_STORE$1 +\n        ' (seq INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, ' +\n        'json, deleted TINYINT(1), doc_id, rev)';\n      var local = 'CREATE TABLE IF NOT EXISTS ' + LOCAL_STORE$1 +\n        ' (id UNIQUE, rev, json)';\n\n      // creates\n      tx.executeSql(attach);\n      tx.executeSql(local);\n      tx.executeSql(attachAndRev, [], function () {\n        tx.executeSql(ATTACH_AND_SEQ_STORE_SEQ_INDEX_SQL);\n        tx.executeSql(ATTACH_AND_SEQ_STORE_ATTACH_INDEX_SQL);\n      });\n      tx.executeSql(doc, [], function () {\n        tx.executeSql(DOC_STORE_WINNINGSEQ_INDEX_SQL);\n        tx.executeSql(seq, [], function () {\n          tx.executeSql(BY_SEQ_STORE_DELETED_INDEX_SQL);\n          tx.executeSql(BY_SEQ_STORE_DOC_ID_REV_INDEX_SQL);\n          tx.executeSql(meta, [], function () {\n            // mark the db version, and new dbid\n            var initSeq = 'INSERT INTO ' + META_STORE$1 +\n              ' (db_version, dbid) VALUES (?,?)';\n            instanceId = uuid();\n            var initSeqArgs = [ADAPTER_VERSION$1, instanceId];\n            tx.executeSql(initSeq, initSeqArgs, function () {\n              onGetInstanceId();\n            });\n          });\n        });\n      });\n    } else { // version > 0\n\n      var setupDone = function () {\n        var migrated = dbVersion < ADAPTER_VERSION$1;\n        if (migrated) {\n          // update the db version within this transaction\n          tx.executeSql('UPDATE ' + META_STORE$1 + ' SET db_version = ' +\n            ADAPTER_VERSION$1);\n        }\n        // notify db.id() callers\n        var sql = 'SELECT dbid FROM ' + META_STORE$1;\n        tx.executeSql(sql, [], function (tx, result) {\n          instanceId = result.rows.item(0).dbid;\n          onGetInstanceId();\n        });\n      };\n\n      // would love to use promises here, but then websql\n      // ends the transaction early\n      var tasks = [\n        runMigration2,\n        runMigration3,\n        runMigration4,\n        runMigration5,\n        runMigration6,\n        runMigration7,\n        setupDone\n      ];\n\n      // run each migration sequentially\n      var i = dbVersion;\n      var nextMigration = function (tx) {\n        tasks[i - 1](tx, nextMigration);\n        i++;\n      };\n      nextMigration(tx);\n    }\n  }\n\n  function setup() {\n    db.transaction(function (tx) {\n      // first check the encoding\n      checkEncoding(tx, function () {\n        // then get the version\n        fetchVersion(tx);\n      });\n    }, websqlError(callback), dbCreated);\n  }\n\n  function fetchVersion(tx) {\n    var sql = 'SELECT sql FROM sqlite_master WHERE tbl_name = ' + META_STORE$1;\n    tx.executeSql(sql, [], function (tx, result) {\n      if (!result.rows.length) {\n        // database hasn't even been created yet (version 0)\n        onGetVersion(tx, 0);\n      } else if (!/db_version/.test(result.rows.item(0).sql)) {\n        // table was created, but without the new db_version column,\n        // so add it.\n        tx.executeSql('ALTER TABLE ' + META_STORE$1 +\n          ' ADD COLUMN db_version INTEGER', [], function () {\n          // before version 2, this column didn't even exist\n          onGetVersion(tx, 1);\n        });\n      } else { // column exists, we can safely get it\n        tx.executeSql('SELECT db_version FROM ' + META_STORE$1,\n          [], function (tx, result) {\n          var dbVersion = result.rows.item(0).db_version;\n          onGetVersion(tx, dbVersion);\n        });\n      }\n    });\n  }\n\n  setup();\n\n  api.type = function () {\n    return 'websql';\n  };\n\n  api._id = toPromise(function (callback) {\n    callback(null, instanceId);\n  });\n\n  api._info = function (callback) {\n    db.readTransaction(function (tx) {\n      countDocs(tx, function (docCount) {\n        var sql = 'SELECT MAX(seq) AS seq FROM ' + BY_SEQ_STORE$1;\n        tx.executeSql(sql, [], function (tx, res) {\n          var updateSeq = res.rows.item(0).seq || 0;\n          callback(null, {\n            doc_count: docCount,\n            update_seq: updateSeq,\n            websql_encoding: encoding\n          });\n        });\n      });\n    }, websqlError(callback));\n  };\n\n  api._bulkDocs = function (req, reqOpts, callback) {\n    websqlBulkDocs(opts, req, reqOpts, api, db, websqlChanges, callback);\n  };\n\n  api._get = function (id, opts, callback) {\n    var doc;\n    var metadata;\n    var err;\n    var tx = opts.ctx;\n    if (!tx) {\n      return db.readTransaction(function (txn) {\n        api._get(id, jsExtend.extend({ctx: txn}, opts), callback);\n      });\n    }\n\n    function finish() {\n      callback(err, {doc: doc, metadata: metadata, ctx: tx});\n    }\n\n    var sql;\n    var sqlArgs;\n    if (opts.rev) {\n      sql = select(\n        SELECT_DOCS,\n        [DOC_STORE$1, BY_SEQ_STORE$1],\n        DOC_STORE$1 + '.id=' + BY_SEQ_STORE$1 + '.doc_id',\n        [BY_SEQ_STORE$1 + '.doc_id=?', BY_SEQ_STORE$1 + '.rev=?']);\n      sqlArgs = [id, opts.rev];\n    } else {\n      sql = select(\n        SELECT_DOCS,\n        [DOC_STORE$1, BY_SEQ_STORE$1],\n        DOC_STORE_AND_BY_SEQ_JOINER,\n        DOC_STORE$1 + '.id=?');\n      sqlArgs = [id];\n    }\n    tx.executeSql(sql, sqlArgs, function (a, results) {\n      if (!results.rows.length) {\n        err = createError(MISSING_DOC, 'missing');\n        return finish();\n      }\n      var item = results.rows.item(0);\n      metadata = safeJsonParse(item.metadata);\n      if (item.deleted && !opts.rev) {\n        err = createError(MISSING_DOC, 'deleted');\n        return finish();\n      }\n      doc = unstringifyDoc(item.data, metadata.id, item.rev);\n      finish();\n    });\n  };\n\n  function countDocs(tx, callback) {\n\n    if (api._docCount !== -1) {\n      return callback(api._docCount);\n    }\n\n    // count the total rows\n    var sql = select(\n      'COUNT(' + DOC_STORE$1 + '.id) AS \\'num\\'',\n      [DOC_STORE$1, BY_SEQ_STORE$1],\n      DOC_STORE_AND_BY_SEQ_JOINER,\n      BY_SEQ_STORE$1 + '.deleted=0');\n\n    tx.executeSql(sql, [], function (tx, result) {\n      api._docCount = result.rows.item(0).num;\n      callback(api._docCount);\n    });\n  }\n\n  api._allDocs = function (opts, callback) {\n    var results = [];\n    var totalRows;\n\n    var start = 'startkey' in opts ? opts.startkey : false;\n    var end = 'endkey' in opts ? opts.endkey : false;\n    var key = 'key' in opts ? opts.key : false;\n    var descending = 'descending' in opts ? opts.descending : false;\n    var limit = 'limit' in opts ? opts.limit : -1;\n    var offset = 'skip' in opts ? opts.skip : 0;\n    var inclusiveEnd = opts.inclusive_end !== false;\n\n    var sqlArgs = [];\n    var criteria = [];\n\n    if (key !== false) {\n      criteria.push(DOC_STORE$1 + '.id = ?');\n      sqlArgs.push(key);\n    } else if (start !== false || end !== false) {\n      if (start !== false) {\n        criteria.push(DOC_STORE$1 + '.id ' + (descending ? '<=' : '>=') + ' ?');\n        sqlArgs.push(start);\n      }\n      if (end !== false) {\n        var comparator = descending ? '>' : '<';\n        if (inclusiveEnd) {\n          comparator += '=';\n        }\n        criteria.push(DOC_STORE$1 + '.id ' + comparator + ' ?');\n        sqlArgs.push(end);\n      }\n      if (key !== false) {\n        criteria.push(DOC_STORE$1 + '.id = ?');\n        sqlArgs.push(key);\n      }\n    }\n\n    if (opts.deleted !== 'ok') {\n      // report deleted if keys are specified\n      criteria.push(BY_SEQ_STORE$1 + '.deleted = 0');\n    }\n\n    db.readTransaction(function (tx) {\n\n      // first count up the total rows\n      countDocs(tx, function (count) {\n        totalRows = count;\n\n        if (limit === 0) {\n          return;\n        }\n\n        // then actually fetch the documents\n        var sql = select(\n          SELECT_DOCS,\n          [DOC_STORE$1, BY_SEQ_STORE$1],\n          DOC_STORE_AND_BY_SEQ_JOINER,\n          criteria,\n          DOC_STORE$1 + '.id ' + (descending ? 'DESC' : 'ASC')\n          );\n        sql += ' LIMIT ' + limit + ' OFFSET ' + offset;\n\n        tx.executeSql(sql, sqlArgs, function (tx, result) {\n          for (var i = 0, l = result.rows.length; i < l; i++) {\n            var item = result.rows.item(i);\n            var metadata = safeJsonParse(item.metadata);\n            var id = metadata.id;\n            var data = unstringifyDoc(item.data, id, item.rev);\n            var winningRev = data._rev;\n            var doc = {\n              id: id,\n              key: id,\n              value: {rev: winningRev}\n            };\n            if (opts.include_docs) {\n              doc.doc = data;\n              doc.doc._rev = winningRev;\n              if (opts.conflicts) {\n                doc.doc._conflicts = collectConflicts(metadata);\n              }\n              fetchAttachmentsIfNecessary$1(doc.doc, opts, api, tx);\n            }\n            if (item.deleted) {\n              if (opts.deleted === 'ok') {\n                doc.value.deleted = true;\n                doc.doc = null;\n              } else {\n                continue;\n              }\n            }\n            results.push(doc);\n          }\n        });\n      });\n    }, websqlError(callback), function () {\n      callback(null, {\n        total_rows: totalRows,\n        offset: opts.skip,\n        rows: results\n      });\n    });\n  };\n\n  api._changes = function (opts) {\n    opts = clone(opts);\n\n    if (opts.continuous) {\n      var id = api._name + ':' + uuid();\n      websqlChanges.addListener(api._name, id, api, opts);\n      websqlChanges.notify(api._name);\n      return {\n        cancel: function () {\n          websqlChanges.removeListener(api._name, id);\n        }\n      };\n    }\n\n    var descending = opts.descending;\n\n    // Ignore the `since` parameter when `descending` is true\n    opts.since = opts.since && !descending ? opts.since : 0;\n\n    var limit = 'limit' in opts ? opts.limit : -1;\n    if (limit === 0) {\n      limit = 1; // per CouchDB _changes spec\n    }\n\n    var returnDocs;\n    if ('return_docs' in opts) {\n      returnDocs = opts.return_docs;\n    } else if ('returnDocs' in opts) {\n      // TODO: Remove 'returnDocs' in favor of 'return_docs' in a future release\n      returnDocs = opts.returnDocs;\n    } else {\n      returnDocs = true;\n    }\n    var results = [];\n    var numResults = 0;\n\n    function fetchChanges() {\n\n      var selectStmt =\n        DOC_STORE$1 + '.json AS metadata, ' +\n        DOC_STORE$1 + '.max_seq AS maxSeq, ' +\n        BY_SEQ_STORE$1 + '.json AS winningDoc, ' +\n        BY_SEQ_STORE$1 + '.rev AS winningRev ';\n\n      var from = DOC_STORE$1 + ' JOIN ' + BY_SEQ_STORE$1;\n\n      var joiner = DOC_STORE$1 + '.id=' + BY_SEQ_STORE$1 + '.doc_id' +\n        ' AND ' + DOC_STORE$1 + '.winningseq=' + BY_SEQ_STORE$1 + '.seq';\n\n      var criteria = ['maxSeq > ?'];\n      var sqlArgs = [opts.since];\n\n      if (opts.doc_ids) {\n        criteria.push(DOC_STORE$1 + '.id IN ' + qMarks(opts.doc_ids.length));\n        sqlArgs = sqlArgs.concat(opts.doc_ids);\n      }\n\n      var orderBy = 'maxSeq ' + (descending ? 'DESC' : 'ASC');\n\n      var sql = select(selectStmt, from, joiner, criteria, orderBy);\n\n      var filter = filterChange(opts);\n      if (!opts.view && !opts.filter) {\n        // we can just limit in the query\n        sql += ' LIMIT ' + limit;\n      }\n\n      var lastSeq = opts.since || 0;\n      db.readTransaction(function (tx) {\n        tx.executeSql(sql, sqlArgs, function (tx, result) {\n          function reportChange(change) {\n            return function () {\n              opts.onChange(change);\n            };\n          }\n          for (var i = 0, l = result.rows.length; i < l; i++) {\n            var item = result.rows.item(i);\n            var metadata = safeJsonParse(item.metadata);\n            lastSeq = item.maxSeq;\n\n            var doc = unstringifyDoc(item.winningDoc, metadata.id,\n              item.winningRev);\n            var change = opts.processChange(doc, metadata, opts);\n            change.seq = item.maxSeq;\n\n            var filtered = filter(change);\n            if (typeof filtered === 'object') {\n              return opts.complete(filtered);\n            }\n\n            if (filtered) {\n              numResults++;\n              if (returnDocs) {\n                results.push(change);\n              }\n              // process the attachment immediately\n              // for the benefit of live listeners\n              if (opts.attachments && opts.include_docs) {\n                fetchAttachmentsIfNecessary$1(doc, opts, api, tx,\n                  reportChange(change));\n              } else {\n                reportChange(change)();\n              }\n            }\n            if (numResults === limit) {\n              break;\n            }\n          }\n        });\n      }, websqlError(opts.complete), function () {\n        if (!opts.continuous) {\n          opts.complete(null, {\n            results: results,\n            last_seq: lastSeq\n          });\n        }\n      });\n    }\n\n    fetchChanges();\n  };\n\n  api._close = function (callback) {\n    //WebSQL databases do not need to be closed\n    callback();\n  };\n\n  api._getAttachment = function (docId, attachId, attachment, opts, callback) {\n    var res;\n    var tx = opts.ctx;\n    var digest = attachment.digest;\n    var type = attachment.content_type;\n    var sql = 'SELECT escaped, ' +\n      'CASE WHEN escaped = 1 THEN body ELSE HEX(body) END AS body FROM ' +\n      ATTACH_STORE$1 + ' WHERE digest=?';\n    tx.executeSql(sql, [digest], function (tx, result) {\n      // websql has a bug where \\u0000 causes early truncation in strings\n      // and blobs. to work around this, we used to use the hex() function,\n      // but that's not performant. after migration 6, we remove \\u0000\n      // and add it back in afterwards\n      var item = result.rows.item(0);\n      var data = item.escaped ? unescapeBlob(item.body) :\n        parseHexString(item.body, encoding);\n      if (opts.binary) {\n        res = binStringToBluffer(data, type);\n      } else {\n        res = btoa$1(data);\n      }\n      callback(null, res);\n    });\n  };\n\n  api._getRevisionTree = function (docId, callback) {\n    db.readTransaction(function (tx) {\n      var sql = 'SELECT json AS metadata FROM ' + DOC_STORE$1 + ' WHERE id = ?';\n      tx.executeSql(sql, [docId], function (tx, result) {\n        if (!result.rows.length) {\n          callback(createError(MISSING_DOC));\n        } else {\n          var data = safeJsonParse(result.rows.item(0).metadata);\n          callback(null, data.rev_tree);\n        }\n      });\n    });\n  };\n\n  api._doCompaction = function (docId, revs, callback) {\n    if (!revs.length) {\n      return callback();\n    }\n    db.transaction(function (tx) {\n\n      // update doc store\n      var sql = 'SELECT json AS metadata FROM ' + DOC_STORE$1 + ' WHERE id = ?';\n      tx.executeSql(sql, [docId], function (tx, result) {\n        var metadata = safeJsonParse(result.rows.item(0).metadata);\n        traverseRevTree(metadata.rev_tree, function (isLeaf, pos,\n                                                           revHash, ctx, opts) {\n          var rev = pos + '-' + revHash;\n          if (revs.indexOf(rev) !== -1) {\n            opts.status = 'missing';\n          }\n        });\n\n        var sql = 'UPDATE ' + DOC_STORE$1 + ' SET json = ? WHERE id = ?';\n        tx.executeSql(sql, [safeJsonStringify(metadata), docId]);\n      });\n\n      compactRevs$1(revs, docId, tx);\n    }, websqlError(callback), function () {\n      callback();\n    });\n  };\n\n  api._getLocal = function (id, callback) {\n    db.readTransaction(function (tx) {\n      var sql = 'SELECT json, rev FROM ' + LOCAL_STORE$1 + ' WHERE id=?';\n      tx.executeSql(sql, [id], function (tx, res) {\n        if (res.rows.length) {\n          var item = res.rows.item(0);\n          var doc = unstringifyDoc(item.json, id, item.rev);\n          callback(null, doc);\n        } else {\n          callback(createError(MISSING_DOC));\n        }\n      });\n    });\n  };\n\n  api._putLocal = function (doc, opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    delete doc._revisions; // ignore this, trust the rev\n    var oldRev = doc._rev;\n    var id = doc._id;\n    var newRev;\n    if (!oldRev) {\n      newRev = doc._rev = '0-1';\n    } else {\n      newRev = doc._rev = '0-' + (parseInt(oldRev.split('-')[1], 10) + 1);\n    }\n    var json = stringifyDoc(doc);\n\n    var ret;\n    function putLocal(tx) {\n      var sql;\n      var values;\n      if (oldRev) {\n        sql = 'UPDATE ' + LOCAL_STORE$1 + ' SET rev=?, json=? ' +\n          'WHERE id=? AND rev=?';\n        values = [newRev, json, id, oldRev];\n      } else {\n        sql = 'INSERT INTO ' + LOCAL_STORE$1 + ' (id, rev, json) VALUES (?,?,?)';\n        values = [id, newRev, json];\n      }\n      tx.executeSql(sql, values, function (tx, res) {\n        if (res.rowsAffected) {\n          ret = {ok: true, id: id, rev: newRev};\n          if (opts.ctx) { // return immediately\n            callback(null, ret);\n          }\n        } else {\n          callback(createError(REV_CONFLICT));\n        }\n      }, function () {\n        callback(createError(REV_CONFLICT));\n        return false; // ack that we handled the error\n      });\n    }\n\n    if (opts.ctx) {\n      putLocal(opts.ctx);\n    } else {\n      db.transaction(putLocal, websqlError(callback), function () {\n        if (ret) {\n          callback(null, ret);\n        }\n      });\n    }\n  };\n\n  api._removeLocal = function (doc, opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    var ret;\n\n    function removeLocal(tx) {\n      var sql = 'DELETE FROM ' + LOCAL_STORE$1 + ' WHERE id=? AND rev=?';\n      var params = [doc._id, doc._rev];\n      tx.executeSql(sql, params, function (tx, res) {\n        if (!res.rowsAffected) {\n          return callback(createError(MISSING_DOC));\n        }\n        ret = {ok: true, id: doc._id, rev: '0-0'};\n        if (opts.ctx) { // return immediately\n          callback(null, ret);\n        }\n      });\n    }\n\n    if (opts.ctx) {\n      removeLocal(opts.ctx);\n    } else {\n      db.transaction(removeLocal, websqlError(callback), function () {\n        if (ret) {\n          callback(null, ret);\n        }\n      });\n    }\n  };\n\n  api._destroy = function (opts, callback) {\n    websqlChanges.removeAllListeners(api._name);\n    db.transaction(function (tx) {\n      var stores = [DOC_STORE$1, BY_SEQ_STORE$1, ATTACH_STORE$1, META_STORE$1,\n        LOCAL_STORE$1, ATTACH_AND_SEQ_STORE$1];\n      stores.forEach(function (store) {\n        tx.executeSql('DROP TABLE IF EXISTS ' + store, []);\n      });\n    }, websqlError(callback), function () {\n      if (hasLocalStorage()) {\n        delete window.localStorage['_pouch__websqldb_' + api._name];\n        delete window.localStorage[api._name];\n      }\n      callback(null, {'ok': true});\n    });\n  };\n}\n\nfunction canOpenTestDB() {\n  try {\n    openDatabase('_pouch_validate_websql', 1, '', 1);\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\n// WKWebView had a bug where WebSQL would throw a DOM Exception 18\n// (see https://bugs.webkit.org/show_bug.cgi?id=137760 and\n// https://github.com/pouchdb/pouchdb/issues/5079)\n// This has been fixed in latest WebKit, so we try to detect it here.\nfunction isValidWebSQL() {\n  // WKWebView UA:\n  //   Mozilla/5.0 (iPhone; CPU iPhone OS 9_2 like Mac OS X)\n  //   AppleWebKit/601.1.46 (KHTML, like Gecko) Mobile/13C75\n  // Chrome for iOS UA:\n  //   Mozilla/5.0 (iPhone; U; CPU iPhone OS 5_1_1 like Mac OS X; en)\n  //   AppleWebKit/534.46.0 (KHTML, like Gecko) CriOS/19.0.1084.60\n  //   Mobile/9B206 Safari/7534.48.3\n  // Firefox for iOS UA:\n  //   Mozilla/5.0 (iPhone; CPU iPhone OS 8_3 like Mac OS X) AppleWebKit/600.1.4\n  //   (KHTML, like Gecko) FxiOS/1.0 Mobile/12F69 Safari/600.1.4\n\n  // indexedDB is null on some UIWebViews and undefined in others\n  // see: https://bugs.webkit.org/show_bug.cgi?id=137034\n  if (typeof indexedDB === 'undefined' || indexedDB === null ||\n      !/iP(hone|od|ad)/.test(navigator.userAgent)) {\n    // definitely not WKWebView, avoid creating an unnecessary database\n    return true;\n  }\n  // Cache the result in LocalStorage. Reason we do this is because if we\n  // call openDatabase() too many times, Safari craps out in SauceLabs and\n  // starts throwing DOM Exception 14s.\n  var hasLS = hasLocalStorage();\n  // Include user agent in the hash, so that if Safari is upgraded, we don't\n  // continually think it's broken.\n  var localStorageKey = '_pouch__websqldb_valid_' + navigator.userAgent;\n  if (hasLS && localStorage[localStorageKey]) {\n    return localStorage[localStorageKey] === '1';\n  }\n  var openedTestDB = canOpenTestDB();\n  if (hasLS) {\n    localStorage[localStorageKey] = openedTestDB ? '1' : '0';\n  }\n  return openedTestDB;\n}\n\nfunction valid() {\n  if (typeof openDatabase !== 'function') {\n    return false;\n  }\n  return isValidWebSQL();\n}\n\nfunction openDB(name, version, description, size) {\n  // Traditional WebSQL API\n  return openDatabase(name, version, description, size);\n}\n\nfunction WebSQLPouch(opts, callback) {\n  var _opts = jsExtend.extend({\n    websql: openDB\n  }, opts);\n\n  WebSqlPouch$1.call(this, _opts, callback);\n}\n\nWebSQLPouch.valid = valid;\n\nWebSQLPouch.use_prefix = true;\n\nfunction WebSqlPouch (PouchDB) {\n  PouchDB.adapter('websql', WebSQLPouch, true);\n}\n\n/* global fetch */\n/* global Headers */\nfunction wrappedFetch() {\n  var wrappedPromise = {};\n\n  var promise = new PouchPromise(function (resolve, reject) {\n    wrappedPromise.resolve = resolve;\n    wrappedPromise.reject = reject;\n  });\n\n  var args = new Array(arguments.length);\n\n  for (var i = 0; i < args.length; i++) {\n    args[i] = arguments[i];\n  }\n\n  wrappedPromise.promise = promise;\n\n  PouchPromise.resolve().then(function () {\n    return fetch.apply(null, args);\n  }).then(function (response) {\n    wrappedPromise.resolve(response);\n  }).catch(function (error) {\n    wrappedPromise.reject(error);\n  });\n\n  return wrappedPromise;\n}\n\nfunction fetchRequest(options, callback) {\n  var wrappedPromise, timer, response;\n\n  var headers = new Headers();\n\n  var fetchOptions = {\n    method: options.method,\n    credentials: 'include',\n    headers: headers\n  };\n\n  if (options.json) {\n    headers.set('Accept', 'application/json');\n    headers.set('Content-Type', options.headers['Content-Type'] ||\n      'application/json');\n  }\n\n  if (options.body && (options.body instanceof Blob)) {\n    readAsArrayBuffer(options.body, function (arrayBuffer) {\n      fetchOptions.body = arrayBuffer;\n    });\n  } else if (options.body &&\n             options.processData &&\n             typeof options.body !== 'string') {\n    fetchOptions.body = JSON.stringify(options.body);\n  } else if ('body' in options) {\n    fetchOptions.body = options.body;\n  } else {\n    fetchOptions.body = null;\n  }\n\n  Object.keys(options.headers).forEach(function (key) {\n    if (options.headers.hasOwnProperty(key)) {\n      headers.set(key, options.headers[key]);\n    }\n  });\n\n  wrappedPromise = wrappedFetch(options.url, fetchOptions);\n\n  if (options.timeout > 0) {\n    timer = setTimeout(function () {\n      wrappedPromise.reject(new Error('Load timeout for resource: ' +\n        options.url));\n    }, options.timeout);\n  }\n\n  wrappedPromise.promise.then(function (fetchResponse) {\n    response = {\n      statusCode: fetchResponse.status\n    };\n\n    if (options.timeout > 0) {\n      clearTimeout(timer);\n    }\n\n    if (response.statusCode >= 200 && response.statusCode < 300) {\n      return options.binary ? fetchResponse.blob() : fetchResponse.text();\n    }\n\n    return fetchResponse.json();\n  }).then(function (result) {\n    if (response.statusCode >= 200 && response.statusCode < 300) {\n      callback(null, response, result);\n    } else {\n      callback(result, response);\n    }\n  }).catch(function (error) {\n    callback(error, response);\n  });\n\n  return {abort: wrappedPromise.reject};\n}\n\nfunction xhRequest(options, callback) {\n\n  var xhr, timer;\n  var timedout = false;\n\n  var abortReq = function () {\n    xhr.abort();\n    cleanUp();\n  };\n\n  var timeoutReq = function () {\n    timedout = true;\n    xhr.abort();\n    cleanUp();\n  };\n\n  var ret = {abort: abortReq};\n\n  var cleanUp = function () {\n    clearTimeout(timer);\n    ret.abort = function () {};\n    if (xhr) {\n      xhr.onprogress = undefined;\n      if (xhr.upload) {\n        xhr.upload.onprogress = undefined;\n      }\n      xhr.onreadystatechange = undefined;\n      xhr = undefined;\n    }\n  };\n\n  if (options.xhr) {\n    xhr = new options.xhr();\n  } else {\n    xhr = new XMLHttpRequest();\n  }\n\n  try {\n    xhr.open(options.method, options.url);\n  } catch (exception) {\n    return callback(new Error(exception.name || 'Url is invalid'));\n  }\n\n  xhr.withCredentials = ('withCredentials' in options) ?\n    options.withCredentials : true;\n\n  if (options.method === 'GET') {\n    delete options.headers['Content-Type'];\n  } else if (options.json) {\n    options.headers.Accept = 'application/json';\n    options.headers['Content-Type'] = options.headers['Content-Type'] ||\n      'application/json';\n    if (options.body &&\n        options.processData &&\n        typeof options.body !== \"string\") {\n      options.body = JSON.stringify(options.body);\n    }\n  }\n\n  if (options.binary) {\n    xhr.responseType = 'arraybuffer';\n  }\n\n  if (!('body' in options)) {\n    options.body = null;\n  }\n\n  for (var key in options.headers) {\n    if (options.headers.hasOwnProperty(key)) {\n      xhr.setRequestHeader(key, options.headers[key]);\n    }\n  }\n\n  if (options.timeout > 0) {\n    timer = setTimeout(timeoutReq, options.timeout);\n    xhr.onprogress = function () {\n      clearTimeout(timer);\n      if(xhr.readyState !== 4) {\n        timer = setTimeout(timeoutReq, options.timeout);\n      }\n    };\n    if (typeof xhr.upload !== 'undefined') { // does not exist in ie9\n      xhr.upload.onprogress = xhr.onprogress;\n    }\n  }\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState !== 4) {\n      return;\n    }\n\n    var response = {\n      statusCode: xhr.status\n    };\n\n    if (xhr.status >= 200 && xhr.status < 300) {\n      var data;\n      if (options.binary) {\n        data = createBlob([xhr.response || ''], {\n          type: xhr.getResponseHeader('Content-Type')\n        });\n      } else {\n        data = xhr.responseText;\n      }\n      callback(null, response, data);\n    } else {\n      var err = {};\n      if (timedout) {\n        err = new Error('ETIMEDOUT');\n        err.code = 'ETIMEDOUT';\n      } else if (typeof xhr.response === 'string') {\n        try {\n          err = JSON.parse(xhr.response);\n        } catch(e) {}\n      }\n      err.status = xhr.status;\n      callback(err);\n    }\n    cleanUp();\n  };\n\n  if (options.body && (options.body instanceof Blob)) {\n    readAsArrayBuffer(options.body, function (arrayBuffer) {\n      xhr.send(arrayBuffer);\n    });\n  } else {\n    xhr.send(options.body);\n  }\n\n  return ret;\n}\n\nfunction testXhr() {\n  try {\n    new XMLHttpRequest();\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\nvar hasXhr = testXhr();\n\nfunction ajax$1(options, callback) {\n  if (hasXhr || options.xhr) {\n    return xhRequest(options, callback);\n  } else {\n    return fetchRequest(options, callback);\n  }\n}\n\n// the blob already has a type; do nothing\nvar res$2 = function () {};\n\nfunction defaultBody() {\n  return '';\n}\n\nfunction ajaxCore(options, callback) {\n\n  options = clone(options);\n\n  var defaultOptions = {\n    method : \"GET\",\n    headers: {},\n    json: true,\n    processData: true,\n    timeout: 10000,\n    cache: false\n  };\n\n  options = jsExtend.extend(defaultOptions, options);\n\n  function onSuccess(obj, resp, cb) {\n    if (!options.binary && options.json && typeof obj === 'string') {\n      /* istanbul ignore next */\n      try {\n        obj = JSON.parse(obj);\n      } catch (e) {\n        // Probably a malformed JSON from server\n        return cb(e);\n      }\n    }\n    if (Array.isArray(obj)) {\n      obj = obj.map(function (v) {\n        if (v.error || v.missing) {\n          return generateErrorFromResponse(v);\n        } else {\n          return v;\n        }\n      });\n    }\n    if (options.binary) {\n      res$2(obj, resp);\n    }\n    cb(null, obj, resp);\n  }\n\n  if (options.json) {\n    if (!options.binary) {\n      options.headers.Accept = 'application/json';\n    }\n    options.headers['Content-Type'] = options.headers['Content-Type'] ||\n      'application/json';\n  }\n\n  if (options.binary) {\n    options.encoding = null;\n    options.json = false;\n  }\n\n  if (!options.processData) {\n    options.json = false;\n  }\n\n  return ajax$1(options, function (err, response, body) {\n\n    if (err) {\n      return callback(generateErrorFromResponse(err));\n    }\n\n    var error;\n    var content_type = response.headers && response.headers['content-type'];\n    var data = body || defaultBody();\n\n    // CouchDB doesn't always return the right content-type for JSON data, so\n    // we check for ^{ and }$ (ignoring leading/trailing whitespace)\n    if (!options.binary && (options.json || !options.processData) &&\n        typeof data !== 'object' &&\n        (/json/.test(content_type) ||\n         (/^[\\s]*\\{/.test(data) && /\\}[\\s]*$/.test(data)))) {\n      try {\n        data = JSON.parse(data.toString());\n      } catch (e) {}\n    }\n\n    if (response.statusCode >= 200 && response.statusCode < 300) {\n      onSuccess(data, response, callback);\n    } else {\n      error = generateErrorFromResponse(data);\n      error.status = response.statusCode;\n      callback(error);\n    }\n  });\n}\n\nfunction ajax(opts, callback) {\n\n  // cache-buster, specifically designed to work around IE's aggressive caching\n  // see http://www.dashbay.com/2011/05/internet-explorer-caches-ajax/\n  // Also Safari caches POSTs, so we need to cache-bust those too.\n  var ua = (navigator && navigator.userAgent) ?\n    navigator.userAgent.toLowerCase() : '';\n\n  var isSafari = ua.indexOf('safari') !== -1 && ua.indexOf('chrome') === -1;\n  var isIE = ua.indexOf('msie') !== -1;\n  var isEdge = ua.indexOf('edge') !== -1;\n\n  // it appears the new version of safari also caches GETs,\n  // see https://github.com/pouchdb/pouchdb/issues/5010\n  var shouldCacheBust = (isSafari ||\n    ((isIE || isEdge) && opts.method === 'GET'));\n\n  var cache = 'cache' in opts ? opts.cache : true;\n\n  var isBlobUrl = /^blob:/.test(opts.url); // don't append nonces for blob URLs\n\n  if (!isBlobUrl && (shouldCacheBust || !cache)) {\n    var hasArgs = opts.url.indexOf('?') !== -1;\n    opts.url += (hasArgs ? '&' : '?') + '_nonce=' + Date.now();\n  }\n\n  return ajaxCore(opts, callback);\n}\n\nvar CHANGES_BATCH_SIZE = 25;\nvar MAX_SIMULTANEOUS_REVS = 50;\n\nvar supportsBulkGetMap = {};\n\nvar log$1 = debug('pouchdb:http');\n\nfunction readAttachmentsAsBlobOrBuffer(row) {\n  var atts = row.doc && row.doc._attachments;\n  if (!atts) {\n    return;\n  }\n  Object.keys(atts).forEach(function (filename) {\n    var att = atts[filename];\n    att.data = b64ToBluffer(att.data, att.content_type);\n  });\n}\n\nfunction encodeDocId(id) {\n  if (/^_design/.test(id)) {\n    return '_design/' + encodeURIComponent(id.slice(8));\n  }\n  if (/^_local/.test(id)) {\n    return '_local/' + encodeURIComponent(id.slice(7));\n  }\n  return encodeURIComponent(id);\n}\n\nfunction preprocessAttachments$1(doc) {\n  if (!doc._attachments || !Object.keys(doc._attachments)) {\n    return PouchPromise.resolve();\n  }\n\n  return PouchPromise.all(Object.keys(doc._attachments).map(function (key) {\n    var attachment = doc._attachments[key];\n    if (attachment.data && typeof attachment.data !== 'string') {\n      return new PouchPromise(function (resolve) {\n        blobToBase64(attachment.data, resolve);\n      }).then(function (b64) {\n        attachment.data = b64;\n      });\n    }\n  }));\n}\n\nfunction hasUrlPrefix(opts) {\n  if (!opts.prefix) {\n    return false;\n  }\n\n  var protocol = parseUri(opts.prefix).protocol;\n\n  return protocol === 'http' || protocol === 'https';\n}\n\n// Get all the information you possibly can about the URI given by name and\n// return it as a suitable object.\nfunction getHost(name, opts) {\n\n  // encode db name if opts.prefix is a url (#5574)\n  if (hasUrlPrefix(opts)) {\n    var dbName = opts.name.substr(opts.prefix.length);\n    name = opts.prefix + encodeURIComponent(dbName);\n  }\n\n  // Prase the URI into all its little bits\n  var uri = parseUri(name);\n\n  // Store the user and password as a separate auth object\n  if (uri.user || uri.password) {\n    uri.auth = {username: uri.user, password: uri.password};\n  }\n\n  // Split the path part of the URI into parts using '/' as the delimiter\n  // after removing any leading '/' and any trailing '/'\n  var parts = uri.path.replace(/(^\\/|\\/$)/g, '').split('/');\n\n  // Store the first part as the database name and remove it from the parts\n  // array\n  uri.db = parts.pop();\n  // Prevent double encoding of URI component\n  if (uri.db.indexOf('%') === -1) {\n    uri.db = encodeURIComponent(uri.db);\n  }\n\n  // Restore the path by joining all the remaining parts (all the parts\n  // except for the database name) with '/'s\n  uri.path = parts.join('/');\n\n  return uri;\n}\n\n// Generate a URL with the host data given by opts and the given path\nfunction genDBUrl(opts, path) {\n  return genUrl(opts, opts.db + '/' + path);\n}\n\n// Generate a URL with the host data given by opts and the given path\nfunction genUrl(opts, path) {\n  // If the host already has a path, then we need to have a path delimiter\n  // Otherwise, the path delimiter is the empty string\n  var pathDel = !opts.path ? '' : '/';\n\n  // If the host already has a path, then we need to have a path delimiter\n  // Otherwise, the path delimiter is the empty string\n  return opts.protocol + '://' + opts.host +\n         (opts.port ? (':' + opts.port) : '') +\n         '/' + opts.path + pathDel + path;\n}\n\nfunction paramsToStr(params) {\n  return '?' + Object.keys(params).map(function (k) {\n    return k + '=' + encodeURIComponent(params[k]);\n  }).join('&');\n}\n\n// Implements the PouchDB API for dealing with CouchDB instances over HTTP\nfunction HttpPouch(opts, callback) {\n\n  // The functions that will be publicly available for HttpPouch\n  var api = this;\n\n  var host = getHost(opts.name, opts);\n  var dbUrl = genDBUrl(host, '');\n\n  opts = clone(opts);\n  var ajaxOpts = opts.ajax || {};\n\n  if (opts.auth || host.auth) {\n    var nAuth = opts.auth || host.auth;\n    var str = nAuth.username + ':' + nAuth.password;\n    var token = btoa$1(unescape(encodeURIComponent(str)));\n    ajaxOpts.headers = ajaxOpts.headers || {};\n    ajaxOpts.headers.Authorization = 'Basic ' + token;\n  }\n\n  // Not strictly necessary, but we do this because numerous tests\n  // rely on swapping ajax in and out.\n  api._ajax = ajax;\n\n  function ajax$$(userOpts, options, callback) {\n    var reqAjax = userOpts.ajax || {};\n    var reqOpts = jsExtend.extend(clone(ajaxOpts), reqAjax, options);\n    log$1(reqOpts.method + ' ' + reqOpts.url);\n    return api._ajax(reqOpts, callback);\n  }\n\n  function ajaxPromise(userOpts, opts) {\n    return new PouchPromise(function (resolve, reject) {\n      ajax$$(userOpts, opts, function (err, res) {\n        /* istanbul ignore if */\n        if (err) {\n          return reject(err);\n        }\n        resolve(res);\n      });\n    });\n  }\n\n  function adapterFun$$(name, fun) {\n    return adapterFun(name, getArguments(function (args) {\n      setup().then(function () {\n        return fun.apply(this, args);\n      }).catch(function (e) {\n        var callback = args.pop();\n        callback(e);\n      });\n    }));\n  }\n\n  var setupPromise;\n\n  function setup() {\n    // TODO: Remove `skipSetup` in favor of `skip_setup` in a future release\n    if (opts.skipSetup || opts.skip_setup) {\n      return PouchPromise.resolve();\n    }\n\n    // If there is a setup in process or previous successful setup\n    // done then we will use that\n    // If previous setups have been rejected we will try again\n    if (setupPromise) {\n      return setupPromise;\n    }\n\n    var checkExists = {method: 'GET', url: dbUrl};\n    setupPromise = ajaxPromise({}, checkExists).catch(function (err) {\n      if (err && err.status && err.status === 404) {\n        // Doesnt exist, create it\n        explainError(404, 'PouchDB is just detecting if the remote exists.');\n        return ajaxPromise({}, {method: 'PUT', url: dbUrl});\n      } else {\n        return PouchPromise.reject(err);\n      }\n    }).catch(function (err) {\n      // If we try to create a database that already exists, skipped in\n      // istanbul since its catching a race condition.\n      /* istanbul ignore if */\n      if (err && err.status && err.status === 412) {\n        return true;\n      }\n      return PouchPromise.reject(err);\n    });\n\n    setupPromise.catch(function () {\n      setupPromise = null;\n    });\n\n    return setupPromise;\n  }\n\n  setTimeout(function () {\n    callback(null, api);\n  });\n\n  api.type = function () {\n    return 'http';\n  };\n\n  api.id = adapterFun$$('id', function (callback) {\n    ajax$$({}, {method: 'GET', url: genUrl(host, '')}, function (err, result) {\n      var uuid = (result && result.uuid) ?\n        (result.uuid + host.db) : genDBUrl(host, '');\n      callback(null, uuid);\n    });\n  });\n\n  api.request = adapterFun$$('request', function (options, callback) {\n    options.url = genDBUrl(host, options.url);\n    ajax$$({}, options, callback);\n  });\n\n  // Sends a POST request to the host calling the couchdb _compact function\n  //    version: The version of CouchDB it is running\n  api.compact = adapterFun$$('compact', function (opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    opts = clone(opts);\n    ajax$$(opts, {\n      url: genDBUrl(host, '_compact'),\n      method: 'POST'\n    }, function () {\n      function ping() {\n        api.info(function (err, res) {\n          if (res && !res.compact_running) {\n            callback(null, {ok: true});\n          } else {\n            setTimeout(ping, opts.interval || 200);\n          }\n        });\n      }\n      // Ping the http if it's finished compaction\n      ping();\n    });\n  });\n\n  api.bulkGet = adapterFun('bulkGet', function (opts, callback) {\n    var self = this;\n\n    function doBulkGet(cb) {\n      var params = {};\n      if (opts.revs) {\n        params.revs = true;\n      }\n      if (opts.attachments) {\n        /* istanbul ignore next */\n        params.attachments = true;\n      }\n      ajax$$({}, {\n        url: genDBUrl(host, '_bulk_get' + paramsToStr(params)),\n        method: 'POST',\n        body: { docs: opts.docs}\n      }, cb);\n    }\n\n    function doBulkGetShim() {\n      // avoid \"url too long error\" by splitting up into multiple requests\n      var batchSize = MAX_SIMULTANEOUS_REVS;\n      var numBatches = Math.ceil(opts.docs.length / batchSize);\n      var numDone = 0;\n      var results = new Array(numBatches);\n\n      function onResult(batchNum) {\n        return function (err, res) {\n          // err is impossible because shim returns a list of errs in that case\n          results[batchNum] = res.results;\n          if (++numDone === numBatches) {\n            callback(null, {results: flatten(results)});\n          }\n        };\n      }\n\n      for (var i = 0; i < numBatches; i++) {\n        var subOpts = pick(opts, ['revs', 'attachments']);\n        subOpts.ajax = ajaxOpts;\n        subOpts.docs = opts.docs.slice(i * batchSize,\n          Math.min(opts.docs.length, (i + 1) * batchSize));\n        bulkGet(self, subOpts, onResult(i));\n      }\n    }\n\n    // mark the whole database as either supporting or not supporting _bulk_get\n    var dbUrl = genUrl(host, '');\n    var supportsBulkGet = supportsBulkGetMap[dbUrl];\n\n    if (typeof supportsBulkGet !== 'boolean') {\n      // check if this database supports _bulk_get\n      doBulkGet(function (err, res) {\n        /* istanbul ignore else */\n        if (err) {\n          var status = Math.floor(err.status / 100);\n          /* istanbul ignore else */\n          if (status === 4 || status === 5) { // 40x or 50x\n            supportsBulkGetMap[dbUrl] = false;\n            explainError(\n              err.status,\n              'PouchDB is just detecting if the remote ' +\n              'supports the _bulk_get API.'\n            );\n            doBulkGetShim();\n          } else {\n            callback(err);\n          }\n        } else {\n          supportsBulkGetMap[dbUrl] = true;\n          callback(null, res);\n        }\n      });\n    } else if (supportsBulkGet) {\n      /* istanbul ignore next */\n      doBulkGet(callback);\n    } else {\n      doBulkGetShim();\n    }\n  });\n\n  // Calls GET on the host, which gets back a JSON string containing\n  //    couchdb: A welcome string\n  //    version: The version of CouchDB it is running\n  api._info = function (callback) {\n    setup().then(function () {\n      ajax$$({}, {\n        method: 'GET',\n        url: genDBUrl(host, '')\n      }, function (err, res) {\n        /* istanbul ignore next */\n        if (err) {\n        return callback(err);\n        }\n        res.host = genDBUrl(host, '');\n        callback(null, res);\n      });\n    }).catch(callback);\n  };\n\n  // Get the document with the given id from the database given by host.\n  // The id could be solely the _id in the database, or it may be a\n  // _design/ID or _local/ID path\n  api.get = adapterFun$$('get', function (id, opts, callback) {\n    // If no options were given, set the callback to the second parameter\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    opts = clone(opts);\n\n    // List of parameters to add to the GET request\n    var params = {};\n\n    if (opts.revs) {\n      params.revs = true;\n    }\n\n    if (opts.revs_info) {\n      params.revs_info = true;\n    }\n\n    if (opts.open_revs) {\n      if (opts.open_revs !== \"all\") {\n        opts.open_revs = JSON.stringify(opts.open_revs);\n      }\n      params.open_revs = opts.open_revs;\n    }\n\n    if (opts.rev) {\n      params.rev = opts.rev;\n    }\n\n    if (opts.conflicts) {\n      params.conflicts = opts.conflicts;\n    }\n\n    id = encodeDocId(id);\n\n    // Set the options for the ajax call\n    var options = {\n      method: 'GET',\n      url: genDBUrl(host, id + paramsToStr(params))\n    };\n\n    function fetchAttachments(doc) {\n      var atts = doc._attachments;\n      var filenames = atts && Object.keys(atts);\n      if (!atts || !filenames.length) {\n        return;\n      }\n      // we fetch these manually in separate XHRs, because\n      // Sync Gateway would normally send it back as multipart/mixed,\n      // which we cannot parse. Also, this is more efficient than\n      // receiving attachments as base64-encoded strings.\n      function fetch() {\n\n        if (!filenames.length) {\n          return null;\n        }\n\n        var filename = filenames.pop();\n        var att = atts[filename];\n        var path = encodeDocId(doc._id) + '/' + encodeAttachmentId(filename) +\n          '?rev=' + doc._rev;\n        return ajaxPromise(opts, {\n          method: 'GET',\n          url: genDBUrl(host, path),\n          binary: true\n        }).then(function (blob) {\n          if (opts.binary) {\n            return blob;\n          }\n          return new PouchPromise(function (resolve) {\n            blobToBase64(blob, resolve);\n          });\n        }).then(function (data) {\n          delete att.stub;\n          delete att.length;\n          att.data = data;\n        });\n      }\n\n      // This limits the number of parallel xhr requests to 5 any time\n      // to avoid issues with maximum browser request limits\n      return new PromisePool(fetch, 5, {promise: PouchPromise}).start();\n    }\n\n    function fetchAllAttachments(docOrDocs) {\n      if (Array.isArray(docOrDocs)) {\n        return PouchPromise.all(docOrDocs.map(function (doc) {\n          if (doc.ok) {\n            return fetchAttachments(doc.ok);\n          }\n        }));\n      }\n      return fetchAttachments(docOrDocs);\n    }\n\n    ajaxPromise(opts, options).then(function (res) {\n      return PouchPromise.resolve().then(function () {\n        if (opts.attachments) {\n          return fetchAllAttachments(res);\n        }\n      }).then(function () {\n        callback(null, res);\n      });\n    }).catch(callback);\n  });\n\n  // Delete the document given by doc from the database given by host.\n  api.remove = adapterFun$$('remove',\n      function (docOrId, optsOrRev, opts, callback) {\n    var doc;\n    if (typeof optsOrRev === 'string') {\n      // id, rev, opts, callback style\n      doc = {\n        _id: docOrId,\n        _rev: optsOrRev\n      };\n      if (typeof opts === 'function') {\n        callback = opts;\n        opts = {};\n      }\n    } else {\n      // doc, opts, callback style\n      doc = docOrId;\n      if (typeof optsOrRev === 'function') {\n        callback = optsOrRev;\n        opts = {};\n      } else {\n        callback = opts;\n        opts = optsOrRev;\n      }\n    }\n\n    var rev = (doc._rev || opts.rev);\n\n    // Delete the document\n    ajax$$(opts, {\n      method: 'DELETE',\n      url: genDBUrl(host, encodeDocId(doc._id)) + '?rev=' + rev\n    }, callback);\n  });\n\n  function encodeAttachmentId(attachmentId) {\n    return attachmentId.split(\"/\").map(encodeURIComponent).join(\"/\");\n  }\n\n  // Get the attachment\n  api.getAttachment =\n    adapterFun$$('getAttachment', function (docId, attachmentId, opts,\n                                                callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    var params = opts.rev ? ('?rev=' + opts.rev) : '';\n    var url = genDBUrl(host, encodeDocId(docId)) + '/' +\n      encodeAttachmentId(attachmentId) + params;\n    ajax$$(opts, {\n      method: 'GET',\n      url: url,\n      binary: true\n    }, callback);\n  });\n\n  // Remove the attachment given by the id and rev\n  api.removeAttachment =\n    adapterFun$$('removeAttachment', function (docId, attachmentId, rev,\n                                                   callback) {\n\n    var url = genDBUrl(host, encodeDocId(docId) + '/' +\n      encodeAttachmentId(attachmentId)) + '?rev=' + rev;\n\n    ajax$$({}, {\n      method: 'DELETE',\n      url: url\n    }, callback);\n  });\n\n  // Add the attachment given by blob and its contentType property\n  // to the document with the given id, the revision given by rev, and\n  // add it to the database given by host.\n  api.putAttachment =\n    adapterFun$$('putAttachment', function (docId, attachmentId, rev, blob,\n                                                type, callback) {\n    if (typeof type === 'function') {\n      callback = type;\n      type = blob;\n      blob = rev;\n      rev = null;\n    }\n    var id = encodeDocId(docId) + '/' + encodeAttachmentId(attachmentId);\n    var url = genDBUrl(host, id);\n    if (rev) {\n      url += '?rev=' + rev;\n    }\n\n    if (typeof blob === 'string') {\n      // input is assumed to be a base64 string\n      var binary;\n      try {\n        binary = atob$1(blob);\n      } catch (err) {\n        return callback(createError(BAD_ARG,\n                        'Attachment is not a valid base64 string'));\n      }\n      blob = binary ? binStringToBluffer(binary, type) : '';\n    }\n\n    var opts = {\n      headers: {'Content-Type': type},\n      method: 'PUT',\n      url: url,\n      processData: false,\n      body: blob,\n      timeout: ajaxOpts.timeout || 60000\n    };\n    // Add the attachment\n    ajax$$({}, opts, callback);\n  });\n\n  // Update/create multiple documents given by req in the database\n  // given by host.\n  api._bulkDocs = function (req, opts, callback) {\n    // If new_edits=false then it prevents the database from creating\n    // new revision numbers for the documents. Instead it just uses\n    // the old ones. This is used in database replication.\n    req.new_edits = opts.new_edits;\n\n    setup().then(function () {\n      return PouchPromise.all(req.docs.map(preprocessAttachments$1));\n    }).then(function () {\n      // Update/create the documents\n      ajax$$(opts, {\n        method: 'POST',\n        url: genDBUrl(host, '_bulk_docs'),\n        timeout: opts.timeout,\n        body: req\n      }, function (err, results) {\n        if (err) {\n          return callback(err);\n        }\n        results.forEach(function (result) {\n          result.ok = true; // smooths out cloudant not adding this\n        });\n        callback(null, results);\n      });\n    }).catch(callback);\n  };\n\n\n  // Update/create document\n  api._put = function (doc, opts, callback) {\n    setup().then(function () {\n      return preprocessAttachments$1(doc);\n    }).then(function () {\n      // Update/create the document\n      ajax$$(opts, {\n        method: 'PUT',\n        url: genDBUrl(host, encodeDocId(doc._id)),\n        body: doc\n      }, function (err, result) {\n        if (err) {\n          return callback(err);\n        }\n        callback(null, result);\n      });\n    }).catch(callback);\n  };\n\n\n  // Get a listing of the documents in the database given\n  // by host and ordered by increasing id.\n  api.allDocs = adapterFun$$('allDocs', function (opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    opts = clone(opts);\n\n    // List of parameters to add to the GET request\n    var params = {};\n    var body;\n    var method = 'GET';\n\n    if (opts.conflicts) {\n      params.conflicts = true;\n    }\n\n    if (opts.descending) {\n      params.descending = true;\n    }\n\n    if (opts.include_docs) {\n      params.include_docs = true;\n    }\n\n    // added in CouchDB 1.6.0\n    if (opts.attachments) {\n      params.attachments = true;\n    }\n\n    if (opts.key) {\n      params.key = JSON.stringify(opts.key);\n    }\n\n    if (opts.start_key) {\n      opts.startkey = opts.start_key;\n    }\n\n    if (opts.startkey) {\n      params.startkey = JSON.stringify(opts.startkey);\n    }\n\n    if (opts.end_key) {\n      opts.endkey = opts.end_key;\n    }\n\n    if (opts.endkey) {\n      params.endkey = JSON.stringify(opts.endkey);\n    }\n\n    if (typeof opts.inclusive_end !== 'undefined') {\n      params.inclusive_end = !!opts.inclusive_end;\n    }\n\n    if (typeof opts.limit !== 'undefined') {\n      params.limit = opts.limit;\n    }\n\n    if (typeof opts.skip !== 'undefined') {\n      params.skip = opts.skip;\n    }\n\n    var paramStr = paramsToStr(params);\n\n    if (typeof opts.keys !== 'undefined') {\n      method = 'POST';\n      body = {keys: opts.keys};\n    }\n\n    // Get the document listing\n    ajaxPromise(opts, {\n      method: method,\n      url: genDBUrl(host, '_all_docs' + paramStr),\n      body: body\n    }).then(function (res) {\n      if (opts.include_docs && opts.attachments && opts.binary) {\n        res.rows.forEach(readAttachmentsAsBlobOrBuffer);\n      }\n      callback(null, res);\n    }).catch(callback);\n  });\n\n  // Get a list of changes made to documents in the database given by host.\n  // TODO According to the README, there should be two other methods here,\n  // api.changes.addListener and api.changes.removeListener.\n  api._changes = function (opts) {\n\n    // We internally page the results of a changes request, this means\n    // if there is a large set of changes to be returned we can start\n    // processing them quicker instead of waiting on the entire\n    // set of changes to return and attempting to process them at once\n    var batchSize = 'batch_size' in opts ? opts.batch_size : CHANGES_BATCH_SIZE;\n\n    opts = clone(opts);\n    opts.timeout = ('timeout' in opts) ? opts.timeout :\n      ('timeout' in ajaxOpts) ? ajaxOpts.timeout :\n      30 * 1000;\n\n    // We give a 5 second buffer for CouchDB changes to respond with\n    // an ok timeout (if a timeout it set)\n    var params = opts.timeout ? {timeout: opts.timeout - (5 * 1000)} : {};\n    var limit = (typeof opts.limit !== 'undefined') ? opts.limit : false;\n    var returnDocs;\n    if ('return_docs' in opts) {\n      returnDocs = opts.return_docs;\n    } else if ('returnDocs' in opts) {\n      // TODO: Remove 'returnDocs' in favor of 'return_docs' in a future release\n      returnDocs = opts.returnDocs;\n    } else {\n      returnDocs = true;\n    }\n    //\n    var leftToFetch = limit;\n\n    if (opts.style) {\n      params.style = opts.style;\n    }\n\n    if (opts.include_docs || opts.filter && typeof opts.filter === 'function') {\n      params.include_docs = true;\n    }\n\n    if (opts.attachments) {\n      params.attachments = true;\n    }\n\n    if (opts.continuous) {\n      params.feed = 'longpoll';\n    }\n\n    if (opts.conflicts) {\n      params.conflicts = true;\n    }\n\n    if (opts.descending) {\n      params.descending = true;\n    }\n\n    if ('heartbeat' in opts) {\n      // If the heartbeat value is false, it disables the default heartbeat\n      if (opts.heartbeat) {\n        params.heartbeat = opts.heartbeat;\n      }\n    } else {\n      // Default heartbeat to 10 seconds\n      params.heartbeat = 10000;\n    }\n\n    if (opts.filter && typeof opts.filter === 'string') {\n      params.filter = opts.filter;\n    }\n\n    if (opts.view && typeof opts.view === 'string') {\n      params.filter = '_view';\n      params.view = opts.view;\n    }\n\n    // If opts.query_params exists, pass it through to the changes request.\n    // These parameters may be used by the filter on the source database.\n    if (opts.query_params && typeof opts.query_params === 'object') {\n      for (var param_name in opts.query_params) {\n        /* istanbul ignore else */\n        if (opts.query_params.hasOwnProperty(param_name)) {\n          params[param_name] = opts.query_params[param_name];\n        }\n      }\n    }\n\n    var method = 'GET';\n    var body;\n\n    if (opts.doc_ids) {\n      // set this automagically for the user; it's annoying that couchdb\n      // requires both a \"filter\" and a \"doc_ids\" param.\n      params.filter = '_doc_ids';\n      method = 'POST';\n      body = {doc_ids: opts.doc_ids };\n    }\n\n    var xhr;\n    var lastFetchedSeq;\n\n    // Get all the changes starting wtih the one immediately after the\n    // sequence number given by since.\n    var fetch = function (since, callback) {\n      if (opts.aborted) {\n        return;\n      }\n      params.since = since;\n      // \"since\" can be any kind of json object in Coudant/CouchDB 2.x\n      /* istanbul ignore next */\n      if (typeof params.since === \"object\") {\n        params.since = JSON.stringify(params.since);\n      }\n\n      if (opts.descending) {\n        if (limit) {\n          params.limit = leftToFetch;\n        }\n      } else {\n        params.limit = (!limit || leftToFetch > batchSize) ?\n          batchSize : leftToFetch;\n      }\n\n      // Set the options for the ajax call\n      var xhrOpts = {\n        method: method,\n        url: genDBUrl(host, '_changes' + paramsToStr(params)),\n        timeout: opts.timeout,\n        body: body\n      };\n      lastFetchedSeq = since;\n\n      /* istanbul ignore if */\n      if (opts.aborted) {\n        return;\n      }\n\n      // Get the changes\n      setup().then(function () {\n        xhr = ajax$$(opts, xhrOpts, callback);\n      }).catch(callback);\n    };\n\n    // If opts.since exists, get all the changes from the sequence\n    // number given by opts.since. Otherwise, get all the changes\n    // from the sequence number 0.\n    var results = {results: []};\n\n    var fetched = function (err, res) {\n      if (opts.aborted) {\n        return;\n      }\n      var raw_results_length = 0;\n      // If the result of the ajax call (res) contains changes (res.results)\n      if (res && res.results) {\n        raw_results_length = res.results.length;\n        results.last_seq = res.last_seq;\n        // For each change\n        var req = {};\n        req.query = opts.query_params;\n        res.results = res.results.filter(function (c) {\n          leftToFetch--;\n          var ret = filterChange(opts)(c);\n          if (ret) {\n            if (opts.include_docs && opts.attachments && opts.binary) {\n              readAttachmentsAsBlobOrBuffer(c);\n            }\n            if (returnDocs) {\n              results.results.push(c);\n            }\n            opts.onChange(c);\n          }\n          return ret;\n        });\n      } else if (err) {\n        // In case of an error, stop listening for changes and call\n        // opts.complete\n        opts.aborted = true;\n        opts.complete(err);\n        return;\n      }\n\n      // The changes feed may have timed out with no results\n      // if so reuse last update sequence\n      if (res && res.last_seq) {\n        lastFetchedSeq = res.last_seq;\n      }\n\n      var finished = (limit && leftToFetch <= 0) ||\n        (res && raw_results_length < batchSize) ||\n        (opts.descending);\n\n      if ((opts.continuous && !(limit && leftToFetch <= 0)) || !finished) {\n        // Queue a call to fetch again with the newest sequence number\n        setTimeout(function () { fetch(lastFetchedSeq, fetched); }, 0);\n      } else {\n        // We're done, call the callback\n        opts.complete(null, results);\n      }\n    };\n\n    fetch(opts.since || 0, fetched);\n\n    // Return a method to cancel this method from processing any more\n    return {\n      cancel: function () {\n        opts.aborted = true;\n        if (xhr) {\n          xhr.abort();\n        }\n      }\n    };\n  };\n\n  // Given a set of document/revision IDs (given by req), tets the subset of\n  // those that do NOT correspond to revisions stored in the database.\n  // See http://wiki.apache.org/couchdb/HttpPostRevsDiff\n  api.revsDiff = adapterFun$$('revsDiff', function (req, opts, callback) {\n    // If no options were given, set the callback to be the second parameter\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    // Get the missing document/revision IDs\n    ajax$$(opts, {\n      method: 'POST',\n      url: genDBUrl(host, '_revs_diff'),\n      body: req\n    }, callback);\n  });\n\n  api._close = function (callback) {\n    callback();\n  };\n\n  api._destroy = function (options, callback) {\n    ajax$$(options, {\n      url: genDBUrl(host, ''),\n      method: 'DELETE'\n    }, function (err, resp) {\n      if (err && err.status && err.status !== 404) {\n        return callback(err);\n      }\n      callback(null, resp);\n    });\n  };\n}\n\n// HttpPouch is a valid adapter.\nHttpPouch.valid = function () {\n  return true;\n};\n\nfunction HttpPouch$1 (PouchDB) {\n  PouchDB.adapter('http', HttpPouch, false);\n  PouchDB.adapter('https', HttpPouch, false);\n}\n\nfunction pad(str, padWith, upToLength) {\n  var padding = '';\n  var targetLength = upToLength - str.length;\n  /* istanbul ignore next */\n  while (padding.length < targetLength) {\n    padding += padWith;\n  }\n  return padding;\n}\n\nfunction padLeft(str, padWith, upToLength) {\n  var padding = pad(str, padWith, upToLength);\n  return padding + str;\n}\n\nvar MIN_MAGNITUDE = -324; // verified by -Number.MIN_VALUE\nvar MAGNITUDE_DIGITS = 3; // ditto\nvar SEP = ''; // set to '_' for easier debugging \n\nfunction collate(a, b) {\n\n  if (a === b) {\n    return 0;\n  }\n\n  a = normalizeKey(a);\n  b = normalizeKey(b);\n\n  var ai = collationIndex(a);\n  var bi = collationIndex(b);\n  if ((ai - bi) !== 0) {\n    return ai - bi;\n  }\n  if (a === null) {\n    return 0;\n  }\n  switch (typeof a) {\n    case 'number':\n      return a - b;\n    case 'boolean':\n      return a === b ? 0 : (a < b ? -1 : 1);\n    case 'string':\n      return stringCollate(a, b);\n  }\n  return Array.isArray(a) ? arrayCollate(a, b) : objectCollate(a, b);\n}\n\n// couch considers null/NaN/Infinity/-Infinity === undefined,\n// for the purposes of mapreduce indexes. also, dates get stringified.\nfunction normalizeKey(key) {\n  switch (typeof key) {\n    case 'undefined':\n      return null;\n    case 'number':\n      if (key === Infinity || key === -Infinity || isNaN(key)) {\n        return null;\n      }\n      return key;\n    case 'object':\n      var origKey = key;\n      if (Array.isArray(key)) {\n        var len = key.length;\n        key = new Array(len);\n        for (var i = 0; i < len; i++) {\n          key[i] = normalizeKey(origKey[i]);\n        }\n      /* istanbul ignore next */\n      } else if (key instanceof Date) {\n        return key.toJSON();\n      } else if (key !== null) { // generic object\n        key = {};\n        for (var k in origKey) {\n          if (origKey.hasOwnProperty(k)) {\n            var val = origKey[k];\n            if (typeof val !== 'undefined') {\n              key[k] = normalizeKey(val);\n            }\n          }\n        }\n      }\n  }\n  return key;\n}\n\nfunction indexify(key) {\n  if (key !== null) {\n    switch (typeof key) {\n      case 'boolean':\n        return key ? 1 : 0;\n      case 'number':\n        return numToIndexableString(key);\n      case 'string':\n        // We've to be sure that key does not contain \\u0000\n        // Do order-preserving replacements:\n        // 0 -> 1, 1\n        // 1 -> 1, 2\n        // 2 -> 2, 2\n        return key\n          .replace(/\\u0002/g, '\\u0002\\u0002')\n          .replace(/\\u0001/g, '\\u0001\\u0002')\n          .replace(/\\u0000/g, '\\u0001\\u0001');\n      case 'object':\n        var isArray = Array.isArray(key);\n        var arr = isArray ? key : Object.keys(key);\n        var i = -1;\n        var len = arr.length;\n        var result = '';\n        if (isArray) {\n          while (++i < len) {\n            result += toIndexableString(arr[i]);\n          }\n        } else {\n          while (++i < len) {\n            var objKey = arr[i];\n            result += toIndexableString(objKey) +\n                toIndexableString(key[objKey]);\n          }\n        }\n        return result;\n    }\n  }\n  return '';\n}\n\n// convert the given key to a string that would be appropriate\n// for lexical sorting, e.g. within a database, where the\n// sorting is the same given by the collate() function.\nfunction toIndexableString(key) {\n  var zero = '\\u0000';\n  key = normalizeKey(key);\n  return collationIndex(key) + SEP + indexify(key) + zero;\n}\n\nfunction parseNumber(str, i) {\n  var originalIdx = i;\n  var num;\n  var zero = str[i] === '1';\n  if (zero) {\n    num = 0;\n    i++;\n  } else {\n    var neg = str[i] === '0';\n    i++;\n    var numAsString = '';\n    var magAsString = str.substring(i, i + MAGNITUDE_DIGITS);\n    var magnitude = parseInt(magAsString, 10) + MIN_MAGNITUDE;\n    /* istanbul ignore next */\n    if (neg) {\n      magnitude = -magnitude;\n    }\n    i += MAGNITUDE_DIGITS;\n    while (true) {\n      var ch = str[i];\n      if (ch === '\\u0000') {\n        break;\n      } else {\n        numAsString += ch;\n      }\n      i++;\n    }\n    numAsString = numAsString.split('.');\n    if (numAsString.length === 1) {\n      num = parseInt(numAsString, 10);\n    } else {\n      /* istanbul ignore next */\n      num = parseFloat(numAsString[0] + '.' + numAsString[1]);\n    }\n    /* istanbul ignore next */\n    if (neg) {\n      num = num - 10;\n    }\n    /* istanbul ignore next */\n    if (magnitude !== 0) {\n      // parseFloat is more reliable than pow due to rounding errors\n      // e.g. Number.MAX_VALUE would return Infinity if we did\n      // num * Math.pow(10, magnitude);\n      num = parseFloat(num + 'e' + magnitude);\n    }\n  }\n  return {num: num, length : i - originalIdx};\n}\n\n// move up the stack while parsing\n// this function moved outside of parseIndexableString for performance\nfunction pop(stack, metaStack) {\n  var obj = stack.pop();\n\n  if (metaStack.length) {\n    var lastMetaElement = metaStack[metaStack.length - 1];\n    if (obj === lastMetaElement.element) {\n      // popping a meta-element, e.g. an object whose value is another object\n      metaStack.pop();\n      lastMetaElement = metaStack[metaStack.length - 1];\n    }\n    var element = lastMetaElement.element;\n    var lastElementIndex = lastMetaElement.index;\n    if (Array.isArray(element)) {\n      element.push(obj);\n    } else if (lastElementIndex === stack.length - 2) { // obj with key+value\n      var key = stack.pop();\n      element[key] = obj;\n    } else {\n      stack.push(obj); // obj with key only\n    }\n  }\n}\n\nfunction parseIndexableString(str) {\n  var stack = [];\n  var metaStack = []; // stack for arrays and objects\n  var i = 0;\n\n  /*eslint no-constant-condition: [\"error\", { \"checkLoops\": false }]*/\n  while (true) {\n    var collationIndex = str[i++];\n    if (collationIndex === '\\u0000') {\n      if (stack.length === 1) {\n        return stack.pop();\n      } else {\n        pop(stack, metaStack);\n        continue;\n      }\n    }\n    switch (collationIndex) {\n      case '1':\n        stack.push(null);\n        break;\n      case '2':\n        stack.push(str[i] === '1');\n        i++;\n        break;\n      case '3':\n        var parsedNum = parseNumber(str, i);\n        stack.push(parsedNum.num);\n        i += parsedNum.length;\n        break;\n      case '4':\n        var parsedStr = '';\n        /*eslint no-constant-condition: [\"error\", { \"checkLoops\": false }]*/\n        while (true) {\n          var ch = str[i];\n          if (ch === '\\u0000') {\n            break;\n          }\n          parsedStr += ch;\n          i++;\n        }\n        // perform the reverse of the order-preserving replacement\n        // algorithm (see above)\n        parsedStr = parsedStr.replace(/\\u0001\\u0001/g, '\\u0000')\n          .replace(/\\u0001\\u0002/g, '\\u0001')\n          .replace(/\\u0002\\u0002/g, '\\u0002');\n        stack.push(parsedStr);\n        break;\n      case '5':\n        var arrayElement = { element: [], index: stack.length };\n        stack.push(arrayElement.element);\n        metaStack.push(arrayElement);\n        break;\n      case '6':\n        var objElement = { element: {}, index: stack.length };\n        stack.push(objElement.element);\n        metaStack.push(objElement);\n        break;\n      /* istanbul ignore next */\n      default:\n        throw new Error(\n          'bad collationIndex or unexpectedly reached end of input: ' +\n            collationIndex);\n    }\n  }\n}\n\nfunction arrayCollate(a, b) {\n  var len = Math.min(a.length, b.length);\n  for (var i = 0; i < len; i++) {\n    var sort = collate(a[i], b[i]);\n    if (sort !== 0) {\n      return sort;\n    }\n  }\n  return (a.length === b.length) ? 0 :\n    (a.length > b.length) ? 1 : -1;\n}\nfunction stringCollate(a, b) {\n  // See: https://github.com/daleharvey/pouchdb/issues/40\n  // This is incompatible with the CouchDB implementation, but its the\n  // best we can do for now\n  return (a === b) ? 0 : ((a > b) ? 1 : -1);\n}\nfunction objectCollate(a, b) {\n  var ak = Object.keys(a), bk = Object.keys(b);\n  var len = Math.min(ak.length, bk.length);\n  for (var i = 0; i < len; i++) {\n    // First sort the keys\n    var sort = collate(ak[i], bk[i]);\n    if (sort !== 0) {\n      return sort;\n    }\n    // if the keys are equal sort the values\n    sort = collate(a[ak[i]], b[bk[i]]);\n    if (sort !== 0) {\n      return sort;\n    }\n\n  }\n  return (ak.length === bk.length) ? 0 :\n    (ak.length > bk.length) ? 1 : -1;\n}\n// The collation is defined by erlangs ordered terms\n// the atoms null, true, false come first, then numbers, strings,\n// arrays, then objects\n// null/undefined/NaN/Infinity/-Infinity are all considered null\nfunction collationIndex(x) {\n  var id = ['boolean', 'number', 'string', 'object'];\n  var idx = id.indexOf(typeof x);\n  //false if -1 otherwise true, but fast!!!!1\n  if (~idx) {\n    if (x === null) {\n      return 1;\n    }\n    if (Array.isArray(x)) {\n      return 5;\n    }\n    return idx < 3 ? (idx + 2) : (idx + 3);\n  }\n  /* istanbul ignore next */\n  if (Array.isArray(x)) {\n    return 5;\n  }\n}\n\n// conversion:\n// x yyy zz...zz\n// x = 0 for negative, 1 for 0, 2 for positive\n// y = exponent (for negative numbers negated) moved so that it's >= 0\n// z = mantisse\nfunction numToIndexableString(num) {\n\n  if (num === 0) {\n    return '1';\n  }\n\n  // convert number to exponential format for easier and\n  // more succinct string sorting\n  var expFormat = num.toExponential().split(/e\\+?/);\n  var magnitude = parseInt(expFormat[1], 10);\n\n  var neg = num < 0;\n\n  var result = neg ? '0' : '2';\n\n  // first sort by magnitude\n  // it's easier if all magnitudes are positive\n  var magForComparison = ((neg ? -magnitude : magnitude) - MIN_MAGNITUDE);\n  var magString = padLeft((magForComparison).toString(), '0', MAGNITUDE_DIGITS);\n\n  result += SEP + magString;\n\n  // then sort by the factor\n  var factor = Math.abs(parseFloat(expFormat[0])); // [1..10)\n  /* istanbul ignore next */\n  if (neg) { // for negative reverse ordering\n    factor = 10 - factor;\n  }\n\n  var factorStr = factor.toFixed(20);\n\n  // strip zeros from the end\n  factorStr = factorStr.replace(/\\.?0+$/, '');\n\n  result += SEP + factorStr;\n\n  return result;\n}\n\n/*\n * Simple task queue to sequentialize actions. Assumes\n * callbacks will eventually fire (once).\n */\n\nfunction TaskQueue$1() {\n  this.promise = new PouchPromise(function (fulfill) {fulfill(); });\n}\nTaskQueue$1.prototype.add = function (promiseFactory) {\n  this.promise = this.promise.catch(function () {\n    // just recover\n  }).then(function () {\n    return promiseFactory();\n  });\n  return this.promise;\n};\nTaskQueue$1.prototype.finish = function () {\n  return this.promise;\n};\n\nfunction createView(opts) {\n  var sourceDB = opts.db;\n  var viewName = opts.viewName;\n  var mapFun = opts.map;\n  var reduceFun = opts.reduce;\n  var temporary = opts.temporary;\n\n  // the \"undefined\" part is for backwards compatibility\n  var viewSignature = mapFun.toString() + (reduceFun && reduceFun.toString()) +\n    'undefined';\n\n  var cachedViews;\n  if (!temporary) {\n    // cache this to ensure we don't try to update the same view twice\n    cachedViews = sourceDB._cachedViews = sourceDB._cachedViews || {};\n    if (cachedViews[viewSignature]) {\n      return cachedViews[viewSignature];\n    }\n  }\n\n  var promiseForView = sourceDB.info().then(function (info) {\n\n    var depDbName = info.db_name + '-mrview-' +\n      (temporary ? 'temp' : stringMd5(viewSignature));\n\n    // save the view name in the source db so it can be cleaned up if necessary\n    // (e.g. when the _design doc is deleted, remove all associated view data)\n    function diffFunction(doc) {\n      doc.views = doc.views || {};\n      var fullViewName = viewName;\n      if (fullViewName.indexOf('/') === -1) {\n        fullViewName = viewName + '/' + viewName;\n      }\n      var depDbs = doc.views[fullViewName] = doc.views[fullViewName] || {};\n      /* istanbul ignore if */\n      if (depDbs[depDbName]) {\n        return; // no update necessary\n      }\n      depDbs[depDbName] = true;\n      return doc;\n    }\n    return upsert(sourceDB, '_local/mrviews', diffFunction).then(function () {\n      return sourceDB.registerDependentDatabase(depDbName).then(function (res) {\n        var db = res.db;\n        db.auto_compaction = true;\n        var view = {\n          name: depDbName,\n          db: db,\n          sourceDB: sourceDB,\n          adapter: sourceDB.adapter,\n          mapFun: mapFun,\n          reduceFun: reduceFun\n        };\n        return view.db.get('_local/lastSeq').catch(function (err) {\n          /* istanbul ignore if */\n          if (err.status !== 404) {\n            throw err;\n          }\n        }).then(function (lastSeqDoc) {\n          view.seq = lastSeqDoc ? lastSeqDoc.seq : 0;\n          if (cachedViews) {\n            view.db.once('destroyed', function () {\n              delete cachedViews[viewSignature];\n            });\n          }\n          return view;\n        });\n      });\n    });\n  });\n\n  if (cachedViews) {\n    cachedViews[viewSignature] = promiseForView;\n  }\n  return promiseForView;\n}\n\nfunction QueryParseError(message) {\n  this.status = 400;\n  this.name = 'query_parse_error';\n  this.message = message;\n  this.error = true;\n  try {\n    Error.captureStackTrace(this, QueryParseError);\n  } catch (e) {}\n}\n\ninherits(QueryParseError, Error);\n\nfunction NotFoundError(message) {\n  this.status = 404;\n  this.name = 'not_found';\n  this.message = message;\n  this.error = true;\n  try {\n    Error.captureStackTrace(this, NotFoundError);\n  } catch (e) {}\n}\n\ninherits(NotFoundError, Error);\n\nfunction BuiltInError(message) {\n  this.status = 500;\n  this.name = 'invalid_value';\n  this.message = message;\n  this.error = true;\n  try {\n    Error.captureStackTrace(this, BuiltInError);\n  } catch (e) {}\n}\n\ninherits(BuiltInError, Error);\n\nfunction createBuiltInError(name) {\n  var message = 'builtin ' + name +\n    ' function requires map values to be numbers' +\n    ' or number arrays';\n  return new BuiltInError(message);\n}\n\nfunction sum(values) {\n  var result = 0;\n  for (var i = 0, len = values.length; i < len; i++) {\n    var num = values[i];\n    if (typeof num !== 'number') {\n      if (Array.isArray(num)) {\n        // lists of numbers are also allowed, sum them separately\n        result = typeof result === 'number' ? [result] : result;\n        for (var j = 0, jLen = num.length; j < jLen; j++) {\n          var jNum = num[j];\n          if (typeof jNum !== 'number') {\n            throw createBuiltInError('_sum');\n          } else if (typeof result[j] === 'undefined') {\n            result.push(jNum);\n          } else {\n            result[j] += jNum;\n          }\n        }\n      } else { // not array/number\n        throw createBuiltInError('_sum');\n      }\n    } else if (typeof result === 'number') {\n      result += num;\n    } else { // add number to array\n      result[0] += num;\n    }\n  }\n  return result;\n}\n\nvar log$2 = guardedConsole.bind(null, 'log');\nvar isArray = Array.isArray;\nvar toJSON = JSON.parse;\n\nfunction evalFunctionWithEval(func, emit) {\n  return scopedEval(\n    \"return (\" + func.replace(/;\\s*$/, \"\") + \");\",\n    {\n      emit: emit,\n      sum: sum,\n      log: log$2,\n      isArray: isArray,\n      toJSON: toJSON\n    }\n  );\n}\n\nvar promisedCallback = function (promise, callback) {\n  if (callback) {\n    promise.then(function (res) {\n      process.nextTick(function () {\n        callback(null, res);\n      });\n    }, function (reason) {\n      process.nextTick(function () {\n        callback(reason);\n      });\n    });\n  }\n  return promise;\n};\n\nvar callbackify = function (fun) {\n  return getArguments(function (args) {\n    var cb = args.pop();\n    var promise = fun.apply(this, args);\n    if (typeof cb === 'function') {\n      promisedCallback(promise, cb);\n    }\n    return promise;\n  });\n};\n\n// Promise finally util similar to Q.finally\nvar fin = function (promise, finalPromiseFactory) {\n  return promise.then(function (res) {\n    return finalPromiseFactory().then(function () {\n      return res;\n    });\n  }, function (reason) {\n    return finalPromiseFactory().then(function () {\n      throw reason;\n    });\n  });\n};\n\nvar sequentialize = function (queue, promiseFactory) {\n  return function () {\n    var args = arguments;\n    var that = this;\n    return queue.add(function () {\n      return promiseFactory.apply(that, args);\n    });\n  };\n};\n\n// uniq an array of strings, order not guaranteed\n// similar to underscore/lodash _.uniq\nvar uniq = function (arr) {\n  var map = {};\n\n  for (var i = 0, len = arr.length; i < len; i++) {\n    map['$' + arr[i]] = true;\n  }\n\n  var keys = Object.keys(map);\n  var output = new Array(keys.length);\n\n  for (i = 0, len = keys.length; i < len; i++) {\n    output[i] = keys[i].substring(1);\n  }\n  return output;\n};\n\nvar persistentQueues = {};\nvar tempViewQueue = new TaskQueue$1();\nvar CHANGES_BATCH_SIZE$1 = 50;\n\nfunction parseViewName(name) {\n  // can be either 'ddocname/viewname' or just 'viewname'\n  // (where the ddoc name is the same)\n  return name.indexOf('/') === -1 ? [name, name] : name.split('/');\n}\n\nfunction isGenOne(changes) {\n  // only return true if the current change is 1-\n  // and there are no other leafs\n  return changes.length === 1 && /^1-/.test(changes[0].rev);\n}\n\nfunction emitError(db, e) {\n  try {\n    db.emit('error', e);\n  } catch (err) {\n    guardedConsole('error',\n      'The user\\'s map/reduce function threw an uncaught error.\\n' +\n      'You can debug this error by doing:\\n' +\n      'myDatabase.on(\\'error\\', function (err) { debugger; });\\n' +\n      'Please double-check your map/reduce function.');\n    guardedConsole('error', e);\n  }\n}\n\nfunction tryCode$1(db, fun, args) {\n  // emit an event if there was an error thrown by a map/reduce function.\n  // putting try/catches in a single function also avoids deoptimizations.\n  try {\n    return {\n      output : fun.apply(null, args)\n    };\n  } catch (e) {\n    emitError(db, e);\n    return {error: e};\n  }\n}\n\nfunction sortByKeyThenValue(x, y) {\n  var keyCompare = collate(x.key, y.key);\n  return keyCompare !== 0 ? keyCompare : collate(x.value, y.value);\n}\n\nfunction sliceResults(results, limit, skip) {\n  skip = skip || 0;\n  if (typeof limit === 'number') {\n    return results.slice(skip, limit + skip);\n  } else if (skip > 0) {\n    return results.slice(skip);\n  }\n  return results;\n}\n\nfunction rowToDocId(row) {\n  var val = row.value;\n  // Users can explicitly specify a joined doc _id, or it\n  // defaults to the doc _id that emitted the key/value.\n  var docId = (val && typeof val === 'object' && val._id) || row.id;\n  return docId;\n}\n\nfunction readAttachmentsAsBlobOrBuffer$1(res) {\n  res.rows.forEach(function (row) {\n    var atts = row.doc && row.doc._attachments;\n    if (!atts) {\n      return;\n    }\n    Object.keys(atts).forEach(function (filename) {\n      var att = atts[filename];\n      atts[filename].data = b64ToBluffer(att.data, att.content_type);\n    });\n  });\n}\n\nfunction postprocessAttachments(opts) {\n  return function (res) {\n    if (opts.include_docs && opts.attachments && opts.binary) {\n      readAttachmentsAsBlobOrBuffer$1(res);\n    }\n    return res;\n  };\n}\n\nvar builtInReduce = {\n  _sum: function (keys, values) {\n    return sum(values);\n  },\n\n  _count: function (keys, values) {\n    return values.length;\n  },\n\n  _stats: function (keys, values) {\n    // no need to implement rereduce=true, because Pouch\n    // will never call it\n    function sumsqr(values) {\n      var _sumsqr = 0;\n      for (var i = 0, len = values.length; i < len; i++) {\n        var num = values[i];\n        _sumsqr += (num * num);\n      }\n      return _sumsqr;\n    }\n    return {\n      sum     : sum(values),\n      min     : Math.min.apply(null, values),\n      max     : Math.max.apply(null, values),\n      count   : values.length,\n      sumsqr : sumsqr(values)\n    };\n  }\n};\n\nfunction addHttpParam(paramName, opts, params, asJson) {\n  // add an http param from opts to params, optionally json-encoded\n  var val = opts[paramName];\n  if (typeof val !== 'undefined') {\n    if (asJson) {\n      val = encodeURIComponent(JSON.stringify(val));\n    }\n    params.push(paramName + '=' + val);\n  }\n}\n\nfunction coerceInteger(integerCandidate) {\n  if (typeof integerCandidate !== 'undefined') {\n    var asNumber = Number(integerCandidate);\n    // prevents e.g. '1foo' or '1.1' being coerced to 1\n    if (!isNaN(asNumber) && asNumber === parseInt(integerCandidate, 10)) {\n      return asNumber;\n    } else {\n      return integerCandidate;\n    }\n  }\n}\n\nfunction coerceOptions(opts) {\n  opts.group_level = coerceInteger(opts.group_level);\n  opts.limit = coerceInteger(opts.limit);\n  opts.skip = coerceInteger(opts.skip);\n  return opts;\n}\n\nfunction checkPositiveInteger(number) {\n  if (number) {\n    if (typeof number !== 'number') {\n      return  new QueryParseError('Invalid value for integer: \"' +\n      number + '\"');\n    }\n    if (number < 0) {\n      return new QueryParseError('Invalid value for positive integer: ' +\n        '\"' + number + '\"');\n    }\n  }\n}\n\nfunction checkQueryParseError(options, fun) {\n  var startkeyName = options.descending ? 'endkey' : 'startkey';\n  var endkeyName = options.descending ? 'startkey' : 'endkey';\n\n  if (typeof options[startkeyName] !== 'undefined' &&\n    typeof options[endkeyName] !== 'undefined' &&\n    collate(options[startkeyName], options[endkeyName]) > 0) {\n    throw new QueryParseError('No rows can match your key range, ' +\n    'reverse your start_key and end_key or set {descending : true}');\n  } else if (fun.reduce && options.reduce !== false) {\n    if (options.include_docs) {\n      throw new QueryParseError('{include_docs:true} is invalid for reduce');\n    } else if (options.keys && options.keys.length > 1 &&\n        !options.group && !options.group_level) {\n      throw new QueryParseError('Multi-key fetches for reduce views must use ' +\n      '{group: true}');\n    }\n  }\n  ['group_level', 'limit', 'skip'].forEach(function (optionName) {\n    var error = checkPositiveInteger(options[optionName]);\n    if (error) {\n      throw error;\n    }\n  });\n}\n\nfunction httpQuery(db, fun, opts) {\n  // List of parameters to add to the PUT request\n  var params = [];\n  var body;\n  var method = 'GET';\n\n  // If opts.reduce exists and is defined, then add it to the list\n  // of parameters.\n  // If reduce=false then the results are that of only the map function\n  // not the final result of map and reduce.\n  addHttpParam('reduce', opts, params);\n  addHttpParam('include_docs', opts, params);\n  addHttpParam('attachments', opts, params);\n  addHttpParam('limit', opts, params);\n  addHttpParam('descending', opts, params);\n  addHttpParam('group', opts, params);\n  addHttpParam('group_level', opts, params);\n  addHttpParam('skip', opts, params);\n  addHttpParam('stale', opts, params);\n  addHttpParam('conflicts', opts, params);\n  addHttpParam('startkey', opts, params, true);\n  addHttpParam('start_key', opts, params, true);\n  addHttpParam('endkey', opts, params, true);\n  addHttpParam('end_key', opts, params, true);\n  addHttpParam('inclusive_end', opts, params);\n  addHttpParam('key', opts, params, true);\n\n  // Format the list of parameters into a valid URI query string\n  params = params.join('&');\n  params = params === '' ? '' : '?' + params;\n\n  // If keys are supplied, issue a POST to circumvent GET query string limits\n  // see http://wiki.apache.org/couchdb/HTTP_view_API#Querying_Options\n  if (typeof opts.keys !== 'undefined') {\n    var MAX_URL_LENGTH = 2000;\n    // according to http://stackoverflow.com/a/417184/680742,\n    // the de facto URL length limit is 2000 characters\n\n    var keysAsString =\n      'keys=' + encodeURIComponent(JSON.stringify(opts.keys));\n    if (keysAsString.length + params.length + 1 <= MAX_URL_LENGTH) {\n      // If the keys are short enough, do a GET. we do this to work around\n      // Safari not understanding 304s on POSTs (see pouchdb/pouchdb#1239)\n      params += (params[0] === '?' ? '&' : '?') + keysAsString;\n    } else {\n      method = 'POST';\n      if (typeof fun === 'string') {\n        body = {keys: opts.keys};\n      } else { // fun is {map : mapfun}, so append to this\n        fun.keys = opts.keys;\n      }\n    }\n  }\n\n  // We are referencing a query defined in the design doc\n  if (typeof fun === 'string') {\n    var parts = parseViewName(fun);\n    return db.request({\n      method: method,\n      url: '_design/' + parts[0] + '/_view/' + parts[1] + params,\n      body: body\n    }).then(postprocessAttachments(opts));\n  }\n\n  // We are using a temporary view, terrible for performance, good for testing\n  body = body || {};\n  Object.keys(fun).forEach(function (key) {\n    if (Array.isArray(fun[key])) {\n      body[key] = fun[key];\n    } else {\n      body[key] = fun[key].toString();\n    }\n  });\n  return db.request({\n    method: 'POST',\n    url: '_temp_view' + params,\n    body: body\n  }).then(postprocessAttachments(opts));\n}\n\n// custom adapters can define their own api._query\n// and override the default behavior\n/* istanbul ignore next */\nfunction customQuery(db, fun, opts) {\n  return new PouchPromise(function (resolve, reject) {\n    db._query(fun, opts, function (err, res) {\n      if (err) {\n        return reject(err);\n      }\n      resolve(res);\n    });\n  });\n}\n\n// custom adapters can define their own api._viewCleanup\n// and override the default behavior\n/* istanbul ignore next */\nfunction customViewCleanup(db) {\n  return new PouchPromise(function (resolve, reject) {\n    db._viewCleanup(function (err, res) {\n      if (err) {\n        return reject(err);\n      }\n      resolve(res);\n    });\n  });\n}\n\nfunction defaultsTo(value) {\n  return function (reason) {\n    /* istanbul ignore else */\n    if (reason.status === 404) {\n      return value;\n    } else {\n      throw reason;\n    }\n  };\n}\n\n// returns a promise for a list of docs to update, based on the input docId.\n// the order doesn't matter, because post-3.2.0, bulkDocs\n// is an atomic operation in all three adapters.\nfunction getDocsToPersist(docId, view, docIdsToChangesAndEmits) {\n  var metaDocId = '_local/doc_' + docId;\n  var defaultMetaDoc = {_id: metaDocId, keys: []};\n  var docData = docIdsToChangesAndEmits[docId];\n  var indexableKeysToKeyValues = docData.indexableKeysToKeyValues;\n  var changes = docData.changes;\n\n  function getMetaDoc() {\n    if (isGenOne(changes)) {\n      // generation 1, so we can safely assume initial state\n      // for performance reasons (avoids unnecessary GETs)\n      return PouchPromise.resolve(defaultMetaDoc);\n    }\n    return view.db.get(metaDocId).catch(defaultsTo(defaultMetaDoc));\n  }\n\n  function getKeyValueDocs(metaDoc) {\n    if (!metaDoc.keys.length) {\n      // no keys, no need for a lookup\n      return PouchPromise.resolve({rows: []});\n    }\n    return view.db.allDocs({\n      keys: metaDoc.keys,\n      include_docs: true\n    });\n  }\n\n  function processKvDocs(metaDoc, kvDocsRes) {\n    var kvDocs = [];\n    var oldKeysMap = {};\n\n    for (var i = 0, len = kvDocsRes.rows.length; i < len; i++) {\n      var row = kvDocsRes.rows[i];\n      var doc = row.doc;\n      if (!doc) { // deleted\n        continue;\n      }\n      kvDocs.push(doc);\n      oldKeysMap[doc._id] = true;\n      doc._deleted = !indexableKeysToKeyValues[doc._id];\n      if (!doc._deleted) {\n        var keyValue = indexableKeysToKeyValues[doc._id];\n        if ('value' in keyValue) {\n          doc.value = keyValue.value;\n        }\n      }\n    }\n\n    var newKeys = Object.keys(indexableKeysToKeyValues);\n    newKeys.forEach(function (key) {\n      if (!oldKeysMap[key]) {\n        // new doc\n        var kvDoc = {\n          _id: key\n        };\n        var keyValue = indexableKeysToKeyValues[key];\n        if ('value' in keyValue) {\n          kvDoc.value = keyValue.value;\n        }\n        kvDocs.push(kvDoc);\n      }\n    });\n    metaDoc.keys = uniq(newKeys.concat(metaDoc.keys));\n    kvDocs.push(metaDoc);\n\n    return kvDocs;\n  }\n\n  return getMetaDoc().then(function (metaDoc) {\n    return getKeyValueDocs(metaDoc).then(function (kvDocsRes) {\n      return processKvDocs(metaDoc, kvDocsRes);\n    });\n  });\n}\n\n// updates all emitted key/value docs and metaDocs in the mrview database\n// for the given batch of documents from the source database\nfunction saveKeyValues(view, docIdsToChangesAndEmits, seq) {\n  var seqDocId = '_local/lastSeq';\n  return view.db.get(seqDocId)\n  .catch(defaultsTo({_id: seqDocId, seq: 0}))\n  .then(function (lastSeqDoc) {\n    var docIds = Object.keys(docIdsToChangesAndEmits);\n    return PouchPromise.all(docIds.map(function (docId) {\n      return getDocsToPersist(docId, view, docIdsToChangesAndEmits);\n    })).then(function (listOfDocsToPersist) {\n      var docsToPersist = flatten(listOfDocsToPersist);\n      lastSeqDoc.seq = seq;\n      docsToPersist.push(lastSeqDoc);\n      // write all docs in a single operation, update the seq once\n      return view.db.bulkDocs({docs : docsToPersist});\n    });\n  });\n}\n\nfunction getQueue(view) {\n  var viewName = typeof view === 'string' ? view : view.name;\n  var queue = persistentQueues[viewName];\n  if (!queue) {\n    queue = persistentQueues[viewName] = new TaskQueue$1();\n  }\n  return queue;\n}\n\nfunction updateView(view) {\n  return sequentialize(getQueue(view), function () {\n    return updateViewInQueue(view);\n  })();\n}\n\nfunction updateViewInQueue(view) {\n  // bind the emit function once\n  var mapResults;\n  var doc;\n\n  function emit(key, value) {\n    var output = {id: doc._id, key: normalizeKey(key)};\n    // Don't explicitly store the value unless it's defined and non-null.\n    // This saves on storage space, because often people don't use it.\n    if (typeof value !== 'undefined' && value !== null) {\n      output.value = normalizeKey(value);\n    }\n    mapResults.push(output);\n  }\n\n  var mapFun;\n  // for temp_views one can use emit(doc, emit), see #38\n  if (typeof view.mapFun === \"function\" && view.mapFun.length === 2) {\n    var origMap = view.mapFun;\n    mapFun = function (doc) {\n      return origMap(doc, emit);\n    };\n  } else {\n    mapFun = evalFunctionWithEval(view.mapFun.toString(), emit);\n  }\n\n  var currentSeq = view.seq || 0;\n\n  function processChange(docIdsToChangesAndEmits, seq) {\n    return function () {\n      return saveKeyValues(view, docIdsToChangesAndEmits, seq);\n    };\n  }\n\n  var queue = new TaskQueue$1();\n  // TODO(neojski): https://github.com/daleharvey/pouchdb/issues/1521\n\n  return new PouchPromise(function (resolve, reject) {\n\n    function complete() {\n      queue.finish().then(function () {\n        view.seq = currentSeq;\n        resolve();\n      });\n    }\n\n    function processNextBatch() {\n      view.sourceDB.changes({\n        conflicts: true,\n        include_docs: true,\n        style: 'all_docs',\n        since: currentSeq,\n        limit: CHANGES_BATCH_SIZE$1\n      }).on('complete', function (response) {\n        var results = response.results;\n        if (!results.length) {\n          return complete();\n        }\n        var docIdsToChangesAndEmits = {};\n        for (var i = 0, l = results.length; i < l; i++) {\n          var change = results[i];\n          if (change.doc._id[0] !== '_') {\n            mapResults = [];\n            doc = change.doc;\n\n            if (!doc._deleted) {\n              tryCode$1(view.sourceDB, mapFun, [doc]);\n            }\n            mapResults.sort(sortByKeyThenValue);\n\n            var indexableKeysToKeyValues = {};\n            var lastKey;\n            for (var j = 0, jl = mapResults.length; j < jl; j++) {\n              var obj = mapResults[j];\n              var complexKey = [obj.key, obj.id];\n              if (collate(obj.key, lastKey) === 0) {\n                complexKey.push(j); // dup key+id, so make it unique\n              }\n              var indexableKey = toIndexableString(complexKey);\n              indexableKeysToKeyValues[indexableKey] = obj;\n              lastKey = obj.key;\n            }\n            docIdsToChangesAndEmits[change.doc._id] = {\n              indexableKeysToKeyValues: indexableKeysToKeyValues,\n              changes: change.changes\n            };\n          }\n          currentSeq = change.seq;\n        }\n        queue.add(processChange(docIdsToChangesAndEmits, currentSeq));\n        if (results.length < CHANGES_BATCH_SIZE$1) {\n          return complete();\n        }\n        return processNextBatch();\n      }).on('error', onError);\n      /* istanbul ignore next */\n      function onError(err) {\n        reject(err);\n      }\n    }\n\n    processNextBatch();\n  });\n}\n\nfunction reduceView(view, results, options) {\n  if (options.group_level === 0) {\n    delete options.group_level;\n  }\n\n  var shouldGroup = options.group || options.group_level;\n\n  var reduceFun;\n  if (builtInReduce[view.reduceFun]) {\n    reduceFun = builtInReduce[view.reduceFun];\n  } else {\n    reduceFun = evalFunctionWithEval(view.reduceFun.toString());\n  }\n\n  var groups = [];\n  var lvl = isNaN(options.group_level) ? Number.POSITIVE_INFINITY :\n    options.group_level;\n  results.forEach(function (e) {\n    var last = groups[groups.length - 1];\n    var groupKey = shouldGroup ? e.key : null;\n\n    // only set group_level for array keys\n    if (shouldGroup && Array.isArray(groupKey)) {\n      groupKey = groupKey.slice(0, lvl);\n    }\n\n    if (last && collate(last.groupKey, groupKey) === 0) {\n      last.keys.push([e.key, e.id]);\n      last.values.push(e.value);\n      return;\n    }\n    groups.push({\n      keys: [[e.key, e.id]],\n      values: [e.value],\n      groupKey: groupKey\n    });\n  });\n  results = [];\n  for (var i = 0, len = groups.length; i < len; i++) {\n    var e = groups[i];\n    var reduceTry = tryCode$1(view.sourceDB, reduceFun,\n      [e.keys, e.values, false]);\n    if (reduceTry.error && reduceTry.error instanceof BuiltInError) {\n      // CouchDB returns an error if a built-in errors out\n      throw reduceTry.error;\n    }\n    results.push({\n      // CouchDB just sets the value to null if a non-built-in errors out\n      value: reduceTry.error ? null : reduceTry.output,\n      key: e.groupKey\n    });\n  }\n  // no total_rows/offset when reducing\n  return {rows: sliceResults(results, options.limit, options.skip)};\n}\n\nfunction queryView(view, opts) {\n  return sequentialize(getQueue(view), function () {\n    return queryViewInQueue(view, opts);\n  })();\n}\n\nfunction queryViewInQueue(view, opts) {\n  var totalRows;\n  var shouldReduce = view.reduceFun && opts.reduce !== false;\n  var skip = opts.skip || 0;\n  if (typeof opts.keys !== 'undefined' && !opts.keys.length) {\n    // equivalent query\n    opts.limit = 0;\n    delete opts.keys;\n  }\n\n  function fetchFromView(viewOpts) {\n    viewOpts.include_docs = true;\n    return view.db.allDocs(viewOpts).then(function (res) {\n      totalRows = res.total_rows;\n      return res.rows.map(function (result) {\n\n        // implicit migration - in older versions of PouchDB,\n        // we explicitly stored the doc as {id: ..., key: ..., value: ...}\n        // this is tested in a migration test\n        /* istanbul ignore next */\n        if ('value' in result.doc && typeof result.doc.value === 'object' &&\n            result.doc.value !== null) {\n          var keys = Object.keys(result.doc.value).sort();\n          // this detection method is not perfect, but it's unlikely the user\n          // emitted a value which was an object with these 3 exact keys\n          var expectedKeys = ['id', 'key', 'value'];\n          if (!(keys < expectedKeys || keys > expectedKeys)) {\n            return result.doc.value;\n          }\n        }\n\n        var parsedKeyAndDocId = parseIndexableString(result.doc._id);\n        return {\n          key: parsedKeyAndDocId[0],\n          id: parsedKeyAndDocId[1],\n          value: ('value' in result.doc ? result.doc.value : null)\n        };\n      });\n    });\n  }\n\n  function onMapResultsReady(rows) {\n    var finalResults;\n    if (shouldReduce) {\n      finalResults = reduceView(view, rows, opts);\n    } else {\n      finalResults = {\n        total_rows: totalRows,\n        offset: skip,\n        rows: rows\n      };\n    }\n    if (opts.include_docs) {\n      var docIds = uniq(rows.map(rowToDocId));\n\n      return view.sourceDB.allDocs({\n        keys: docIds,\n        include_docs: true,\n        conflicts: opts.conflicts,\n        attachments: opts.attachments,\n        binary: opts.binary\n      }).then(function (allDocsRes) {\n        var docIdsToDocs = {};\n        allDocsRes.rows.forEach(function (row) {\n          if (row.doc) {\n            docIdsToDocs['$' + row.id] = row.doc;\n          }\n        });\n        rows.forEach(function (row) {\n          var docId = rowToDocId(row);\n          var doc = docIdsToDocs['$' + docId];\n          if (doc) {\n            row.doc = doc;\n          }\n        });\n        return finalResults;\n      });\n    } else {\n      return finalResults;\n    }\n  }\n\n  if (typeof opts.keys !== 'undefined') {\n    var keys = opts.keys;\n    var fetchPromises = keys.map(function (key) {\n      var viewOpts = {\n        startkey : toIndexableString([key]),\n        endkey   : toIndexableString([key, {}])\n      };\n      return fetchFromView(viewOpts);\n    });\n    return PouchPromise.all(fetchPromises).then(flatten).then(onMapResultsReady);\n  } else { // normal query, no 'keys'\n    var viewOpts = {\n      descending : opts.descending\n    };\n    if (opts.start_key) {\n        opts.startkey = opts.start_key;\n    }\n    if (opts.end_key) {\n        opts.endkey = opts.end_key;\n    }\n    if (typeof opts.startkey !== 'undefined') {\n      viewOpts.startkey = opts.descending ?\n        toIndexableString([opts.startkey, {}]) :\n        toIndexableString([opts.startkey]);\n    }\n    if (typeof opts.endkey !== 'undefined') {\n      var inclusiveEnd = opts.inclusive_end !== false;\n      if (opts.descending) {\n        inclusiveEnd = !inclusiveEnd;\n      }\n\n      viewOpts.endkey = toIndexableString(\n        inclusiveEnd ? [opts.endkey, {}] : [opts.endkey]);\n    }\n    if (typeof opts.key !== 'undefined') {\n      var keyStart = toIndexableString([opts.key]);\n      var keyEnd = toIndexableString([opts.key, {}]);\n      if (viewOpts.descending) {\n        viewOpts.endkey = keyStart;\n        viewOpts.startkey = keyEnd;\n      } else {\n        viewOpts.startkey = keyStart;\n        viewOpts.endkey = keyEnd;\n      }\n    }\n    if (!shouldReduce) {\n      if (typeof opts.limit === 'number') {\n        viewOpts.limit = opts.limit;\n      }\n      viewOpts.skip = skip;\n    }\n    return fetchFromView(viewOpts).then(onMapResultsReady);\n  }\n}\n\nfunction httpViewCleanup(db) {\n  return db.request({\n    method: 'POST',\n    url: '_view_cleanup'\n  });\n}\n\nfunction localViewCleanup(db) {\n  return db.get('_local/mrviews').then(function (metaDoc) {\n    var docsToViews = {};\n    Object.keys(metaDoc.views).forEach(function (fullViewName) {\n      var parts = parseViewName(fullViewName);\n      var designDocName = '_design/' + parts[0];\n      var viewName = parts[1];\n      docsToViews[designDocName] = docsToViews[designDocName] || {};\n      docsToViews[designDocName][viewName] = true;\n    });\n    var opts = {\n      keys : Object.keys(docsToViews),\n      include_docs : true\n    };\n    return db.allDocs(opts).then(function (res) {\n      var viewsToStatus = {};\n      res.rows.forEach(function (row) {\n        var ddocName = row.key.substring(8);\n        Object.keys(docsToViews[row.key]).forEach(function (viewName) {\n          var fullViewName = ddocName + '/' + viewName;\n          /* istanbul ignore if */\n          if (!metaDoc.views[fullViewName]) {\n            // new format, without slashes, to support PouchDB 2.2.0\n            // migration test in pouchdb's browser.migration.js verifies this\n            fullViewName = viewName;\n          }\n          var viewDBNames = Object.keys(metaDoc.views[fullViewName]);\n          // design doc deleted, or view function nonexistent\n          var statusIsGood = row.doc && row.doc.views &&\n            row.doc.views[viewName];\n          viewDBNames.forEach(function (viewDBName) {\n            viewsToStatus[viewDBName] =\n              viewsToStatus[viewDBName] || statusIsGood;\n          });\n        });\n      });\n      var dbsToDelete = Object.keys(viewsToStatus).filter(\n        function (viewDBName) { return !viewsToStatus[viewDBName]; });\n      var destroyPromises = dbsToDelete.map(function (viewDBName) {\n        return sequentialize(getQueue(viewDBName), function () {\n          return new db.constructor(viewDBName, db.__opts).destroy();\n        })();\n      });\n      return PouchPromise.all(destroyPromises).then(function () {\n        return {ok: true};\n      });\n    });\n  }, defaultsTo({ok: true}));\n}\n\nvar viewCleanup = callbackify(function () {\n  var db = this;\n  if (db.type() === 'http') {\n    return httpViewCleanup(db);\n  }\n  /* istanbul ignore next */\n  if (typeof db._viewCleanup === 'function') {\n    return customViewCleanup(db);\n  }\n  return localViewCleanup(db);\n});\n\nfunction queryPromised(db, fun, opts) {\n  if (db.type() === 'http') {\n    return httpQuery(db, fun, opts);\n  }\n\n  /* istanbul ignore next */\n  if (typeof db._query === 'function') {\n    return customQuery(db, fun, opts);\n  }\n\n  if (typeof fun !== 'string') {\n    // temp_view\n    checkQueryParseError(opts, fun);\n\n    var createViewOpts = {\n      db : db,\n      viewName : 'temp_view/temp_view',\n      map : fun.map,\n      reduce : fun.reduce,\n      temporary : true\n    };\n    tempViewQueue.add(function () {\n      return createView(createViewOpts).then(function (view) {\n        function cleanup() {\n          return view.db.destroy();\n        }\n        return fin(updateView(view).then(function () {\n          return queryView(view, opts);\n        }), cleanup);\n      });\n    });\n    return tempViewQueue.finish();\n  } else {\n    // persistent view\n    var fullViewName = fun;\n    var parts = parseViewName(fullViewName);\n    var designDocName = parts[0];\n    var viewName = parts[1];\n    return db.get('_design/' + designDocName).then(function (doc) {\n      var fun = doc.views && doc.views[viewName];\n\n      if (!fun || typeof fun.map !== 'string') {\n        throw new NotFoundError('ddoc ' + designDocName +\n        ' has no view named ' + viewName);\n      }\n      checkQueryParseError(opts, fun);\n\n      var createViewOpts = {\n        db : db,\n        viewName : fullViewName,\n        map : fun.map,\n        reduce : fun.reduce\n      };\n      return createView(createViewOpts).then(function (view) {\n        if (opts.stale === 'ok' || opts.stale === 'update_after') {\n          if (opts.stale === 'update_after') {\n            process.nextTick(function () {\n              updateView(view);\n            });\n          }\n          return queryView(view, opts);\n        } else { // stale not ok\n          return updateView(view).then(function () {\n            return queryView(view, opts);\n          });\n        }\n      });\n    });\n  }\n}\n\nvar query = function (fun, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts ? coerceOptions(opts) : {};\n\n  if (typeof fun === 'function') {\n    fun = {map : fun};\n  }\n\n  var db = this;\n  var promise = PouchPromise.resolve().then(function () {\n    return queryPromised(db, fun, opts);\n  });\n  promisedCallback(promise, callback);\n  return promise;\n};\n\n\nvar mapreduce = {\n  query: query,\n  viewCleanup: viewCleanup\n};\n\nfunction isGenOne$1(rev) {\n  return /^1-/.test(rev);\n}\n\nfunction fileHasChanged(localDoc, remoteDoc, filename) {\n  return !localDoc._attachments ||\n         !localDoc._attachments[filename] ||\n         localDoc._attachments[filename].digest !== remoteDoc._attachments[filename].digest;\n}\n\nfunction getDocAttachments(db, doc) {\n  var filenames = Object.keys(doc._attachments);\n  return PouchPromise.all(filenames.map(function (filename) {\n    return db.getAttachment(doc._id, filename, {rev: doc._rev});\n  }));\n}\n\nfunction getDocAttachmentsFromTargetOrSource(target, src, doc) {\n  var doCheckForLocalAttachments = src.type() === 'http' && target.type() !== 'http';\n  var filenames = Object.keys(doc._attachments);\n\n  if (!doCheckForLocalAttachments) {\n    return getDocAttachments(src, doc);\n  }\n\n  return target.get(doc._id).then(function (localDoc) {\n    return PouchPromise.all(filenames.map(function (filename) {\n      if (fileHasChanged(localDoc, doc, filename)) {\n        return src.getAttachment(doc._id, filename);\n      }\n\n      return target.getAttachment(localDoc._id, filename);\n    }));\n  }).catch(function (error) {\n    /* istanbul ignore if */\n    if (error.status !== 404) {\n      throw error;\n    }\n\n    return getDocAttachments(src, doc);\n  });\n}\n\nfunction createBulkGetOpts(diffs) {\n  var requests = [];\n  Object.keys(diffs).forEach(function (id) {\n    var missingRevs = diffs[id].missing;\n    missingRevs.forEach(function (missingRev) {\n      requests.push({\n        id: id,\n        rev: missingRev\n      });\n    });\n  });\n\n  return {\n    docs: requests,\n    revs: true\n  };\n}\n\n//\n// Fetch all the documents from the src as described in the \"diffs\",\n// which is a mapping of docs IDs to revisions. If the state ever\n// changes to \"cancelled\", then the returned promise will be rejected.\n// Else it will be resolved with a list of fetched documents.\n//\nfunction getDocs(src, target, diffs, state) {\n  diffs = clone(diffs); // we do not need to modify this\n\n  var resultDocs = [],\n      ok = true;\n\n  function getAllDocs() {\n\n    var bulkGetOpts = createBulkGetOpts(diffs);\n\n    if (!bulkGetOpts.docs.length) { // optimization: skip empty requests\n      return;\n    }\n\n    return src.bulkGet(bulkGetOpts).then(function (bulkGetResponse) {\n      /* istanbul ignore if */\n      if (state.cancelled) {\n        throw new Error('cancelled');\n      }\n      return PouchPromise.all(bulkGetResponse.results.map(function (bulkGetInfo) {\n        return PouchPromise.all(bulkGetInfo.docs.map(function (doc) {\n          var remoteDoc = doc.ok;\n\n          if (doc.error) {\n            // when AUTO_COMPACTION is set, docs can be returned which look\n            // like this: {\"missing\":\"1-7c3ac256b693c462af8442f992b83696\"}\n            ok = false;\n          }\n\n          if (!remoteDoc || !remoteDoc._attachments) {\n            return remoteDoc;\n          }\n\n          return getDocAttachmentsFromTargetOrSource(target, src, remoteDoc).then(function (attachments) {\n            var filenames = Object.keys(remoteDoc._attachments);\n            attachments.forEach(function (attachment, i) {\n              var att = remoteDoc._attachments[filenames[i]];\n              delete att.stub;\n              delete att.length;\n              att.data = attachment;\n            });\n\n            return remoteDoc;\n          });\n        }));\n      }))\n\n      .then(function (results) {\n        resultDocs = resultDocs.concat(flatten(results).filter(Boolean));\n      });\n    });\n  }\n\n  function hasAttachments(doc) {\n    return doc._attachments && Object.keys(doc._attachments).length > 0;\n  }\n\n  function fetchRevisionOneDocs(ids) {\n    // Optimization: fetch gen-1 docs and attachments in\n    // a single request using _all_docs\n    return src.allDocs({\n      keys: ids,\n      include_docs: true\n    }).then(function (res) {\n      if (state.cancelled) {\n        throw new Error('cancelled');\n      }\n      res.rows.forEach(function (row) {\n        if (row.deleted || !row.doc || !isGenOne$1(row.value.rev) ||\n            hasAttachments(row.doc)) {\n          // if any of these conditions apply, we need to fetch using get()\n          return;\n        }\n\n        // the doc we got back from allDocs() is sufficient\n        resultDocs.push(row.doc);\n        delete diffs[row.id];\n      });\n    });\n  }\n\n  function getRevisionOneDocs() {\n    // filter out the generation 1 docs and get them\n    // leaving the non-generation one docs to be got otherwise\n    var ids = Object.keys(diffs).filter(function (id) {\n      var missing = diffs[id].missing;\n      return missing.length === 1 && isGenOne$1(missing[0]);\n    });\n    if (ids.length > 0) {\n      return fetchRevisionOneDocs(ids);\n    }\n  }\n\n  function returnResult() {\n    return { ok:ok, docs:resultDocs };\n  }\n\n  return PouchPromise.resolve()\n    .then(getRevisionOneDocs)\n    .then(getAllDocs)\n    .then(returnResult);\n}\n\nvar CHECKPOINT_VERSION = 1;\nvar REPLICATOR = \"pouchdb\";\n// This is an arbitrary number to limit the\n// amount of replication history we save in the checkpoint.\n// If we save too much, the checkpoing docs will become very big,\n// if we save fewer, we'll run a greater risk of having to\n// read all the changes from 0 when checkpoint PUTs fail\n// CouchDB 2.0 has a more involved history pruning,\n// but let's go for the simple version for now.\nvar CHECKPOINT_HISTORY_SIZE = 5;\nvar LOWEST_SEQ = 0;\n\nfunction updateCheckpoint(db, id, checkpoint, session, returnValue) {\n  return db.get(id).catch(function (err) {\n    if (err.status === 404) {\n      if (db.type() === 'http') {\n        explainError(\n          404, 'PouchDB is just checking if a remote checkpoint exists.'\n        );\n      }\n      return {\n        session_id: session,\n        _id: id,\n        history: [],\n        replicator: REPLICATOR,\n        version: CHECKPOINT_VERSION\n      };\n    }\n    throw err;\n  }).then(function (doc) {\n    if (returnValue.cancelled) {\n      return;\n    }\n\n    // if the checkpoint has not changed, do not update\n    if (doc.last_seq === checkpoint) {\n      return;\n    }\n\n    // Filter out current entry for this replication\n    doc.history = (doc.history || []).filter(function (item) {\n      return item.session_id !== session;\n    });\n\n    // Add the latest checkpoint to history\n    doc.history.unshift({\n      last_seq: checkpoint,\n      session_id: session\n    });\n\n    // Just take the last pieces in history, to\n    // avoid really big checkpoint docs.\n    // see comment on history size above\n    doc.history = doc.history.slice(0, CHECKPOINT_HISTORY_SIZE);\n\n    doc.version = CHECKPOINT_VERSION;\n    doc.replicator = REPLICATOR;\n\n    doc.session_id = session;\n    doc.last_seq = checkpoint;\n\n    return db.put(doc).catch(function (err) {\n      if (err.status === 409) {\n        // retry; someone is trying to write a checkpoint simultaneously\n        return updateCheckpoint(db, id, checkpoint, session, returnValue);\n      }\n      throw err;\n    });\n  });\n}\n\nfunction Checkpointer(src, target, id, returnValue) {\n  this.src = src;\n  this.target = target;\n  this.id = id;\n  this.returnValue = returnValue;\n}\n\nCheckpointer.prototype.writeCheckpoint = function (checkpoint, session) {\n  var self = this;\n  return this.updateTarget(checkpoint, session).then(function () {\n    return self.updateSource(checkpoint, session);\n  });\n};\n\nCheckpointer.prototype.updateTarget = function (checkpoint, session) {\n  return updateCheckpoint(this.target, this.id, checkpoint,\n    session, this.returnValue);\n};\n\nCheckpointer.prototype.updateSource = function (checkpoint, session) {\n  var self = this;\n  if (this.readOnlySource) {\n    return PouchPromise.resolve(true);\n  }\n  return updateCheckpoint(this.src, this.id, checkpoint,\n    session, this.returnValue)\n    .catch(function (err) {\n      if (isForbiddenError(err)) {\n        self.readOnlySource = true;\n        return true;\n      }\n      throw err;\n    });\n};\n\nvar comparisons = {\n  \"undefined\": function (targetDoc, sourceDoc) {\n    // This is the previous comparison function\n    if (collate(targetDoc.last_seq, sourceDoc.last_seq) === 0) {\n      return sourceDoc.last_seq;\n    }\n    /* istanbul ignore next */\n    return 0;\n  },\n  \"1\": function (targetDoc, sourceDoc) {\n    // This is the comparison function ported from CouchDB\n    return compareReplicationLogs(sourceDoc, targetDoc).last_seq;\n  }\n};\n\nCheckpointer.prototype.getCheckpoint = function () {\n  var self = this;\n  return self.target.get(self.id).then(function (targetDoc) {\n    if (self.readOnlySource) {\n      return PouchPromise.resolve(targetDoc.last_seq);\n    }\n\n    return self.src.get(self.id).then(function (sourceDoc) {\n      // Since we can't migrate an old version doc to a new one\n      // (no session id), we just go with the lowest seq in this case\n      /* istanbul ignore if */\n      if (targetDoc.version !== sourceDoc.version) {\n        return LOWEST_SEQ;\n      }\n\n      var version;\n      if (targetDoc.version) {\n        version = targetDoc.version.toString();\n      } else {\n        version = \"undefined\";\n      }\n\n      if (version in comparisons) {\n        return comparisons[version](targetDoc, sourceDoc);\n      }\n      /* istanbul ignore next */\n      return LOWEST_SEQ;\n    }, function (err) {\n      if (err.status === 404 && targetDoc.last_seq) {\n        return self.src.put({\n          _id: self.id,\n          last_seq: LOWEST_SEQ\n        }).then(function () {\n          return LOWEST_SEQ;\n        }, function (err) {\n          if (isForbiddenError(err)) {\n            self.readOnlySource = true;\n            return targetDoc.last_seq;\n          }\n          /* istanbul ignore next */\n          return LOWEST_SEQ;\n        });\n      }\n      throw err;\n    });\n  }).catch(function (err) {\n    if (err.status !== 404) {\n      throw err;\n    }\n    return LOWEST_SEQ;\n  });\n};\n// This checkpoint comparison is ported from CouchDBs source\n// they come from here:\n// https://github.com/apache/couchdb-couch-replicator/blob/master/src/couch_replicator.erl#L863-L906\n\nfunction compareReplicationLogs(srcDoc, tgtDoc) {\n  if (srcDoc.session_id === tgtDoc.session_id) {\n    return {\n      last_seq: srcDoc.last_seq,\n      history: srcDoc.history\n    };\n  }\n\n  return compareReplicationHistory(srcDoc.history, tgtDoc.history);\n}\n\nfunction compareReplicationHistory(sourceHistory, targetHistory) {\n  // the erlang loop via function arguments is not so easy to repeat in JS\n  // therefore, doing this as recursion\n  var S = sourceHistory[0];\n  var sourceRest = sourceHistory.slice(1);\n  var T = targetHistory[0];\n  var targetRest = targetHistory.slice(1);\n\n  if (!S || targetHistory.length === 0) {\n    return {\n      last_seq: LOWEST_SEQ,\n      history: []\n    };\n  }\n\n  var sourceId = S.session_id;\n  /* istanbul ignore if */\n  if (hasSessionId(sourceId, targetHistory)) {\n    return {\n      last_seq: S.last_seq,\n      history: sourceHistory\n    };\n  }\n\n  var targetId = T.session_id;\n  if (hasSessionId(targetId, sourceRest)) {\n    return {\n      last_seq: T.last_seq,\n      history: targetRest\n    };\n  }\n\n  return compareReplicationHistory(sourceRest, targetRest);\n}\n\nfunction hasSessionId(sessionId, history) {\n  var props = history[0];\n  var rest = history.slice(1);\n\n  if (!sessionId || history.length === 0) {\n    return false;\n  }\n\n  if (sessionId === props.session_id) {\n    return true;\n  }\n\n  return hasSessionId(sessionId, rest);\n}\n\nfunction isForbiddenError(err) {\n  return typeof err.status === 'number' && Math.floor(err.status / 100) === 4;\n}\n\nvar STARTING_BACK_OFF = 0;\n\nfunction backOff(opts, returnValue, error, callback) {\n  if (opts.retry === false) {\n    returnValue.emit('error', error);\n    returnValue.removeAllListeners();\n    return;\n  }\n  if (typeof opts.back_off_function !== 'function') {\n    opts.back_off_function = defaultBackOff;\n  }\n  returnValue.emit('requestError', error);\n  if (returnValue.state === 'active' || returnValue.state === 'pending') {\n    returnValue.emit('paused', error);\n    returnValue.state = 'stopped';\n    var backOffSet = function backoffTimeSet() {\n      opts.current_back_off = STARTING_BACK_OFF;\n    };\n    var removeBackOffSetter = function removeBackOffTimeSet() {\n      returnValue.removeListener('active', backOffSet);\n    };\n    returnValue.once('paused', removeBackOffSetter);\n    returnValue.once('active', backOffSet);\n  }\n\n  opts.current_back_off = opts.current_back_off || STARTING_BACK_OFF;\n  opts.current_back_off = opts.back_off_function(opts.current_back_off);\n  setTimeout(callback, opts.current_back_off);\n}\n\nfunction sortObjectPropertiesByKey(queryParams) {\n  return Object.keys(queryParams).sort(collate).reduce(function (result, key) {\n    result[key] = queryParams[key];\n    return result;\n  }, {});\n}\n\n// Generate a unique id particular to this replication.\n// Not guaranteed to align perfectly with CouchDB's rep ids.\nfunction generateReplicationId(src, target, opts) {\n  var docIds = opts.doc_ids ? opts.doc_ids.sort(collate) : '';\n  var filterFun = opts.filter ? opts.filter.toString() : '';\n  var queryParams = '';\n  var filterViewName =  '';\n\n  if (opts.filter && opts.query_params) {\n    queryParams = JSON.stringify(sortObjectPropertiesByKey(opts.query_params));\n  }\n\n  if (opts.filter && opts.filter === '_view') {\n    filterViewName = opts.view.toString();\n  }\n\n  return PouchPromise.all([src.id(), target.id()]).then(function (res) {\n    var queryData = res[0] + res[1] + filterFun + filterViewName +\n      queryParams + docIds;\n    return new PouchPromise(function (resolve) {\n      binaryMd5(queryData, resolve);\n    });\n  }).then(function (md5sum) {\n    // can't use straight-up md5 alphabet, because\n    // the char '/' is interpreted as being for attachments,\n    // and + is also not url-safe\n    md5sum = md5sum.replace(/\\//g, '.').replace(/\\+/g, '_');\n    return '_local/' + md5sum;\n  });\n}\n\nfunction replicate$1(src, target, opts, returnValue, result) {\n  var batches = [];               // list of batches to be processed\n  var currentBatch;               // the batch currently being processed\n  var pendingBatch = {\n    seq: 0,\n    changes: [],\n    docs: []\n  }; // next batch, not yet ready to be processed\n  var writingCheckpoint = false;  // true while checkpoint is being written\n  var changesCompleted = false;   // true when all changes received\n  var replicationCompleted = false; // true when replication has completed\n  var last_seq = 0;\n  var continuous = opts.continuous || opts.live || false;\n  var batch_size = opts.batch_size || 100;\n  var batches_limit = opts.batches_limit || 10;\n  var changesPending = false;     // true while src.changes is running\n  var doc_ids = opts.doc_ids;\n  var repId;\n  var checkpointer;\n  var changedDocs = [];\n  // Like couchdb, every replication gets a unique session id\n  var session = uuid();\n\n  result = result || {\n    ok: true,\n    start_time: new Date(),\n    docs_read: 0,\n    docs_written: 0,\n    doc_write_failures: 0,\n    errors: []\n  };\n\n  var changesOpts = {};\n  returnValue.ready(src, target);\n\n  function initCheckpointer() {\n    if (checkpointer) {\n      return PouchPromise.resolve();\n    }\n    return generateReplicationId(src, target, opts).then(function (res) {\n      repId = res;\n      checkpointer = new Checkpointer(src, target, repId, returnValue);\n    });\n  }\n\n  function writeDocs() {\n    changedDocs = [];\n\n    if (currentBatch.docs.length === 0) {\n      return;\n    }\n    var docs = currentBatch.docs;\n    var bulkOpts = {timeout: opts.timeout};\n    return target.bulkDocs({docs: docs, new_edits: false}, bulkOpts).then(function (res) {\n      /* istanbul ignore if */\n      if (returnValue.cancelled) {\n        completeReplication();\n        throw new Error('cancelled');\n      }\n\n      // `res` doesn't include full documents (which live in `docs`), so we create a map of \n      // (id -> error), and check for errors while iterating over `docs`\n      var errorsById = Object.create(null);\n      res.forEach(function (res) {\n        if (res.error) {\n          errorsById[res.id] = res;\n        }\n      });\n\n      var errorsNo = Object.keys(errorsById).length;\n      result.doc_write_failures += errorsNo;\n      result.docs_written += docs.length - errorsNo;\n\n      docs.forEach(function (doc) {\n        var error = errorsById[doc._id];\n        if (error) {\n          result.errors.push(error);\n          if (error.name === 'unauthorized' || error.name === 'forbidden') {\n            returnValue.emit('denied', clone(error));\n          } else {\n            throw error;\n          }\n        } else {\n          changedDocs.push(doc);\n        }\n      });\n\n    }, function (err) {\n      result.doc_write_failures += docs.length;\n      throw err;\n    });\n  }\n\n  function finishBatch() {\n    if (currentBatch.error) {\n      throw new Error('There was a problem getting docs.');\n    }\n    result.last_seq = last_seq = currentBatch.seq;\n    var outResult = clone(result);\n    if (changedDocs.length) {\n      outResult.docs = changedDocs;\n      returnValue.emit('change', outResult);\n    }\n    writingCheckpoint = true;\n    return checkpointer.writeCheckpoint(currentBatch.seq,\n        session).then(function () {\n      writingCheckpoint = false;\n      /* istanbul ignore if */\n      if (returnValue.cancelled) {\n        completeReplication();\n        throw new Error('cancelled');\n      }\n      currentBatch = undefined;\n      getChanges();\n    }).catch(function (err) {\n      onCheckpointError(err);\n      throw err;\n    });\n  }\n\n  function getDiffs() {\n    var diff = {};\n    currentBatch.changes.forEach(function (change) {\n      // Couchbase Sync Gateway emits these, but we can ignore them\n      /* istanbul ignore if */\n      if (change.id === \"_user/\") {\n        return;\n      }\n      diff[change.id] = change.changes.map(function (x) {\n        return x.rev;\n      });\n    });\n    return target.revsDiff(diff).then(function (diffs) {\n      /* istanbul ignore if */\n      if (returnValue.cancelled) {\n        completeReplication();\n        throw new Error('cancelled');\n      }\n      // currentBatch.diffs elements are deleted as the documents are written\n      currentBatch.diffs = diffs;\n    });\n  }\n\n  function getBatchDocs() {\n    return getDocs(src, target, currentBatch.diffs, returnValue).then(function (got) {\n      currentBatch.error = !got.ok;\n      got.docs.forEach(function (doc) {\n        delete currentBatch.diffs[doc._id];\n        result.docs_read++;\n        currentBatch.docs.push(doc);\n      });\n    });\n  }\n\n  function startNextBatch() {\n    if (returnValue.cancelled || currentBatch) {\n      return;\n    }\n    if (batches.length === 0) {\n      processPendingBatch(true);\n      return;\n    }\n    currentBatch = batches.shift();\n    getDiffs()\n      .then(getBatchDocs)\n      .then(writeDocs)\n      .then(finishBatch)\n      .then(startNextBatch)\n      .catch(function (err) {\n        abortReplication('batch processing terminated with error', err);\n      });\n  }\n\n\n  function processPendingBatch(immediate) {\n    if (pendingBatch.changes.length === 0) {\n      if (batches.length === 0 && !currentBatch) {\n        if ((continuous && changesOpts.live) || changesCompleted) {\n          returnValue.state = 'pending';\n          returnValue.emit('paused');\n        }\n        if (changesCompleted) {\n          completeReplication();\n        }\n      }\n      return;\n    }\n    if (\n      immediate ||\n      changesCompleted ||\n      pendingBatch.changes.length >= batch_size\n    ) {\n      batches.push(pendingBatch);\n      pendingBatch = {\n        seq: 0,\n        changes: [],\n        docs: []\n      };\n      if (returnValue.state === 'pending' || returnValue.state === 'stopped') {\n        returnValue.state = 'active';\n        returnValue.emit('active');\n      }\n      startNextBatch();\n    }\n  }\n\n\n  function abortReplication(reason, err) {\n    if (replicationCompleted) {\n      return;\n    }\n    if (!err.message) {\n      err.message = reason;\n    }\n    result.ok = false;\n    result.status = 'aborting';\n    batches = [];\n    pendingBatch = {\n      seq: 0,\n      changes: [],\n      docs: []\n    };\n    completeReplication(err);\n  }\n\n\n  function completeReplication(fatalError) {\n    if (replicationCompleted) {\n      return;\n    }\n    /* istanbul ignore if */\n    if (returnValue.cancelled) {\n      result.status = 'cancelled';\n      if (writingCheckpoint) {\n        return;\n      }\n    }\n    result.status = result.status || 'complete';\n    result.end_time = new Date();\n    result.last_seq = last_seq;\n    replicationCompleted = true;\n\n    if (fatalError) {\n      fatalError.result = result;\n\n      if (fatalError.name === 'unauthorized' || fatalError.name === 'forbidden') {\n        returnValue.emit('error', fatalError);\n        returnValue.removeAllListeners();\n      } else {\n        backOff(opts, returnValue, fatalError, function () {\n          replicate$1(src, target, opts, returnValue);\n        });\n      }\n    } else {\n      returnValue.emit('complete', result);\n      returnValue.removeAllListeners();\n    }\n  }\n\n\n  function onChange(change) {\n    /* istanbul ignore if */\n    if (returnValue.cancelled) {\n      return completeReplication();\n    }\n    var filter = filterChange(opts)(change);\n    if (!filter) {\n      return;\n    }\n    pendingBatch.seq = change.seq;\n    pendingBatch.changes.push(change);\n    processPendingBatch(batches.length === 0 && changesOpts.live);\n  }\n\n\n  function onChangesComplete(changes) {\n    changesPending = false;\n    /* istanbul ignore if */\n    if (returnValue.cancelled) {\n      return completeReplication();\n    }\n\n    // if no results were returned then we're done,\n    // else fetch more\n    if (changes.results.length > 0) {\n      changesOpts.since = changes.last_seq;\n      getChanges();\n      processPendingBatch(true);\n    } else {\n\n      var complete = function () {\n        if (continuous) {\n          changesOpts.live = true;\n          getChanges();\n        } else {\n          changesCompleted = true;\n        }\n        processPendingBatch(true);\n      };\n\n      // update the checkpoint so we start from the right seq next time\n      if (!currentBatch && changes.results.length === 0) {\n        writingCheckpoint = true;\n        checkpointer.writeCheckpoint(changes.last_seq,\n            session).then(function () {\n          writingCheckpoint = false;\n          result.last_seq = last_seq = changes.last_seq;\n          complete();\n        })\n        .catch(onCheckpointError);\n      } else {\n        complete();\n      }\n    }\n  }\n\n\n  function onChangesError(err) {\n    changesPending = false;\n    /* istanbul ignore if */\n    if (returnValue.cancelled) {\n      return completeReplication();\n    }\n    abortReplication('changes rejected', err);\n  }\n\n\n  function getChanges() {\n    if (!(\n      !changesPending &&\n      !changesCompleted &&\n      batches.length < batches_limit\n      )) {\n      return;\n    }\n    changesPending = true;\n    function abortChanges() {\n      changes.cancel();\n    }\n    function removeListener() {\n      returnValue.removeListener('cancel', abortChanges);\n    }\n\n    if (returnValue._changes) { // remove old changes() and listeners\n      returnValue.removeListener('cancel', returnValue._abortChanges);\n      returnValue._changes.cancel();\n    }\n    returnValue.once('cancel', abortChanges);\n\n    var changes = src.changes(changesOpts)\n      .on('change', onChange);\n    changes.then(removeListener, removeListener);\n    changes.then(onChangesComplete)\n      .catch(onChangesError);\n\n    if (opts.retry) {\n      // save for later so we can cancel if necessary\n      returnValue._changes = changes;\n      returnValue._abortChanges = abortChanges;\n    }\n  }\n\n\n  function startChanges() {\n    initCheckpointer().then(function () {\n      /* istanbul ignore if */\n      if (returnValue.cancelled) {\n        completeReplication();\n        return;\n      }\n      return checkpointer.getCheckpoint().then(function (checkpoint) {\n        last_seq = checkpoint;\n        changesOpts = {\n          since: last_seq,\n          limit: batch_size,\n          batch_size: batch_size,\n          style: 'all_docs',\n          doc_ids: doc_ids,\n          return_docs: true // required so we know when we're done\n        };\n        if (opts.filter) {\n          if (typeof opts.filter !== 'string') {\n            // required for the client-side filter in onChange\n            changesOpts.include_docs = true;\n          } else { // ddoc filter\n            changesOpts.filter = opts.filter;\n          }\n        }\n        if ('heartbeat' in opts) {\n          changesOpts.heartbeat = opts.heartbeat;\n        }\n        if ('timeout' in opts) {\n          changesOpts.timeout = opts.timeout;\n        }\n        if (opts.query_params) {\n          changesOpts.query_params = opts.query_params;\n        }\n        if (opts.view) {\n          changesOpts.view = opts.view;\n        }\n        getChanges();\n      });\n    }).catch(function (err) {\n      abortReplication('getCheckpoint rejected with ', err);\n    });\n  }\n\n  /* istanbul ignore next */\n  function onCheckpointError(err) {\n    writingCheckpoint = false;\n    abortReplication('writeCheckpoint completed with error', err);\n  }\n\n  /* istanbul ignore if */\n  if (returnValue.cancelled) { // cancelled immediately\n    completeReplication();\n    return;\n  }\n\n  if (!returnValue._addedListeners) {\n    returnValue.once('cancel', completeReplication);\n\n    if (typeof opts.complete === 'function') {\n      returnValue.once('error', opts.complete);\n      returnValue.once('complete', function (result) {\n        opts.complete(null, result);\n      });\n    }\n    returnValue._addedListeners = true;\n  }\n\n  if (typeof opts.since === 'undefined') {\n    startChanges();\n  } else {\n    initCheckpointer().then(function () {\n      writingCheckpoint = true;\n      return checkpointer.writeCheckpoint(opts.since, session);\n    }).then(function () {\n      writingCheckpoint = false;\n      /* istanbul ignore if */\n      if (returnValue.cancelled) {\n        completeReplication();\n        return;\n      }\n      last_seq = opts.since;\n      startChanges();\n    }).catch(onCheckpointError);\n  }\n}\n\n// We create a basic promise so the caller can cancel the replication possibly\n// before we have actually started listening to changes etc\ninherits(Replication, events.EventEmitter);\nfunction Replication() {\n  events.EventEmitter.call(this);\n  this.cancelled = false;\n  this.state = 'pending';\n  var self = this;\n  var promise = new PouchPromise(function (fulfill, reject) {\n    self.once('complete', fulfill);\n    self.once('error', reject);\n  });\n  self.then = function (resolve, reject) {\n    return promise.then(resolve, reject);\n  };\n  self.catch = function (reject) {\n    return promise.catch(reject);\n  };\n  // As we allow error handling via \"error\" event as well,\n  // put a stub in here so that rejecting never throws UnhandledError.\n  self.catch(function () {});\n}\n\nReplication.prototype.cancel = function () {\n  this.cancelled = true;\n  this.state = 'cancelled';\n  this.emit('cancel');\n};\n\nReplication.prototype.ready = function (src, target) {\n  var self = this;\n  if (self._readyCalled) {\n    return;\n  }\n  self._readyCalled = true;\n\n  function onDestroy() {\n    self.cancel();\n  }\n  src.once('destroyed', onDestroy);\n  target.once('destroyed', onDestroy);\n  function cleanup() {\n    src.removeListener('destroyed', onDestroy);\n    target.removeListener('destroyed', onDestroy);\n  }\n  self.once('complete', cleanup);\n};\n\nfunction toPouch(db, opts) {\n  var PouchConstructor = opts.PouchConstructor;\n  if (typeof db === 'string') {\n    return new PouchConstructor(db, opts);\n  } else {\n    return db;\n  }\n}\n\nfunction replicate(src, target, opts, callback) {\n\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  if (typeof opts === 'undefined') {\n    opts = {};\n  }\n\n  if (opts.doc_ids && !Array.isArray(opts.doc_ids)) {\n    throw createError(BAD_REQUEST,\n                       \"`doc_ids` filter parameter is not a list.\");\n  }\n\n  opts.complete = callback;\n  opts = clone(opts);\n  opts.continuous = opts.continuous || opts.live;\n  opts.retry = ('retry' in opts) ? opts.retry : false;\n  /*jshint validthis:true */\n  opts.PouchConstructor = opts.PouchConstructor || this;\n  var replicateRet = new Replication(opts);\n  var srcPouch = toPouch(src, opts);\n  var targetPouch = toPouch(target, opts);\n  replicate$1(srcPouch, targetPouch, opts, replicateRet);\n  return replicateRet;\n}\n\ninherits(Sync, events.EventEmitter);\nfunction sync(src, target, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  if (typeof opts === 'undefined') {\n    opts = {};\n  }\n  opts = clone(opts);\n  /*jshint validthis:true */\n  opts.PouchConstructor = opts.PouchConstructor || this;\n  src = toPouch(src, opts);\n  target = toPouch(target, opts);\n  return new Sync(src, target, opts, callback);\n}\n\nfunction Sync(src, target, opts, callback) {\n  var self = this;\n  this.canceled = false;\n\n  var optsPush = opts.push ? jsExtend.extend({}, opts, opts.push) : opts;\n  var optsPull = opts.pull ? jsExtend.extend({}, opts, opts.pull) : opts;\n\n  this.push = replicate(src, target, optsPush);\n  this.pull = replicate(target, src, optsPull);\n\n  this.pushPaused = true;\n  this.pullPaused = true;\n\n  function pullChange(change) {\n    self.emit('change', {\n      direction: 'pull',\n      change: change\n    });\n  }\n  function pushChange(change) {\n    self.emit('change', {\n      direction: 'push',\n      change: change\n    });\n  }\n  function pushDenied(doc) {\n    self.emit('denied', {\n      direction: 'push',\n      doc: doc\n    });\n  }\n  function pullDenied(doc) {\n    self.emit('denied', {\n      direction: 'pull',\n      doc: doc\n    });\n  }\n  function pushPaused() {\n    self.pushPaused = true;\n    /* istanbul ignore if */\n    if (self.pullPaused) {\n      self.emit('paused');\n    }\n  }\n  function pullPaused() {\n    self.pullPaused = true;\n    /* istanbul ignore if */\n    if (self.pushPaused) {\n      self.emit('paused');\n    }\n  }\n  function pushActive() {\n    self.pushPaused = false;\n    /* istanbul ignore if */\n    if (self.pullPaused) {\n      self.emit('active', {\n        direction: 'push'\n      });\n    }\n  }\n  function pullActive() {\n    self.pullPaused = false;\n    /* istanbul ignore if */\n    if (self.pushPaused) {\n      self.emit('active', {\n        direction: 'pull'\n      });\n    }\n  }\n\n  var removed = {};\n\n  function removeAll(type) { // type is 'push' or 'pull'\n    return function (event, func) {\n      var isChange = event === 'change' &&\n        (func === pullChange || func === pushChange);\n      var isDenied = event === 'denied' &&\n        (func === pullDenied || func === pushDenied);\n      var isPaused = event === 'paused' &&\n        (func === pullPaused || func === pushPaused);\n      var isActive = event === 'active' &&\n        (func === pullActive || func === pushActive);\n\n      if (isChange || isDenied || isPaused || isActive) {\n        if (!(event in removed)) {\n          removed[event] = {};\n        }\n        removed[event][type] = true;\n        if (Object.keys(removed[event]).length === 2) {\n          // both push and pull have asked to be removed\n          self.removeAllListeners(event);\n        }\n      }\n    };\n  }\n\n  if (opts.live) {\n    this.push.on('complete', self.pull.cancel.bind(self.pull));\n    this.pull.on('complete', self.push.cancel.bind(self.push));\n  }\n\n  this.on('newListener', function (event) {\n    if (event === 'change') {\n      self.pull.on('change', pullChange);\n      self.push.on('change', pushChange);\n    } else if (event === 'denied') {\n      self.pull.on('denied', pullDenied);\n      self.push.on('denied', pushDenied);\n    } else if (event === 'active') {\n      self.pull.on('active', pullActive);\n      self.push.on('active', pushActive);\n    } else if (event === 'paused') {\n      self.pull.on('paused', pullPaused);\n      self.push.on('paused', pushPaused);\n    }\n  });\n\n  this.on('removeListener', function (event) {\n    if (event === 'change') {\n      self.pull.removeListener('change', pullChange);\n      self.push.removeListener('change', pushChange);\n    } else if (event === 'denied') {\n      self.pull.removeListener('denied', pullDenied);\n      self.push.removeListener('denied', pushDenied);\n    } else if (event === 'active') {\n      self.pull.removeListener('active', pullActive);\n      self.push.removeListener('active', pushActive);\n    } else if (event === 'paused') {\n      self.pull.removeListener('paused', pullPaused);\n      self.push.removeListener('paused', pushPaused);\n    }\n  });\n\n  this.pull.on('removeListener', removeAll('pull'));\n  this.push.on('removeListener', removeAll('push'));\n\n  var promise = PouchPromise.all([\n    this.push,\n    this.pull\n  ]).then(function (resp) {\n    var out = {\n      push: resp[0],\n      pull: resp[1]\n    };\n    self.emit('complete', out);\n    if (callback) {\n      callback(null, out);\n    }\n    self.removeAllListeners();\n    return out;\n  }, function (err) {\n    self.cancel();\n    if (callback) {\n      // if there's a callback, then the callback can receive\n      // the error event\n      callback(err);\n    } else {\n      // if there's no callback, then we're safe to emit an error\n      // event, which would otherwise throw an unhandled error\n      // due to 'error' being a special event in EventEmitters\n      self.emit('error', err);\n    }\n    self.removeAllListeners();\n    if (callback) {\n      // no sense throwing if we're already emitting an 'error' event\n      throw err;\n    }\n  });\n\n  this.then = function (success, err) {\n    return promise.then(success, err);\n  };\n\n  this.catch = function (err) {\n    return promise.catch(err);\n  };\n}\n\nSync.prototype.cancel = function () {\n  if (!this.canceled) {\n    this.canceled = true;\n    this.push.cancel();\n    this.pull.cancel();\n  }\n};\n\nfunction replication(PouchDB) {\n  PouchDB.replicate = replicate;\n  PouchDB.sync = sync;\n\n  Object.defineProperty(PouchDB.prototype, 'replicate', {\n    get: function () {\n      var self = this;\n      return {\n        from: function (other, opts, callback) {\n          return self.constructor.replicate(other, self, opts, callback);\n        },\n        to: function (other, opts, callback) {\n          return self.constructor.replicate(self, other, opts, callback);\n        }\n      };\n    }\n  });\n\n  PouchDB.prototype.sync = function (dbName, opts, callback) {\n    return this.constructor.sync(this, dbName, opts, callback);\n  };\n}\n\nPouchDB.plugin(IDBPouch)\n  .plugin(WebSqlPouch)\n  .plugin(HttpPouch$1)\n  .plugin(mapreduce)\n  .plugin(replication);\n\n// Pull from src because pouchdb-node/pouchdb-browser themselves\n// are aggressively optimized and jsnext:main would normally give us this\n// aggressive bundle.\n\nmodule.exports = PouchDB;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/pouchdb/lib/index-browser.js\n// module id = 14\n// module chunks = 0","// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g =\n  typeof global === \"object\" ? global :\n  typeof window === \"object\" ? window :\n  typeof self === \"object\" ? self : this;\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/regenerator-runtime/runtime-module.js\n// module id = 15\n// module chunks = 0","/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var hasOwn = Object.prototype.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided, then outerFn.prototype instanceof Generator.\n    var generator = Object.create((outerFn || Generator).prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `value instanceof AwaitArgument` to determine if the yielded value is\n  // meant to be awaited. Some may consider the name of this method too\n  // cutesy, but they are curmudgeons.\n  runtime.awrap = function(arg) {\n    return new AwaitArgument(arg);\n  };\n\n  function AwaitArgument(arg) {\n    this.arg = arg;\n  }\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value instanceof AwaitArgument) {\n          return Promise.resolve(value.arg).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    if (typeof process === \"object\" && process.domain) {\n      invoke = process.domain.bind(invoke);\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          if (method === \"return\" ||\n              (method === \"throw\" && delegate.iterator[method] === undefined)) {\n            // A return or throw (when the delegate iterator has no throw\n            // method) always terminates the yield* loop.\n            context.delegate = null;\n\n            // If the delegate iterator has a return method, give it a\n            // chance to clean up.\n            var returnMethod = delegate.iterator[\"return\"];\n            if (returnMethod) {\n              var record = tryCatch(returnMethod, delegate.iterator, arg);\n              if (record.type === \"throw\") {\n                // If the return method threw an exception, let that\n                // exception prevail over the original return or throw.\n                method = \"throw\";\n                arg = record.arg;\n                continue;\n              }\n            }\n\n            if (method === \"return\") {\n              // Continue with the outer return, now that the delegate\n              // iterator has been terminated.\n              continue;\n            }\n          }\n\n          var record = tryCatch(\n            delegate.iterator[method],\n            delegate.iterator,\n            arg\n          );\n\n          if (record.type === \"throw\") {\n            context.delegate = null;\n\n            // Like returning generator.throw(uncaught), but without the\n            // overhead of an extra function call.\n            method = \"throw\";\n            arg = record.arg;\n            continue;\n          }\n\n          // Delegate generator ran and handled its own exceptions so\n          // regardless of what the method was, we continue as if it is\n          // \"next\" with an undefined arg.\n          method = \"next\";\n          arg = undefined;\n\n          var info = record.arg;\n          if (info.done) {\n            context[delegate.resultName] = info.value;\n            context.next = delegate.nextLoc;\n          } else {\n            state = GenStateSuspendedYield;\n            return info;\n          }\n\n          context.delegate = null;\n        }\n\n        if (method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = arg;\n\n        } else if (method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw arg;\n          }\n\n          if (context.dispatchException(arg)) {\n            // If the dispatched exception was caught by a catch block,\n            // then let that catch block handle the exception normally.\n            method = \"next\";\n            arg = undefined;\n          }\n\n        } else if (method === \"return\") {\n          context.abrupt(\"return\", arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          var info = {\n            value: record.arg,\n            done: context.done\n          };\n\n          if (record.arg === ContinueSentinel) {\n            if (context.delegate && method === \"next\") {\n              // Deliberately forget the last sent value so that we don't\n              // accidentally pass it on to the delegate.\n              arg = undefined;\n            }\n          } else {\n            return info;\n          }\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(arg) call above.\n          method = \"throw\";\n          arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.next = finallyEntry.finallyLoc;\n      } else {\n        this.complete(record);\n      }\n\n      return ContinueSentinel;\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = record.arg;\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // Among the various tricks for obtaining a reference to the global\n  // object, this seems to be the most reliable technique that does not\n  // use indirect eval (which violates Content Security Policy).\n  typeof global === \"object\" ? global :\n  typeof window === \"object\" ? window :\n  typeof self === \"object\" ? self : this\n);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/regenerator-runtime/runtime.js\n// module id = 16\n// module chunks = 0","// Generated by CoffeeScript 1.9.2\n(function() {\n  var hasProp = {}.hasOwnProperty,\n    slice = [].slice;\n\n  module.exports = function(source, scope) {\n    var key, keys, value, values;\n    keys = [];\n    values = [];\n    for (key in scope) {\n      if (!hasProp.call(scope, key)) continue;\n      value = scope[key];\n      if (key === 'this') {\n        continue;\n      }\n      keys.push(key);\n      values.push(value);\n    }\n    return Function.apply(null, slice.call(keys).concat([source])).apply(scope[\"this\"], values);\n  };\n\n}).call(this);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/scope-eval/scope_eval.js\n// module id = 17\n// module chunks = 0","(function (factory) {\n    if (typeof exports === 'object') {\n        // Node/CommonJS\n        module.exports = factory();\n    } else if (typeof define === 'function' && define.amd) {\n        // AMD\n        define(factory);\n    } else {\n        // Browser globals (with support for web workers)\n        var glob;\n\n        try {\n            glob = window;\n        } catch (e) {\n            glob = self;\n        }\n\n        glob.SparkMD5 = factory();\n    }\n}(function (undefined) {\n\n    'use strict';\n\n    /*\n     * Fastest md5 implementation around (JKM md5).\n     * Credits: Joseph Myers\n     *\n     * @see http://www.myersdaily.org/joseph/javascript/md5-text.html\n     * @see http://jsperf.com/md5-shootout/7\n     */\n\n    /* this function is much faster,\n      so if possible we use it. Some IEs\n      are the only ones I know of that\n      need the idiotic second function,\n      generated by an if clause.  */\n    var add32 = function (a, b) {\n        return (a + b) & 0xFFFFFFFF;\n    },\n        hex_chr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];\n\n\n    function cmn(q, a, b, x, s, t) {\n        a = add32(add32(a, q), add32(x, t));\n        return add32((a << s) | (a >>> (32 - s)), b);\n    }\n\n    function ff(a, b, c, d, x, s, t) {\n        return cmn((b & c) | ((~b) & d), a, b, x, s, t);\n    }\n\n    function gg(a, b, c, d, x, s, t) {\n        return cmn((b & d) | (c & (~d)), a, b, x, s, t);\n    }\n\n    function hh(a, b, c, d, x, s, t) {\n        return cmn(b ^ c ^ d, a, b, x, s, t);\n    }\n\n    function ii(a, b, c, d, x, s, t) {\n        return cmn(c ^ (b | (~d)), a, b, x, s, t);\n    }\n\n    function md5cycle(x, k) {\n        var a = x[0],\n            b = x[1],\n            c = x[2],\n            d = x[3];\n\n        a = ff(a, b, c, d, k[0], 7, -680876936);\n        d = ff(d, a, b, c, k[1], 12, -389564586);\n        c = ff(c, d, a, b, k[2], 17, 606105819);\n        b = ff(b, c, d, a, k[3], 22, -1044525330);\n        a = ff(a, b, c, d, k[4], 7, -176418897);\n        d = ff(d, a, b, c, k[5], 12, 1200080426);\n        c = ff(c, d, a, b, k[6], 17, -1473231341);\n        b = ff(b, c, d, a, k[7], 22, -45705983);\n        a = ff(a, b, c, d, k[8], 7, 1770035416);\n        d = ff(d, a, b, c, k[9], 12, -1958414417);\n        c = ff(c, d, a, b, k[10], 17, -42063);\n        b = ff(b, c, d, a, k[11], 22, -1990404162);\n        a = ff(a, b, c, d, k[12], 7, 1804603682);\n        d = ff(d, a, b, c, k[13], 12, -40341101);\n        c = ff(c, d, a, b, k[14], 17, -1502002290);\n        b = ff(b, c, d, a, k[15], 22, 1236535329);\n\n        a = gg(a, b, c, d, k[1], 5, -165796510);\n        d = gg(d, a, b, c, k[6], 9, -1069501632);\n        c = gg(c, d, a, b, k[11], 14, 643717713);\n        b = gg(b, c, d, a, k[0], 20, -373897302);\n        a = gg(a, b, c, d, k[5], 5, -701558691);\n        d = gg(d, a, b, c, k[10], 9, 38016083);\n        c = gg(c, d, a, b, k[15], 14, -660478335);\n        b = gg(b, c, d, a, k[4], 20, -405537848);\n        a = gg(a, b, c, d, k[9], 5, 568446438);\n        d = gg(d, a, b, c, k[14], 9, -1019803690);\n        c = gg(c, d, a, b, k[3], 14, -187363961);\n        b = gg(b, c, d, a, k[8], 20, 1163531501);\n        a = gg(a, b, c, d, k[13], 5, -1444681467);\n        d = gg(d, a, b, c, k[2], 9, -51403784);\n        c = gg(c, d, a, b, k[7], 14, 1735328473);\n        b = gg(b, c, d, a, k[12], 20, -1926607734);\n\n        a = hh(a, b, c, d, k[5], 4, -378558);\n        d = hh(d, a, b, c, k[8], 11, -2022574463);\n        c = hh(c, d, a, b, k[11], 16, 1839030562);\n        b = hh(b, c, d, a, k[14], 23, -35309556);\n        a = hh(a, b, c, d, k[1], 4, -1530992060);\n        d = hh(d, a, b, c, k[4], 11, 1272893353);\n        c = hh(c, d, a, b, k[7], 16, -155497632);\n        b = hh(b, c, d, a, k[10], 23, -1094730640);\n        a = hh(a, b, c, d, k[13], 4, 681279174);\n        d = hh(d, a, b, c, k[0], 11, -358537222);\n        c = hh(c, d, a, b, k[3], 16, -722521979);\n        b = hh(b, c, d, a, k[6], 23, 76029189);\n        a = hh(a, b, c, d, k[9], 4, -640364487);\n        d = hh(d, a, b, c, k[12], 11, -421815835);\n        c = hh(c, d, a, b, k[15], 16, 530742520);\n        b = hh(b, c, d, a, k[2], 23, -995338651);\n\n        a = ii(a, b, c, d, k[0], 6, -198630844);\n        d = ii(d, a, b, c, k[7], 10, 1126891415);\n        c = ii(c, d, a, b, k[14], 15, -1416354905);\n        b = ii(b, c, d, a, k[5], 21, -57434055);\n        a = ii(a, b, c, d, k[12], 6, 1700485571);\n        d = ii(d, a, b, c, k[3], 10, -1894986606);\n        c = ii(c, d, a, b, k[10], 15, -1051523);\n        b = ii(b, c, d, a, k[1], 21, -2054922799);\n        a = ii(a, b, c, d, k[8], 6, 1873313359);\n        d = ii(d, a, b, c, k[15], 10, -30611744);\n        c = ii(c, d, a, b, k[6], 15, -1560198380);\n        b = ii(b, c, d, a, k[13], 21, 1309151649);\n        a = ii(a, b, c, d, k[4], 6, -145523070);\n        d = ii(d, a, b, c, k[11], 10, -1120210379);\n        c = ii(c, d, a, b, k[2], 15, 718787259);\n        b = ii(b, c, d, a, k[9], 21, -343485551);\n\n        x[0] = add32(a, x[0]);\n        x[1] = add32(b, x[1]);\n        x[2] = add32(c, x[2]);\n        x[3] = add32(d, x[3]);\n    }\n\n    function md5blk(s) {\n        var md5blks = [],\n            i; /* Andy King said do it this way. */\n\n        for (i = 0; i < 64; i += 4) {\n            md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);\n        }\n        return md5blks;\n    }\n\n    function md5blk_array(a) {\n        var md5blks = [],\n            i; /* Andy King said do it this way. */\n\n        for (i = 0; i < 64; i += 4) {\n            md5blks[i >> 2] = a[i] + (a[i + 1] << 8) + (a[i + 2] << 16) + (a[i + 3] << 24);\n        }\n        return md5blks;\n    }\n\n    function md51(s) {\n        var n = s.length,\n            state = [1732584193, -271733879, -1732584194, 271733878],\n            i,\n            length,\n            tail,\n            tmp,\n            lo,\n            hi;\n\n        for (i = 64; i <= n; i += 64) {\n            md5cycle(state, md5blk(s.substring(i - 64, i)));\n        }\n        s = s.substring(i - 64);\n        length = s.length;\n        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        for (i = 0; i < length; i += 1) {\n            tail[i >> 2] |= s.charCodeAt(i) << ((i % 4) << 3);\n        }\n        tail[i >> 2] |= 0x80 << ((i % 4) << 3);\n        if (i > 55) {\n            md5cycle(state, tail);\n            for (i = 0; i < 16; i += 1) {\n                tail[i] = 0;\n            }\n        }\n\n        // Beware that the final length might not fit in 32 bits so we take care of that\n        tmp = n * 8;\n        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\n        lo = parseInt(tmp[2], 16);\n        hi = parseInt(tmp[1], 16) || 0;\n\n        tail[14] = lo;\n        tail[15] = hi;\n\n        md5cycle(state, tail);\n        return state;\n    }\n\n    function md51_array(a) {\n        var n = a.length,\n            state = [1732584193, -271733879, -1732584194, 271733878],\n            i,\n            length,\n            tail,\n            tmp,\n            lo,\n            hi;\n\n        for (i = 64; i <= n; i += 64) {\n            md5cycle(state, md5blk_array(a.subarray(i - 64, i)));\n        }\n\n        // Not sure if it is a bug, however IE10 will always produce a sub array of length 1\n        // containing the last element of the parent array if the sub array specified starts\n        // beyond the length of the parent array - weird.\n        // https://connect.microsoft.com/IE/feedback/details/771452/typed-array-subarray-issue\n        a = (i - 64) < n ? a.subarray(i - 64) : new Uint8Array(0);\n\n        length = a.length;\n        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        for (i = 0; i < length; i += 1) {\n            tail[i >> 2] |= a[i] << ((i % 4) << 3);\n        }\n\n        tail[i >> 2] |= 0x80 << ((i % 4) << 3);\n        if (i > 55) {\n            md5cycle(state, tail);\n            for (i = 0; i < 16; i += 1) {\n                tail[i] = 0;\n            }\n        }\n\n        // Beware that the final length might not fit in 32 bits so we take care of that\n        tmp = n * 8;\n        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\n        lo = parseInt(tmp[2], 16);\n        hi = parseInt(tmp[1], 16) || 0;\n\n        tail[14] = lo;\n        tail[15] = hi;\n\n        md5cycle(state, tail);\n\n        return state;\n    }\n\n    function rhex(n) {\n        var s = '',\n            j;\n        for (j = 0; j < 4; j += 1) {\n            s += hex_chr[(n >> (j * 8 + 4)) & 0x0F] + hex_chr[(n >> (j * 8)) & 0x0F];\n        }\n        return s;\n    }\n\n    function hex(x) {\n        var i;\n        for (i = 0; i < x.length; i += 1) {\n            x[i] = rhex(x[i]);\n        }\n        return x.join('');\n    }\n\n    // In some cases the fast add32 function cannot be used..\n    if (hex(md51('hello')) !== '5d41402abc4b2a76b9719d911017c592') {\n        add32 = function (x, y) {\n            var lsw = (x & 0xFFFF) + (y & 0xFFFF),\n                msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n            return (msw << 16) | (lsw & 0xFFFF);\n        };\n    }\n\n    // ---------------------------------------------------\n\n    /**\n     * ArrayBuffer slice polyfill.\n     *\n     * @see https://github.com/ttaubert/node-arraybuffer-slice\n     */\n\n    if (typeof ArrayBuffer !== 'undefined' && !ArrayBuffer.prototype.slice) {\n        (function () {\n            function clamp(val, length) {\n                val = (val | 0) || 0;\n\n                if (val < 0) {\n                    return Math.max(val + length, 0);\n                }\n\n                return Math.min(val, length);\n            }\n\n            ArrayBuffer.prototype.slice = function (from, to) {\n                var length = this.byteLength,\n                    begin = clamp(from, length),\n                    end = length,\n                    num,\n                    target,\n                    targetArray,\n                    sourceArray;\n\n                if (to !== undefined) {\n                    end = clamp(to, length);\n                }\n\n                if (begin > end) {\n                    return new ArrayBuffer(0);\n                }\n\n                num = end - begin;\n                target = new ArrayBuffer(num);\n                targetArray = new Uint8Array(target);\n\n                sourceArray = new Uint8Array(this, begin, num);\n                targetArray.set(sourceArray);\n\n                return target;\n            };\n        })();\n    }\n\n    // ---------------------------------------------------\n\n    /**\n     * Helpers.\n     */\n\n    function toUtf8(str) {\n        if (/[\\u0080-\\uFFFF]/.test(str)) {\n            str = unescape(encodeURIComponent(str));\n        }\n\n        return str;\n    }\n\n    function utf8Str2ArrayBuffer(str, returnUInt8Array) {\n        var length = str.length,\n           buff = new ArrayBuffer(length),\n           arr = new Uint8Array(buff),\n           i;\n\n        for (i = 0; i < length; i += 1) {\n            arr[i] = str.charCodeAt(i);\n        }\n\n        return returnUInt8Array ? arr : buff;\n    }\n\n    function arrayBuffer2Utf8Str(buff) {\n        return String.fromCharCode.apply(null, new Uint8Array(buff));\n    }\n\n    function concatenateArrayBuffers(first, second, returnUInt8Array) {\n        var result = new Uint8Array(first.byteLength + second.byteLength);\n\n        result.set(new Uint8Array(first));\n        result.set(new Uint8Array(second), first.byteLength);\n\n        return returnUInt8Array ? result : result.buffer;\n    }\n\n    function hexToBinaryString(hex) {\n        var bytes = [],\n            length = hex.length,\n            x;\n\n        for (x = 0; x < length - 1; x += 2) {\n            bytes.push(parseInt(hex.substr(x, 2), 16));\n        }\n\n        return String.fromCharCode.apply(String, bytes);\n    }\n\n    // ---------------------------------------------------\n\n    /**\n     * SparkMD5 OOP implementation.\n     *\n     * Use this class to perform an incremental md5, otherwise use the\n     * static methods instead.\n     */\n\n    function SparkMD5() {\n        // call reset to init the instance\n        this.reset();\n    }\n\n    /**\n     * Appends a string.\n     * A conversion will be applied if an utf8 string is detected.\n     *\n     * @param {String} str The string to be appended\n     *\n     * @return {SparkMD5} The instance itself\n     */\n    SparkMD5.prototype.append = function (str) {\n        // Converts the string to utf8 bytes if necessary\n        // Then append as binary\n        this.appendBinary(toUtf8(str));\n\n        return this;\n    };\n\n    /**\n     * Appends a binary string.\n     *\n     * @param {String} contents The binary string to be appended\n     *\n     * @return {SparkMD5} The instance itself\n     */\n    SparkMD5.prototype.appendBinary = function (contents) {\n        this._buff += contents;\n        this._length += contents.length;\n\n        var length = this._buff.length,\n            i;\n\n        for (i = 64; i <= length; i += 64) {\n            md5cycle(this._hash, md5blk(this._buff.substring(i - 64, i)));\n        }\n\n        this._buff = this._buff.substring(i - 64);\n\n        return this;\n    };\n\n    /**\n     * Finishes the incremental computation, reseting the internal state and\n     * returning the result.\n     *\n     * @param {Boolean} raw True to get the raw string, false to get the hex string\n     *\n     * @return {String} The result\n     */\n    SparkMD5.prototype.end = function (raw) {\n        var buff = this._buff,\n            length = buff.length,\n            i,\n            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            ret;\n\n        for (i = 0; i < length; i += 1) {\n            tail[i >> 2] |= buff.charCodeAt(i) << ((i % 4) << 3);\n        }\n\n        this._finish(tail, length);\n        ret = hex(this._hash);\n\n        if (raw) {\n            ret = hexToBinaryString(ret);\n        }\n\n        this.reset();\n\n        return ret;\n    };\n\n    /**\n     * Resets the internal state of the computation.\n     *\n     * @return {SparkMD5} The instance itself\n     */\n    SparkMD5.prototype.reset = function () {\n        this._buff = '';\n        this._length = 0;\n        this._hash = [1732584193, -271733879, -1732584194, 271733878];\n\n        return this;\n    };\n\n    /**\n     * Gets the internal state of the computation.\n     *\n     * @return {Object} The state\n     */\n    SparkMD5.prototype.getState = function () {\n        return {\n            buff: this._buff,\n            length: this._length,\n            hash: this._hash\n        };\n    };\n\n    /**\n     * Gets the internal state of the computation.\n     *\n     * @param {Object} state The state\n     *\n     * @return {SparkMD5} The instance itself\n     */\n    SparkMD5.prototype.setState = function (state) {\n        this._buff = state.buff;\n        this._length = state.length;\n        this._hash = state.hash;\n\n        return this;\n    };\n\n    /**\n     * Releases memory used by the incremental buffer and other additional\n     * resources. If you plan to use the instance again, use reset instead.\n     */\n    SparkMD5.prototype.destroy = function () {\n        delete this._hash;\n        delete this._buff;\n        delete this._length;\n    };\n\n    /**\n     * Finish the final calculation based on the tail.\n     *\n     * @param {Array}  tail   The tail (will be modified)\n     * @param {Number} length The length of the remaining buffer\n     */\n    SparkMD5.prototype._finish = function (tail, length) {\n        var i = length,\n            tmp,\n            lo,\n            hi;\n\n        tail[i >> 2] |= 0x80 << ((i % 4) << 3);\n        if (i > 55) {\n            md5cycle(this._hash, tail);\n            for (i = 0; i < 16; i += 1) {\n                tail[i] = 0;\n            }\n        }\n\n        // Do the final computation based on the tail and length\n        // Beware that the final length may not fit in 32 bits so we take care of that\n        tmp = this._length * 8;\n        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\n        lo = parseInt(tmp[2], 16);\n        hi = parseInt(tmp[1], 16) || 0;\n\n        tail[14] = lo;\n        tail[15] = hi;\n        md5cycle(this._hash, tail);\n    };\n\n    /**\n     * Performs the md5 hash on a string.\n     * A conversion will be applied if utf8 string is detected.\n     *\n     * @param {String}  str The string\n     * @param {Boolean} raw True to get the raw string, false to get the hex string\n     *\n     * @return {String} The result\n     */\n    SparkMD5.hash = function (str, raw) {\n        // Converts the string to utf8 bytes if necessary\n        // Then compute it using the binary function\n        return SparkMD5.hashBinary(toUtf8(str), raw);\n    };\n\n    /**\n     * Performs the md5 hash on a binary string.\n     *\n     * @param {String}  content The binary string\n     * @param {Boolean} raw     True to get the raw string, false to get the hex string\n     *\n     * @return {String} The result\n     */\n    SparkMD5.hashBinary = function (content, raw) {\n        var hash = md51(content),\n            ret = hex(hash);\n\n        return raw ? hexToBinaryString(ret) : ret;\n    };\n\n    // ---------------------------------------------------\n\n    /**\n     * SparkMD5 OOP implementation for array buffers.\n     *\n     * Use this class to perform an incremental md5 ONLY for array buffers.\n     */\n    SparkMD5.ArrayBuffer = function () {\n        // call reset to init the instance\n        this.reset();\n    };\n\n    /**\n     * Appends an array buffer.\n     *\n     * @param {ArrayBuffer} arr The array to be appended\n     *\n     * @return {SparkMD5.ArrayBuffer} The instance itself\n     */\n    SparkMD5.ArrayBuffer.prototype.append = function (arr) {\n        var buff = concatenateArrayBuffers(this._buff.buffer, arr, true),\n            length = buff.length,\n            i;\n\n        this._length += arr.byteLength;\n\n        for (i = 64; i <= length; i += 64) {\n            md5cycle(this._hash, md5blk_array(buff.subarray(i - 64, i)));\n        }\n\n        this._buff = (i - 64) < length ? new Uint8Array(buff.buffer.slice(i - 64)) : new Uint8Array(0);\n\n        return this;\n    };\n\n    /**\n     * Finishes the incremental computation, reseting the internal state and\n     * returning the result.\n     *\n     * @param {Boolean} raw True to get the raw string, false to get the hex string\n     *\n     * @return {String} The result\n     */\n    SparkMD5.ArrayBuffer.prototype.end = function (raw) {\n        var buff = this._buff,\n            length = buff.length,\n            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            i,\n            ret;\n\n        for (i = 0; i < length; i += 1) {\n            tail[i >> 2] |= buff[i] << ((i % 4) << 3);\n        }\n\n        this._finish(tail, length);\n        ret = hex(this._hash);\n\n        if (raw) {\n            ret = hexToBinaryString(ret);\n        }\n\n        this.reset();\n\n        return ret;\n    };\n\n    /**\n     * Resets the internal state of the computation.\n     *\n     * @return {SparkMD5.ArrayBuffer} The instance itself\n     */\n    SparkMD5.ArrayBuffer.prototype.reset = function () {\n        this._buff = new Uint8Array(0);\n        this._length = 0;\n        this._hash = [1732584193, -271733879, -1732584194, 271733878];\n\n        return this;\n    };\n\n    /**\n     * Gets the internal state of the computation.\n     *\n     * @return {Object} The state\n     */\n    SparkMD5.ArrayBuffer.prototype.getState = function () {\n        var state = SparkMD5.prototype.getState.call(this);\n\n        // Convert buffer to a string\n        state.buff = arrayBuffer2Utf8Str(state.buff);\n\n        return state;\n    };\n\n    /**\n     * Gets the internal state of the computation.\n     *\n     * @param {Object} state The state\n     *\n     * @return {SparkMD5.ArrayBuffer} The instance itself\n     */\n    SparkMD5.ArrayBuffer.prototype.setState = function (state) {\n        // Convert string to buffer\n        state.buff = utf8Str2ArrayBuffer(state.buff, true);\n\n        return SparkMD5.prototype.setState.call(this, state);\n    };\n\n    SparkMD5.ArrayBuffer.prototype.destroy = SparkMD5.prototype.destroy;\n\n    SparkMD5.ArrayBuffer.prototype._finish = SparkMD5.prototype._finish;\n\n    /**\n     * Performs the md5 hash on an array buffer.\n     *\n     * @param {ArrayBuffer} arr The array buffer\n     * @param {Boolean}     raw True to get the raw string, false to get the hex one\n     *\n     * @return {String} The result\n     */\n    SparkMD5.ArrayBuffer.hash = function (arr, raw) {\n        var hash = md51_array(new Uint8Array(arr)),\n            ret = hex(hash);\n\n        return raw ? hexToBinaryString(ret) : ret;\n    };\n\n    return SparkMD5;\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/spark-md5/spark-md5.js\n// module id = 18\n// module chunks = 0","'use strict';\n\n/**\n * Stringify/parse functions that don't operate\n * recursively, so they avoid call stack exceeded\n * errors.\n */\nexports.stringify = function stringify(input) {\n  var queue = [];\n  queue.push({obj: input});\n\n  var res = '';\n  var next, obj, prefix, val, i, arrayPrefix, keys, k, key, value, objPrefix;\n  while ((next = queue.pop())) {\n    obj = next.obj;\n    prefix = next.prefix || '';\n    val = next.val || '';\n    res += prefix;\n    if (val) {\n      res += val;\n    } else if (typeof obj !== 'object') {\n      res += typeof obj === 'undefined' ? null : JSON.stringify(obj);\n    } else if (obj === null) {\n      res += 'null';\n    } else if (Array.isArray(obj)) {\n      queue.push({val: ']'});\n      for (i = obj.length - 1; i >= 0; i--) {\n        arrayPrefix = i === 0 ? '' : ',';\n        queue.push({obj: obj[i], prefix: arrayPrefix});\n      }\n      queue.push({val: '['});\n    } else { // object\n      keys = [];\n      for (k in obj) {\n        if (obj.hasOwnProperty(k)) {\n          keys.push(k);\n        }\n      }\n      queue.push({val: '}'});\n      for (i = keys.length - 1; i >= 0; i--) {\n        key = keys[i];\n        value = obj[key];\n        objPrefix = (i > 0 ? ',' : '');\n        objPrefix += JSON.stringify(key) + ':';\n        queue.push({obj: value, prefix: objPrefix});\n      }\n      queue.push({val: '{'});\n    }\n  }\n  return res;\n};\n\n// Convenience function for the parse function.\n// This pop function is basically copied from\n// pouchCollate.parseIndexableString\nfunction pop(obj, stack, metaStack) {\n  var lastMetaElement = metaStack[metaStack.length - 1];\n  if (obj === lastMetaElement.element) {\n    // popping a meta-element, e.g. an object whose value is another object\n    metaStack.pop();\n    lastMetaElement = metaStack[metaStack.length - 1];\n  }\n  var element = lastMetaElement.element;\n  var lastElementIndex = lastMetaElement.index;\n  if (Array.isArray(element)) {\n    element.push(obj);\n  } else if (lastElementIndex === stack.length - 2) { // obj with key+value\n    var key = stack.pop();\n    element[key] = obj;\n  } else {\n    stack.push(obj); // obj with key only\n  }\n}\n\nexports.parse = function (str) {\n  var stack = [];\n  var metaStack = []; // stack for arrays and objects\n  var i = 0;\n  var collationIndex,parsedNum,numChar;\n  var parsedString,lastCh,numConsecutiveSlashes,ch;\n  var arrayElement, objElement;\n  while (true) {\n    collationIndex = str[i++];\n    if (collationIndex === '}' ||\n        collationIndex === ']' ||\n        typeof collationIndex === 'undefined') {\n      if (stack.length === 1) {\n        return stack.pop();\n      } else {\n        pop(stack.pop(), stack, metaStack);\n        continue;\n      }\n    }\n    switch (collationIndex) {\n      case ' ':\n      case '\\t':\n      case '\\n':\n      case ':':\n      case ',':\n        break;\n      case 'n':\n        i += 3; // 'ull'\n        pop(null, stack, metaStack);\n        break;\n      case 't':\n        i += 3; // 'rue'\n        pop(true, stack, metaStack);\n        break;\n      case 'f':\n        i += 4; // 'alse'\n        pop(false, stack, metaStack);\n        break;\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n      case '-':\n        parsedNum = '';\n        i--;\n        while (true) {\n          numChar = str[i++];\n          if (/[\\d\\.\\-e\\+]/.test(numChar)) {\n            parsedNum += numChar;\n          } else {\n            i--;\n            break;\n          }\n        }\n        pop(parseFloat(parsedNum), stack, metaStack);\n        break;\n      case '\"':\n        parsedString = '';\n        lastCh = void 0;\n        numConsecutiveSlashes = 0;\n        while (true) {\n          ch = str[i++];\n          if (ch !== '\"' || (lastCh === '\\\\' &&\n              numConsecutiveSlashes % 2 === 1)) {\n            parsedString += ch;\n            lastCh = ch;\n            if (lastCh === '\\\\') {\n              numConsecutiveSlashes++;\n            } else {\n              numConsecutiveSlashes = 0;\n            }\n          } else {\n            break;\n          }\n        }\n        pop(JSON.parse('\"' + parsedString + '\"'), stack, metaStack);\n        break;\n      case '[':\n        arrayElement = { element: [], index: stack.length };\n        stack.push(arrayElement.element);\n        metaStack.push(arrayElement);\n        break;\n      case '{':\n        objElement = { element: {}, index: stack.length };\n        stack.push(objElement.element);\n        metaStack.push(objElement);\n        break;\n      default:\n        throw new Error(\n          'unexpectedly reached end of input: ' + collationIndex);\n    }\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vuvuzela/index.js\n// module id = 19\n// module chunks = 0"],"sourceRoot":""}